<?php

namespace Drupal\tripal_chado\TripalField;

use Drupal\Core\Field\WidgetBase;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\tripal\TripalField\TripalWidgetBase;



/**
 * Defines the Chado field widget base class.
 */
abstract class ChadoWidgetBase extends TripalWidgetBase {

  /**
   * Saves some values from the initial form state when an entity
   * is first edited for multi-cardinality linking fields.
   * These values are needed to support the "Remove" button.
   *
   * @param int $delta
   *   The numeric index of the item.
   * @param int $base_id
   *   The primary key value of the record in the base table.
   * @param int $linker_id
   *   The primary key value of the record in the linking table.
   * @param string $fkey
   *   The name of the foreign key column in the linking table.
   * @param FormStateInterface &$form_state
   *   The current form state.
   */
  protected function saveInitialValues(int $delta, int $base_id, int $linker_id, string $fkey, FormStateInterface &$form_state) {
    $storage = $form_state->getStorage();
    // We want initial values, so never update them.
    if (!($storage['initial_values'][$delta] ?? FALSE)) {
      $storage['initial_values'][$delta] = [
        'linker_id' => $linker_id,
        'linker_fkey_column' => $fkey,
        $fkey => $base_id,
      ];
      $form_state->setStorage($storage);
    }
  }

  /**
   * Assists the massageFormValues() function for linking fields.
   * This includes properly handling deletion of linked records.
   *
   * @param string $fkey
   *   The foreign key column name in the linking table.
   * @param array $values
   *   The submitted form values produced by the widget.
   *   - If the widget does not manage multiple values itself, the array holds
   *     the values generated by the multiple copies of the $element generated
   *     by the formElement() method, keyed by delta.
   *   - If the widget manages multiple values, the array holds the values
   *     of the form element generated by the formElement() method.
   * @param array $form
   *   The form structure where field elements are attached to. This might be a
   *   full form structure, or a sub-element of a larger form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state.
   *
   * @return array
   *   An array of field values, keyed by delta.
   */
  protected function massageLinkingFormValues(string $fkey, array $values, array $form, FormStateInterface $form_state) {

    // Handle any empty values so that chado storage properly
    // deletes the record in chado. This happens when an existing
    // record is changed to "-- Select --"
    $retained_records = [];
    foreach ($values as $val_key => $value) {
      $retained_records[$val_key] = $value[$fkey];
      $linker_fkey_column = $value['linker_fkey_column'];
      if ($value[$linker_fkey_column] == '') {
        if ($value['record_id']) {
          // If there is a record_id, but no base table id, this
          // means we need to pass in this record to chado storage
          // to have the linker record be deleted there. To do
          // this, we need to have the correct primitive type for
          // this field, so change from empty string to zero.
          $values[$val_key][$linker_fkey_column] = 0;
        }
        else {
          // If there is no record_id, then it is the empty
          // field at the end of the list, and can be ignored.
          unset($values[$val_key]);
        }
      }
    }

    // If there were any values in the initial values that are not
    // present in the current form state, then an existing record
    // was deleted by clicking the "Remove" button. Similarly to
    // the code above, we need to include these in the values array
    // so that chado storage is informed to delete them in chado.
    $next_delta = array_key_last($values) + 1;
    $storage_values = $form_state->getStorage();
    $initial_values = $storage_values['initial_values'];
    foreach ($initial_values as $delta => $initial_value) {
      $linker_fkey_column = $initial_value['linker_fkey_column'];
      $base_id = $initial_value[$linker_fkey_column];
      if ($base_id and !in_array($base_id, $retained_records)) {
        // This item was removed from the form. Add back a value
        // so that chado storage knows to remove the chado record.
        $values[$next_delta]['linker_id'] = $initial_value['linker_id'];
        $values[$next_delta][$linker_fkey_column] = 0;
        $next_delta++;
      }
    }

    // Reset the weights
    $i = 0;
    foreach ($values as $val_key => $value) {
      $values[$val_key]['_weight'] = $i;
      $i++;
    }

    return $values;
  }
}
