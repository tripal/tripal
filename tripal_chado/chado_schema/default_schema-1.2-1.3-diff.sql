set search_path=public,so,frange,genetic_code;
DROP FUNCTION IF EXISTS gfffeatureatts(integer);
DROP VIEW IF EXISTS unorient_intra_transposition;
DROP VIEW IF EXISTS db_dbxref_count CASCADE;
DROP VIEW IF EXISTS stats_paths_to_root CASCADE;
DROP VIEW IF EXISTS cv_root CASCADE;
DROP VIEW IF EXISTS cv_leaf CASCADE;
DROP VIEW IF EXISTS common_ancestor_cvterm CASCADE;
DROP VIEW IF EXISTS common_descendant_cvterm CASCADE;
DROP VIEW IF EXISTS cv_cvterm_count CASCADE;
DROP VIEW IF EXISTS cv_cvterm_count_with_obs CASCADE;
DROP VIEW IF EXISTS cv_link_count CASCADE;
DROP VIEW IF EXISTS cv_path_count CASCADE;
DROP VIEW IF EXISTS type_feature_count CASCADE;
DROP VIEW IF EXISTS region CASCADE;
DROP VIEW IF EXISTS sequence_secondary_structure CASCADE;
DROP VIEW IF EXISTS g_quartet CASCADE;
DROP VIEW IF EXISTS interior_coding_exon CASCADE;
DROP VIEW IF EXISTS satellite_dna CASCADE;
DROP VIEW IF EXISTS pcr_product CASCADE;
DROP VIEW IF EXISTS read_pair CASCADE;
DROP VIEW IF EXISTS protein_coding CASCADE;
DROP VIEW IF EXISTS non_protein_coding CASCADE;
DROP VIEW IF EXISTS scrna_primary_transcript CASCADE;
DROP VIEW IF EXISTS scrna CASCADE;
DROP VIEW IF EXISTS inr_motif CASCADE;
DROP VIEW IF EXISTS dpe_motif CASCADE;
DROP VIEW IF EXISTS breu_motif CASCADE;
DROP VIEW IF EXISTS pse_motif CASCADE;
DROP VIEW IF EXISTS linkage_group CASCADE;
DROP VIEW IF EXISTS rna_internal_loop CASCADE;
DROP VIEW IF EXISTS asymmetric_rna_internal_loop CASCADE;
DROP VIEW IF EXISTS a_minor_rna_motif CASCADE;
DROP VIEW IF EXISTS k_turn_rna_motif CASCADE;
DROP VIEW IF EXISTS sarcin_like_rna_motif CASCADE;
DROP VIEW IF EXISTS symmetric_rna_internal_loop CASCADE;
DROP VIEW IF EXISTS rna_junction_loop CASCADE;
DROP VIEW IF EXISTS rna_hook_turn CASCADE;
DROP VIEW IF EXISTS base_pair CASCADE;
DROP VIEW IF EXISTS wc_base_pair CASCADE;
DROP VIEW IF EXISTS sugar_edge_base_pair CASCADE;
DROP VIEW IF EXISTS aptamer CASCADE;
DROP VIEW IF EXISTS dna_aptamer CASCADE;
DROP VIEW IF EXISTS rna_aptamer CASCADE;
DROP VIEW IF EXISTS morpholino_oligo CASCADE;
DROP VIEW IF EXISTS riboswitch CASCADE;
DROP VIEW IF EXISTS matrix_attachment_site CASCADE;
DROP VIEW IF EXISTS locus_control_region CASCADE;
DROP VIEW IF EXISTS match_part CASCADE;
DROP VIEW IF EXISTS genomic_clone CASCADE;
DROP VIEW IF EXISTS processed_pseudogene CASCADE;
DROP VIEW IF EXISTS pseudogene_by_unequal_crossing_over CASCADE;
DROP VIEW IF EXISTS probe CASCADE;
DROP VIEW IF EXISTS aneuploid CASCADE;
DROP VIEW IF EXISTS hyperploid CASCADE;
DROP VIEW IF EXISTS hypoploid CASCADE;
DROP VIEW IF EXISTS operator CASCADE;
DROP VIEW IF EXISTS nuclease_binding_site CASCADE;
DROP VIEW IF EXISTS compound_chromosome_arm CASCADE;
DROP VIEW IF EXISTS restriction_enzyme_binding_site CASCADE;
DROP VIEW IF EXISTS d_intrachr_transposition CASCADE;
DROP VIEW IF EXISTS d_interchr_transposition CASCADE;
DROP VIEW IF EXISTS free_chromosome_arm CASCADE;
DROP VIEW IF EXISTS gene_to_gene_feature CASCADE;
DROP VIEW IF EXISTS overlapping CASCADE;
DROP VIEW IF EXISTS inside_intron CASCADE;
DROP VIEW IF EXISTS inside_intron_antiparallel CASCADE;
DROP VIEW IF EXISTS inside_intron_parallel CASCADE;
DROP VIEW IF EXISTS five_prime_three_prime_overlap CASCADE;
DROP VIEW IF EXISTS five_prime_five_prime_overlap CASCADE;
DROP VIEW IF EXISTS three_prime_three_prime_overlap CASCADE;
DROP VIEW IF EXISTS three_prime_five_prime_overlap CASCADE;
DROP VIEW IF EXISTS antisense CASCADE;
DROP VIEW IF EXISTS polycistronic_transcript CASCADE;
DROP VIEW IF EXISTS dicistronic_transcript CASCADE;
DROP VIEW IF EXISTS operon_member CASCADE;
DROP VIEW IF EXISTS gene_array_member CASCADE;
DROP VIEW IF EXISTS macronuclear_sequence CASCADE;
DROP VIEW IF EXISTS micronuclear_sequence CASCADE;
DROP VIEW IF EXISTS nuclear_gene CASCADE;
DROP VIEW IF EXISTS mt_gene CASCADE;
DROP VIEW IF EXISTS kinetoplast_gene CASCADE;
DROP VIEW IF EXISTS plastid_gene CASCADE;
DROP VIEW IF EXISTS apicoplast_gene CASCADE;
DROP VIEW IF EXISTS ct_gene CASCADE;
DROP VIEW IF EXISTS chromoplast_gene CASCADE;
DROP VIEW IF EXISTS cyanelle_gene CASCADE;
DROP VIEW IF EXISTS leucoplast_gene CASCADE;
DROP VIEW IF EXISTS proplastid_gene CASCADE;
DROP VIEW IF EXISTS nucleomorph_gene CASCADE;
DROP VIEW IF EXISTS plasmid_gene CASCADE;
DROP VIEW IF EXISTS proviral_gene CASCADE;
DROP VIEW IF EXISTS endogenous_retroviral_gene CASCADE;
DROP VIEW IF EXISTS transposable_element CASCADE;
DROP VIEW IF EXISTS expressed_sequence_match CASCADE;
DROP VIEW IF EXISTS clone_insert_end CASCADE;
DROP VIEW IF EXISTS polypeptide CASCADE;
DROP VIEW IF EXISTS chromosome_arm CASCADE;
DROP VIEW IF EXISTS sequencing_primer CASCADE;
DROP VIEW IF EXISTS mrna_with_frameshift CASCADE;
DROP VIEW IF EXISTS sequence_feature CASCADE;
DROP VIEW IF EXISTS transposable_element_gene CASCADE;
DROP VIEW IF EXISTS primer CASCADE;
DROP VIEW IF EXISTS proviral_region CASCADE;
DROP VIEW IF EXISTS methylated_c CASCADE;
DROP VIEW IF EXISTS edited CASCADE;
DROP VIEW IF EXISTS transcript_with_translational_frameshift CASCADE;
DROP VIEW IF EXISTS regulated CASCADE;
DROP VIEW IF EXISTS protein_coding_primary_transcript CASCADE;
DROP VIEW IF EXISTS forward_primer CASCADE;
DROP VIEW IF EXISTS rna_sequence_secondary_structure CASCADE;
DROP VIEW IF EXISTS transcriptionally_regulated CASCADE;
DROP VIEW IF EXISTS transcriptionally_constitutive CASCADE;
DROP VIEW IF EXISTS transcriptionally_induced CASCADE;
DROP VIEW IF EXISTS transcriptionally_repressed CASCADE;
DROP VIEW IF EXISTS silenced_gene CASCADE;
DROP VIEW IF EXISTS gene_silenced_by_dna_modification CASCADE;
DROP VIEW IF EXISTS gene_silenced_by_dna_methylation CASCADE;
DROP VIEW IF EXISTS post_translationally_regulated CASCADE;
DROP VIEW IF EXISTS translationally_regulated CASCADE;
DROP VIEW IF EXISTS reverse_primer CASCADE;
DROP VIEW IF EXISTS epigenetically_modified CASCADE;
DROP VIEW IF EXISTS imprinted CASCADE;
DROP VIEW IF EXISTS maternally_imprinted CASCADE;
DROP VIEW IF EXISTS paternally_imprinted CASCADE;
DROP VIEW IF EXISTS allelically_excluded CASCADE;
DROP VIEW IF EXISTS gene_rearranged_at_dna_level CASCADE;
DROP VIEW IF EXISTS ribosome_entry_site CASCADE;
DROP VIEW IF EXISTS attenuator CASCADE;
DROP VIEW IF EXISTS terminator CASCADE;
DROP VIEW IF EXISTS dna_sequence_secondary_structure CASCADE;
DROP VIEW IF EXISTS assembly_component CASCADE;
DROP VIEW IF EXISTS recoded_codon CASCADE;
DROP VIEW IF EXISTS capped CASCADE;
DROP VIEW IF EXISTS exon CASCADE;
DROP VIEW IF EXISTS supercontig CASCADE;
DROP VIEW IF EXISTS contig CASCADE;
DROP VIEW IF EXISTS read CASCADE;
DROP VIEW IF EXISTS clone CASCADE;
DROP VIEW IF EXISTS yac CASCADE;
DROP VIEW IF EXISTS bac CASCADE;
DROP VIEW IF EXISTS pac CASCADE;
DROP VIEW IF EXISTS plasmid CASCADE;
DROP VIEW IF EXISTS cosmid CASCADE;
DROP VIEW IF EXISTS phagemid CASCADE;
DROP VIEW IF EXISTS fosmid CASCADE;
DROP VIEW IF EXISTS deletion CASCADE;
DROP VIEW IF EXISTS methylated_a CASCADE;
DROP VIEW IF EXISTS splice_site CASCADE;
DROP VIEW IF EXISTS five_prime_cis_splice_site CASCADE;
DROP VIEW IF EXISTS three_prime_cis_splice_site CASCADE;
DROP VIEW IF EXISTS enhancer CASCADE;
DROP VIEW IF EXISTS enhancer_bound_by_factor CASCADE;
DROP VIEW IF EXISTS promoter CASCADE;
DROP VIEW IF EXISTS rnapol_i_promoter CASCADE;
DROP VIEW IF EXISTS rnapol_ii_promoter CASCADE;
DROP VIEW IF EXISTS rnapol_iii_promoter CASCADE;
DROP VIEW IF EXISTS caat_signal CASCADE;
DROP VIEW IF EXISTS gc_rich_promoter_region CASCADE;
DROP VIEW IF EXISTS tata_box CASCADE;
DROP VIEW IF EXISTS minus_10_signal CASCADE;
DROP VIEW IF EXISTS minus_35_signal CASCADE;
DROP VIEW IF EXISTS cross_genome_match CASCADE;
DROP VIEW IF EXISTS operon CASCADE;
DROP VIEW IF EXISTS clone_insert_start CASCADE;
DROP VIEW IF EXISTS retrotransposon CASCADE;
DROP VIEW IF EXISTS translated_nucleotide_match CASCADE;
DROP VIEW IF EXISTS dna_transposon CASCADE;
DROP VIEW IF EXISTS non_transcribed_region CASCADE;
DROP VIEW IF EXISTS u2_intron CASCADE;
DROP VIEW IF EXISTS primary_transcript CASCADE;
DROP VIEW IF EXISTS ltr_retrotransposon CASCADE;
DROP VIEW IF EXISTS intron CASCADE;
DROP VIEW IF EXISTS non_ltr_retrotransposon CASCADE;
DROP VIEW IF EXISTS five_prime_intron CASCADE;
DROP VIEW IF EXISTS interior_intron CASCADE;
DROP VIEW IF EXISTS three_prime_intron CASCADE;
DROP VIEW IF EXISTS rflp_fragment CASCADE;
DROP VIEW IF EXISTS line_element CASCADE;
DROP VIEW IF EXISTS coding_exon CASCADE;
DROP VIEW IF EXISTS five_prime_coding_exon_coding_region CASCADE;
DROP VIEW IF EXISTS three_prime_coding_exon_coding_region CASCADE;
DROP VIEW IF EXISTS noncoding_exon CASCADE;
DROP VIEW IF EXISTS translocation CASCADE;
DROP VIEW IF EXISTS five_prime_coding_exon CASCADE;
DROP VIEW IF EXISTS interior_exon CASCADE;
DROP VIEW IF EXISTS three_prime_coding_exon CASCADE;
DROP VIEW IF EXISTS utr CASCADE;
DROP VIEW IF EXISTS five_prime_utr CASCADE;
DROP VIEW IF EXISTS three_prime_utr CASCADE;
DROP VIEW IF EXISTS sine_element CASCADE;
DROP VIEW IF EXISTS simple_sequence_length_variation CASCADE;
DROP VIEW IF EXISTS terminal_inverted_repeat_element CASCADE;
DROP VIEW IF EXISTS rrna_primary_transcript CASCADE;
DROP VIEW IF EXISTS trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS alanine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS arg_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS asparagine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS aspartic_acid_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS cysteine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS glutamic_acid_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS glutamine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS glycine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS histidine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS isoleucine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS leucine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS lysine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS methionine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS phe_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS proline_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS serine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS thr_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS try_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS tyrosine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS valine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS snrna_primary_transcript CASCADE;
DROP VIEW IF EXISTS snorna_primary_transcript CASCADE;
DROP VIEW IF EXISTS mature_transcript CASCADE;
DROP VIEW IF EXISTS protein_coding_gene CASCADE;
DROP VIEW IF EXISTS mrna CASCADE;
DROP VIEW IF EXISTS tf_binding_site CASCADE;
DROP VIEW IF EXISTS orf CASCADE;
DROP VIEW IF EXISTS transcript_attribute CASCADE;
DROP VIEW IF EXISTS foldback_element CASCADE;
DROP VIEW IF EXISTS flanking_region CASCADE;
DROP VIEW IF EXISTS chromosome_variation CASCADE;
DROP VIEW IF EXISTS internal_utr CASCADE;
DROP VIEW IF EXISTS untranslated_region_polycistronic_mrna CASCADE;
DROP VIEW IF EXISTS internal_ribosome_entry_site CASCADE;
DROP VIEW IF EXISTS polyadenylated CASCADE;
DROP VIEW IF EXISTS sequence_length_variation CASCADE;
DROP VIEW IF EXISTS modified_rna_base_feature CASCADE;
DROP VIEW IF EXISTS rrna CASCADE;
DROP VIEW IF EXISTS trna CASCADE;
DROP VIEW IF EXISTS alanyl_trna CASCADE;
DROP VIEW IF EXISTS rrna_small_subunit_primary_transcript CASCADE;
DROP VIEW IF EXISTS asparaginyl_trna CASCADE;
DROP VIEW IF EXISTS aspartyl_trna CASCADE;
DROP VIEW IF EXISTS cysteinyl_trna CASCADE;
DROP VIEW IF EXISTS glutaminyl_trna CASCADE;
DROP VIEW IF EXISTS glutamyl_trna CASCADE;
DROP VIEW IF EXISTS glycyl_trna CASCADE;
DROP VIEW IF EXISTS histidyl_trna CASCADE;
DROP VIEW IF EXISTS isoleucyl_trna CASCADE;
DROP VIEW IF EXISTS leucyl_trna CASCADE;
DROP VIEW IF EXISTS lysyl_trna CASCADE;
DROP VIEW IF EXISTS methionyl_trna CASCADE;
DROP VIEW IF EXISTS phenylalanyl_trna CASCADE;
DROP VIEW IF EXISTS prolyl_trna CASCADE;
DROP VIEW IF EXISTS seryl_trna CASCADE;
DROP VIEW IF EXISTS threonyl_trna CASCADE;
DROP VIEW IF EXISTS tryptophanyl_trna CASCADE;
DROP VIEW IF EXISTS tyrosyl_trna CASCADE;
DROP VIEW IF EXISTS valyl_trna CASCADE;
DROP VIEW IF EXISTS snrna CASCADE;
DROP VIEW IF EXISTS snorna CASCADE;
DROP VIEW IF EXISTS mirna CASCADE;
DROP VIEW IF EXISTS bound_by_factor CASCADE;
DROP VIEW IF EXISTS transcript_bound_by_nucleic_acid CASCADE;
DROP VIEW IF EXISTS transcript_bound_by_protein CASCADE;
DROP VIEW IF EXISTS engineered_gene CASCADE;
DROP VIEW IF EXISTS engineered_foreign_gene CASCADE;
DROP VIEW IF EXISTS mrna_with_minus_1_frameshift CASCADE;
DROP VIEW IF EXISTS engineered_foreign_transposable_element_gene CASCADE;
DROP VIEW IF EXISTS foreign_gene CASCADE;
DROP VIEW IF EXISTS long_terminal_repeat CASCADE;
DROP VIEW IF EXISTS fusion_gene CASCADE;
DROP VIEW IF EXISTS engineered_fusion_gene CASCADE;
DROP VIEW IF EXISTS microsatellite CASCADE;
DROP VIEW IF EXISTS dinucleotide_repeat_microsatellite_feature CASCADE;
DROP VIEW IF EXISTS trinuc_repeat_microsat CASCADE;
DROP VIEW IF EXISTS engineered_foreign_repetitive_element CASCADE;
DROP VIEW IF EXISTS inverted_repeat CASCADE;
DROP VIEW IF EXISTS u12_intron CASCADE;
DROP VIEW IF EXISTS origin_of_replication CASCADE;
DROP VIEW IF EXISTS d_loop CASCADE;
DROP VIEW IF EXISTS recombination_feature CASCADE;
DROP VIEW IF EXISTS specific_recombination_site CASCADE;
DROP VIEW IF EXISTS recombination_feature_of_rearranged_gene CASCADE;
DROP VIEW IF EXISTS vertebrate_immune_system_gene_recombination_feature CASCADE;
DROP VIEW IF EXISTS j_gene_recombination_feature CASCADE;
DROP VIEW IF EXISTS clip CASCADE;
DROP VIEW IF EXISTS modified_base CASCADE;
DROP VIEW IF EXISTS methylated_base_feature CASCADE;
DROP VIEW IF EXISTS cpg_island CASCADE;
DROP VIEW IF EXISTS experimentally_determined CASCADE;
DROP VIEW IF EXISTS stem_loop CASCADE;
DROP VIEW IF EXISTS direct_repeat CASCADE;
DROP VIEW IF EXISTS tss CASCADE;
DROP VIEW IF EXISTS cds CASCADE;
DROP VIEW IF EXISTS cdna_clone CASCADE;
DROP VIEW IF EXISTS start_codon CASCADE;
DROP VIEW IF EXISTS stop_codon CASCADE;
DROP VIEW IF EXISTS intronic_splice_enhancer CASCADE;
DROP VIEW IF EXISTS mrna_with_plus_1_frameshift CASCADE;
DROP VIEW IF EXISTS nuclease_hypersensitive_site CASCADE;
DROP VIEW IF EXISTS coding_start CASCADE;
DROP VIEW IF EXISTS tag CASCADE;
DROP VIEW IF EXISTS rrna_large_subunit_primary_transcript CASCADE;
DROP VIEW IF EXISTS sage_tag CASCADE;
DROP VIEW IF EXISTS coding_end CASCADE;
DROP VIEW IF EXISTS microarray_oligo CASCADE;
DROP VIEW IF EXISTS mrna_with_plus_2_frameshift CASCADE;
DROP VIEW IF EXISTS conserved_region CASCADE;
DROP VIEW IF EXISTS sts CASCADE;
DROP VIEW IF EXISTS coding_conserved_region CASCADE;
DROP VIEW IF EXISTS exon_junction CASCADE;
DROP VIEW IF EXISTS nc_conserved_region CASCADE;
DROP VIEW IF EXISTS mrna_with_minus_2_frameshift CASCADE;
DROP VIEW IF EXISTS pseudogene CASCADE;
DROP VIEW IF EXISTS rnai_reagent CASCADE;
DROP VIEW IF EXISTS mite CASCADE;
DROP VIEW IF EXISTS recombination_hotspot CASCADE;
DROP VIEW IF EXISTS chromosome CASCADE;
DROP VIEW IF EXISTS chromosome_band CASCADE;
DROP VIEW IF EXISTS site_specific_recombination_target_region CASCADE;
DROP VIEW IF EXISTS match CASCADE;
DROP VIEW IF EXISTS splice_enhancer CASCADE;
DROP VIEW IF EXISTS est CASCADE;
DROP VIEW IF EXISTS loxp_site CASCADE;
DROP VIEW IF EXISTS nucleotide_match CASCADE;
DROP VIEW IF EXISTS nucleic_acid CASCADE;
DROP VIEW IF EXISTS protein_match CASCADE;
DROP VIEW IF EXISTS frt_site CASCADE;
DROP VIEW IF EXISTS synthetic_sequence CASCADE;
DROP VIEW IF EXISTS dna CASCADE;
DROP VIEW IF EXISTS sequence_assembly CASCADE;
DROP VIEW IF EXISTS group_1_intron_homing_endonuclease_target_region CASCADE;
DROP VIEW IF EXISTS haplotype_block CASCADE;
DROP VIEW IF EXISTS rna CASCADE;
DROP VIEW IF EXISTS flanked CASCADE;
DROP VIEW IF EXISTS floxed CASCADE;
DROP VIEW IF EXISTS codon CASCADE;
DROP VIEW IF EXISTS frt_flanked CASCADE;
DROP VIEW IF EXISTS invalidated_by_chimeric_cdna CASCADE;
DROP VIEW IF EXISTS floxed_gene CASCADE;
DROP VIEW IF EXISTS transposable_element_flanking_region CASCADE;
DROP VIEW IF EXISTS integron CASCADE;
DROP VIEW IF EXISTS insertion_site CASCADE;
DROP VIEW IF EXISTS atti_site CASCADE;
DROP VIEW IF EXISTS transposable_element_insertion_site CASCADE;
DROP VIEW IF EXISTS small_regulatory_ncrna CASCADE;
DROP VIEW IF EXISTS conjugative_transposon CASCADE;
DROP VIEW IF EXISTS enzymatic_rna CASCADE;
DROP VIEW IF EXISTS recombinationally_inverted_gene CASCADE;
DROP VIEW IF EXISTS ribozyme CASCADE;
DROP VIEW IF EXISTS rrna_5_8s CASCADE;
DROP VIEW IF EXISTS rna_6s CASCADE;
DROP VIEW IF EXISTS csrb_rsmb_rna CASCADE;
DROP VIEW IF EXISTS dsra_rna CASCADE;
DROP VIEW IF EXISTS gcvb_rna CASCADE;
DROP VIEW IF EXISTS hammerhead_ribozyme CASCADE;
DROP VIEW IF EXISTS group_iia_intron CASCADE;
DROP VIEW IF EXISTS group_iib_intron CASCADE;
DROP VIEW IF EXISTS micf_rna CASCADE;
DROP VIEW IF EXISTS oxys_rna CASCADE;
DROP VIEW IF EXISTS rnase_mrp_rna CASCADE;
DROP VIEW IF EXISTS rnase_p_rna CASCADE;
DROP VIEW IF EXISTS rpra_rna CASCADE;
DROP VIEW IF EXISTS rre_rna CASCADE;
DROP VIEW IF EXISTS spot_42_rna CASCADE;
DROP VIEW IF EXISTS telomerase_rna CASCADE;
DROP VIEW IF EXISTS u1_snrna CASCADE;
DROP VIEW IF EXISTS u2_snrna CASCADE;
DROP VIEW IF EXISTS u4_snrna CASCADE;
DROP VIEW IF EXISTS u4atac_snrna CASCADE;
DROP VIEW IF EXISTS u5_snrna CASCADE;
DROP VIEW IF EXISTS u6_snrna CASCADE;
DROP VIEW IF EXISTS u6atac_snrna CASCADE;
DROP VIEW IF EXISTS u11_snrna CASCADE;
DROP VIEW IF EXISTS u12_snrna CASCADE;
DROP VIEW IF EXISTS sequence_attribute CASCADE;
DROP VIEW IF EXISTS gene_attribute CASCADE;
DROP VIEW IF EXISTS u14_snorna CASCADE;
DROP VIEW IF EXISTS vault_rna CASCADE;
DROP VIEW IF EXISTS y_rna CASCADE;
DROP VIEW IF EXISTS twintron CASCADE;
DROP VIEW IF EXISTS rrna_18s CASCADE;
DROP VIEW IF EXISTS binding_site CASCADE;
DROP VIEW IF EXISTS protein_binding_site CASCADE;
DROP VIEW IF EXISTS rescue_region CASCADE;
DROP VIEW IF EXISTS restriction_fragment CASCADE;
DROP VIEW IF EXISTS sequence_difference CASCADE;
DROP VIEW IF EXISTS invalidated_by_genomic_contamination CASCADE;
DROP VIEW IF EXISTS invalidated_by_genomic_polya_primed_cdna CASCADE;
DROP VIEW IF EXISTS invalidated_by_partial_processing CASCADE;
DROP VIEW IF EXISTS polypeptide_domain CASCADE;
DROP VIEW IF EXISTS signal_peptide CASCADE;
DROP VIEW IF EXISTS mature_protein_region CASCADE;
DROP VIEW IF EXISTS five_prime_terminal_inverted_repeat CASCADE;
DROP VIEW IF EXISTS three_prime_terminal_inverted_repeat CASCADE;
DROP VIEW IF EXISTS u5_ltr_region CASCADE;
DROP VIEW IF EXISTS r_ltr_region CASCADE;
DROP VIEW IF EXISTS u3_ltr_region CASCADE;
DROP VIEW IF EXISTS five_prime_ltr CASCADE;
DROP VIEW IF EXISTS three_prime_ltr CASCADE;
DROP VIEW IF EXISTS r_five_prime_ltr_region CASCADE;
DROP VIEW IF EXISTS u5_five_prime_ltr_region CASCADE;
DROP VIEW IF EXISTS u3_five_prime_ltr_region CASCADE;
DROP VIEW IF EXISTS r_three_prime_ltr_region CASCADE;
DROP VIEW IF EXISTS u3_three_prime_ltr_region CASCADE;
DROP VIEW IF EXISTS u5_three_prime_ltr_region CASCADE;
DROP VIEW IF EXISTS non_ltr_retrotransposon_polymeric_tract CASCADE;
DROP VIEW IF EXISTS target_site_duplication CASCADE;
DROP VIEW IF EXISTS rr_tract CASCADE;
DROP VIEW IF EXISTS ars CASCADE;
DROP VIEW IF EXISTS inverted_ring_chromosome CASCADE;
DROP VIEW IF EXISTS vector_replicon CASCADE;
DROP VIEW IF EXISTS ss_oligo CASCADE;
DROP VIEW IF EXISTS ds_oligo CASCADE;
DROP VIEW IF EXISTS polymer_attribute CASCADE;
DROP VIEW IF EXISTS three_prime_noncoding_exon CASCADE;
DROP VIEW IF EXISTS five_prime_noncoding_exon CASCADE;
DROP VIEW IF EXISTS utr_intron CASCADE;
DROP VIEW IF EXISTS five_prime_utr_intron CASCADE;
DROP VIEW IF EXISTS three_prime_utr_intron CASCADE;
DROP VIEW IF EXISTS random_sequence CASCADE;
DROP VIEW IF EXISTS interband CASCADE;
DROP VIEW IF EXISTS gene_with_polyadenylated_mrna CASCADE;
DROP VIEW IF EXISTS chromosomal_transposition CASCADE;
DROP VIEW IF EXISTS rasirna CASCADE;
DROP VIEW IF EXISTS gene_with_mrna_with_frameshift CASCADE;
DROP VIEW IF EXISTS recombinationally_rearranged_gene CASCADE;
DROP VIEW IF EXISTS interchromosomal_duplication CASCADE;
DROP VIEW IF EXISTS d_gene CASCADE;
DROP VIEW IF EXISTS gene_with_trans_spliced_transcript CASCADE;
DROP VIEW IF EXISTS vertebrate_immunoglobulin_t_cell_receptor_segment CASCADE;
DROP VIEW IF EXISTS inversion_derived_bipartite_deficiency CASCADE;
DROP VIEW IF EXISTS pseudogenic_region CASCADE;
DROP VIEW IF EXISTS encodes_alternately_spliced_transcripts CASCADE;
DROP VIEW IF EXISTS decayed_exon CASCADE;
DROP VIEW IF EXISTS inversion_derived_deficiency_plus_duplication CASCADE;
DROP VIEW IF EXISTS v_gene CASCADE;
DROP VIEW IF EXISTS post_translationally_regulated_by_protein_stability CASCADE;
DROP VIEW IF EXISTS golden_path_fragment CASCADE;
DROP VIEW IF EXISTS post_translationally_regulated_by_protein_modification CASCADE;
DROP VIEW IF EXISTS j_gene CASCADE;
DROP VIEW IF EXISTS autoregulated CASCADE;
DROP VIEW IF EXISTS tiling_path CASCADE;
DROP VIEW IF EXISTS negatively_autoregulated CASCADE;
DROP VIEW IF EXISTS tiling_path_fragment CASCADE;
DROP VIEW IF EXISTS positively_autoregulated CASCADE;
DROP VIEW IF EXISTS contig_read CASCADE;
DROP VIEW IF EXISTS c_gene CASCADE;
DROP VIEW IF EXISTS trans_spliced_transcript CASCADE;
DROP VIEW IF EXISTS tiling_path_clone CASCADE;
DROP VIEW IF EXISTS terminal_inverted_repeat CASCADE;
DROP VIEW IF EXISTS vertebrate_immunoglobulin_t_cell_receptor_gene_cluster CASCADE;
DROP VIEW IF EXISTS nc_primary_transcript CASCADE;
DROP VIEW IF EXISTS three_prime_coding_exon_noncoding_region CASCADE;
DROP VIEW IF EXISTS dj_j_cluster CASCADE;
DROP VIEW IF EXISTS five_prime_coding_exon_noncoding_region CASCADE;
DROP VIEW IF EXISTS vdj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS vdj_j_cluster CASCADE;
DROP VIEW IF EXISTS vj_c_cluster CASCADE;
DROP VIEW IF EXISTS vj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS vj_j_cluster CASCADE;
DROP VIEW IF EXISTS d_gene_recombination_feature CASCADE;
DROP VIEW IF EXISTS three_prime_d_heptamer CASCADE;
DROP VIEW IF EXISTS three_prime_d_nonamer CASCADE;
DROP VIEW IF EXISTS three_prime_d_spacer CASCADE;
DROP VIEW IF EXISTS five_prime_d_heptamer CASCADE;
DROP VIEW IF EXISTS five_prime_d_nonamer CASCADE;
DROP VIEW IF EXISTS five_prime_d_spacer CASCADE;
DROP VIEW IF EXISTS virtual_sequence CASCADE;
DROP VIEW IF EXISTS hoogsteen_base_pair CASCADE;
DROP VIEW IF EXISTS reverse_hoogsteen_base_pair CASCADE;
DROP VIEW IF EXISTS d_dj_c_cluster CASCADE;
DROP VIEW IF EXISTS d_dj_cluster CASCADE;
DROP VIEW IF EXISTS d_dj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS pseudogenic_exon CASCADE;
DROP VIEW IF EXISTS d_dj_j_cluster CASCADE;
DROP VIEW IF EXISTS d_j_c_cluster CASCADE;
DROP VIEW IF EXISTS vd_gene CASCADE;
DROP VIEW IF EXISTS j_c_cluster CASCADE;
DROP VIEW IF EXISTS inversion_derived_deficiency_plus_aneuploid CASCADE;
DROP VIEW IF EXISTS j_cluster CASCADE;
DROP VIEW IF EXISTS j_nonamer CASCADE;
DROP VIEW IF EXISTS j_heptamer CASCADE;
DROP VIEW IF EXISTS pseudogenic_transcript CASCADE;
DROP VIEW IF EXISTS j_spacer CASCADE;
DROP VIEW IF EXISTS v_dj_cluster CASCADE;
DROP VIEW IF EXISTS v_dj_j_cluster CASCADE;
DROP VIEW IF EXISTS v_vdj_c_cluster CASCADE;
DROP VIEW IF EXISTS v_vdj_cluster CASCADE;
DROP VIEW IF EXISTS v_vdj_j_cluster CASCADE;
DROP VIEW IF EXISTS v_vj_c_cluster CASCADE;
DROP VIEW IF EXISTS v_vj_cluster CASCADE;
DROP VIEW IF EXISTS v_vj_j_cluster CASCADE;
DROP VIEW IF EXISTS v_cluster CASCADE;
DROP VIEW IF EXISTS v_d_dj_c_cluster CASCADE;
DROP VIEW IF EXISTS v_d_dj_cluster CASCADE;
DROP VIEW IF EXISTS v_d_dj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS v_d_dj_j_cluster CASCADE;
DROP VIEW IF EXISTS v_d_j_c_cluster CASCADE;
DROP VIEW IF EXISTS v_d_j_cluster CASCADE;
DROP VIEW IF EXISTS v_heptamer CASCADE;
DROP VIEW IF EXISTS v_j_cluster CASCADE;
DROP VIEW IF EXISTS v_j_c_cluster CASCADE;
DROP VIEW IF EXISTS v_nonamer CASCADE;
DROP VIEW IF EXISTS v_spacer CASCADE;
DROP VIEW IF EXISTS v_gene_recombination_feature CASCADE;
DROP VIEW IF EXISTS dj_c_cluster CASCADE;
DROP VIEW IF EXISTS dj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS vdj_c_cluster CASCADE;
DROP VIEW IF EXISTS v_dj_c_cluster CASCADE;
DROP VIEW IF EXISTS helitron CASCADE;
DROP VIEW IF EXISTS recoding_pseudoknot CASCADE;
DROP VIEW IF EXISTS designed_sequence CASCADE;
DROP VIEW IF EXISTS inversion_derived_bipartite_duplication CASCADE;
DROP VIEW IF EXISTS gene_with_edited_transcript CASCADE;
DROP VIEW IF EXISTS inversion_derived_duplication_plus_aneuploid CASCADE;
DROP VIEW IF EXISTS aneuploid_chromosome CASCADE;
DROP VIEW IF EXISTS polya_signal_sequence CASCADE;
DROP VIEW IF EXISTS shine_dalgarno_sequence CASCADE;
DROP VIEW IF EXISTS polya_site CASCADE;
DROP VIEW IF EXISTS five_prime_clip CASCADE;
DROP VIEW IF EXISTS five_prime_d_recombination_signal_sequence CASCADE;
DROP VIEW IF EXISTS three_prime_clip CASCADE;
DROP VIEW IF EXISTS c_cluster CASCADE;
DROP VIEW IF EXISTS d_cluster CASCADE;
DROP VIEW IF EXISTS d_j_cluster CASCADE;
DROP VIEW IF EXISTS heptamer_of_recombination_feature_of_vertebrate_im_sys_gene CASCADE;
DROP VIEW IF EXISTS nonamer_of_recombination_feature_of_vertebrate_im_sys_gene CASCADE;
DROP VIEW IF EXISTS vertebrate_immune_system_gene_recombination_spacer CASCADE;
DROP VIEW IF EXISTS v_dj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS v_vdj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS v_vj_j_c_cluster CASCADE;
DROP VIEW IF EXISTS inversion_derived_aneuploid_chromosome CASCADE;
DROP VIEW IF EXISTS bidirectional_promoter CASCADE;
DROP VIEW IF EXISTS retrotransposed CASCADE;
DROP VIEW IF EXISTS three_prime_d_recombination_signal_sequence CASCADE;
DROP VIEW IF EXISTS mirna_encoding CASCADE;
DROP VIEW IF EXISTS dj_gene CASCADE;
DROP VIEW IF EXISTS rrna_encoding CASCADE;
DROP VIEW IF EXISTS vdj_gene CASCADE;
DROP VIEW IF EXISTS scrna_encoding CASCADE;
DROP VIEW IF EXISTS vj_gene CASCADE;
DROP VIEW IF EXISTS centromere CASCADE;
DROP VIEW IF EXISTS snorna_encoding CASCADE;
DROP VIEW IF EXISTS edited_transcript_feature CASCADE;
DROP VIEW IF EXISTS methylation_guide_snorna_primary_transcript CASCADE;
DROP VIEW IF EXISTS cap CASCADE;
DROP VIEW IF EXISTS rrna_cleavage_snorna_primary_transcript CASCADE;
DROP VIEW IF EXISTS pre_edited_region CASCADE;
DROP VIEW IF EXISTS tmrna CASCADE;
DROP VIEW IF EXISTS c_d_box_snorna_encoding CASCADE;
DROP VIEW IF EXISTS tmrna_primary_transcript CASCADE;
DROP VIEW IF EXISTS group_i_intron CASCADE;
DROP VIEW IF EXISTS autocatalytically_spliced_intron CASCADE;
DROP VIEW IF EXISTS srp_rna_primary_transcript CASCADE;
DROP VIEW IF EXISTS srp_rna CASCADE;
DROP VIEW IF EXISTS pseudoknot CASCADE;
DROP VIEW IF EXISTS h_pseudoknot CASCADE;
DROP VIEW IF EXISTS c_d_box_snorna CASCADE;
DROP VIEW IF EXISTS h_aca_box_snorna CASCADE;
DROP VIEW IF EXISTS c_d_box_snorna_primary_transcript CASCADE;
DROP VIEW IF EXISTS h_aca_box_snorna_primary_transcript CASCADE;
DROP VIEW IF EXISTS guide_rna CASCADE;
DROP VIEW IF EXISTS group_ii_intron CASCADE;
DROP VIEW IF EXISTS editing_block CASCADE;
DROP VIEW IF EXISTS intergenic_region CASCADE;
DROP VIEW IF EXISTS editing_domain CASCADE;
DROP VIEW IF EXISTS unedited_region CASCADE;
DROP VIEW IF EXISTS h_aca_box_snorna_encoding CASCADE;
DROP VIEW IF EXISTS oligo_u_tail CASCADE;
DROP VIEW IF EXISTS polya_sequence CASCADE;
DROP VIEW IF EXISTS branch_site CASCADE;
DROP VIEW IF EXISTS polypyrimidine_tract CASCADE;
DROP VIEW IF EXISTS bacterial_rnapol_promoter CASCADE;
DROP VIEW IF EXISTS bacterial_terminator CASCADE;
DROP VIEW IF EXISTS terminator_of_type_2_rnapol_iii_promoter CASCADE;
DROP VIEW IF EXISTS transcription_end_site CASCADE;
DROP VIEW IF EXISTS rnapol_iii_promoter_type_1 CASCADE;
DROP VIEW IF EXISTS rnapol_iii_promoter_type_2 CASCADE;
DROP VIEW IF EXISTS a_box CASCADE;
DROP VIEW IF EXISTS b_box CASCADE;
DROP VIEW IF EXISTS rnapol_iii_promoter_type_3 CASCADE;
DROP VIEW IF EXISTS c_box CASCADE;
DROP VIEW IF EXISTS snrna_encoding CASCADE;
DROP VIEW IF EXISTS telomere CASCADE;
DROP VIEW IF EXISTS silencer CASCADE;
DROP VIEW IF EXISTS chromosomal_regulatory_element CASCADE;
DROP VIEW IF EXISTS insulator CASCADE;
DROP VIEW IF EXISTS chromosomal_structural_element CASCADE;
DROP VIEW IF EXISTS five_prime_open_reading_frame CASCADE;
DROP VIEW IF EXISTS upstream_aug_codon CASCADE;
DROP VIEW IF EXISTS polycistronic_primary_transcript CASCADE;
DROP VIEW IF EXISTS monocistronic_primary_transcript CASCADE;
DROP VIEW IF EXISTS monocistronic_mrna CASCADE;
DROP VIEW IF EXISTS polycistronic_mrna CASCADE;
DROP VIEW IF EXISTS mini_exon_donor_rna CASCADE;
DROP VIEW IF EXISTS spliced_leader_rna CASCADE;
DROP VIEW IF EXISTS engineered_plasmid CASCADE;
DROP VIEW IF EXISTS transcribed_spacer_region CASCADE;
DROP VIEW IF EXISTS internal_transcribed_spacer_region CASCADE;
DROP VIEW IF EXISTS external_transcribed_spacer_region CASCADE;
DROP VIEW IF EXISTS tetranuc_repeat_microsat CASCADE;
DROP VIEW IF EXISTS srp_rna_encoding CASCADE;
DROP VIEW IF EXISTS minisatellite CASCADE;
DROP VIEW IF EXISTS antisense_rna CASCADE;
DROP VIEW IF EXISTS antisense_primary_transcript CASCADE;
DROP VIEW IF EXISTS sirna CASCADE;
DROP VIEW IF EXISTS mirna_primary_transcript CASCADE;
DROP VIEW IF EXISTS strna_primary_transcript CASCADE;
DROP VIEW IF EXISTS strna CASCADE;
DROP VIEW IF EXISTS small_subunit_rrna CASCADE;
DROP VIEW IF EXISTS large_subunit_rrna CASCADE;
DROP VIEW IF EXISTS rrna_5s CASCADE;
DROP VIEW IF EXISTS rrna_28s CASCADE;
DROP VIEW IF EXISTS maxicircle_gene CASCADE;
DROP VIEW IF EXISTS ncrna CASCADE;
DROP VIEW IF EXISTS strna_encoding CASCADE;
DROP VIEW IF EXISTS repeat_region CASCADE;
DROP VIEW IF EXISTS dispersed_repeat CASCADE;
DROP VIEW IF EXISTS tmrna_encoding CASCADE;
DROP VIEW IF EXISTS spliceosomal_intron CASCADE;
DROP VIEW IF EXISTS trna_encoding CASCADE;
DROP VIEW IF EXISTS introgressed_chromosome_region CASCADE;
DROP VIEW IF EXISTS monocistronic_transcript CASCADE;
DROP VIEW IF EXISTS mobile_intron CASCADE;
DROP VIEW IF EXISTS insertion CASCADE;
DROP VIEW IF EXISTS est_match CASCADE;
DROP VIEW IF EXISTS sequence_rearrangement_feature CASCADE;
DROP VIEW IF EXISTS chromosome_breakage_sequence CASCADE;
DROP VIEW IF EXISTS internal_eliminated_sequence CASCADE;
DROP VIEW IF EXISTS macronucleus_destined_segment CASCADE;
DROP VIEW IF EXISTS transcript CASCADE;
DROP VIEW IF EXISTS canonical_three_prime_splice_site CASCADE;
DROP VIEW IF EXISTS canonical_five_prime_splice_site CASCADE;
DROP VIEW IF EXISTS non_canonical_three_prime_splice_site CASCADE;
DROP VIEW IF EXISTS non_canonical_five_prime_splice_site CASCADE;
DROP VIEW IF EXISTS non_canonical_start_codon CASCADE;
DROP VIEW IF EXISTS aberrant_processed_transcript CASCADE;
DROP VIEW IF EXISTS exonic_splice_enhancer CASCADE;
DROP VIEW IF EXISTS nuclease_sensitive_site CASCADE;
DROP VIEW IF EXISTS dnasei_hypersensitive_site CASCADE;
DROP VIEW IF EXISTS translocation_element CASCADE;
DROP VIEW IF EXISTS deletion_junction CASCADE;
DROP VIEW IF EXISTS golden_path CASCADE;
DROP VIEW IF EXISTS cdna_match CASCADE;
DROP VIEW IF EXISTS gene_with_polycistronic_transcript CASCADE;
DROP VIEW IF EXISTS cleaved_initiator_methionine CASCADE;
DROP VIEW IF EXISTS gene_with_dicistronic_transcript CASCADE;
DROP VIEW IF EXISTS gene_with_recoded_mrna CASCADE;
DROP VIEW IF EXISTS snp CASCADE;
DROP VIEW IF EXISTS reagent CASCADE;
DROP VIEW IF EXISTS oligo CASCADE;
DROP VIEW IF EXISTS gene_with_stop_codon_read_through CASCADE;
DROP VIEW IF EXISTS gene_with_stop_codon_redefined_as_pyrrolysine CASCADE;
DROP VIEW IF EXISTS junction CASCADE;
DROP VIEW IF EXISTS remark CASCADE;
DROP VIEW IF EXISTS possible_base_call_error CASCADE;
DROP VIEW IF EXISTS possible_assembly_error CASCADE;
DROP VIEW IF EXISTS experimental_result_region CASCADE;
DROP VIEW IF EXISTS gene CASCADE;
DROP VIEW IF EXISTS tandem_repeat CASCADE;
DROP VIEW IF EXISTS trans_splice_acceptor_site CASCADE;
DROP VIEW IF EXISTS trans_splice_donor_site CASCADE;
DROP VIEW IF EXISTS sl1_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl2_acceptor_site CASCADE;
DROP VIEW IF EXISTS gene_with_stop_codon_redefined_as_selenocysteine CASCADE;
DROP VIEW IF EXISTS gene_with_mrna_recoded_by_translational_bypass CASCADE;
DROP VIEW IF EXISTS gene_with_transcript_with_translational_frameshift CASCADE;
DROP VIEW IF EXISTS dna_motif CASCADE;
DROP VIEW IF EXISTS nucleotide_motif CASCADE;
DROP VIEW IF EXISTS rna_motif CASCADE;
DROP VIEW IF EXISTS dicistronic_mrna CASCADE;
DROP VIEW IF EXISTS reading_frame CASCADE;
DROP VIEW IF EXISTS blocked_reading_frame CASCADE;
DROP VIEW IF EXISTS ultracontig CASCADE;
DROP VIEW IF EXISTS foreign_transposable_element CASCADE;
DROP VIEW IF EXISTS gene_with_dicistronic_primary_transcript CASCADE;
DROP VIEW IF EXISTS gene_with_dicistronic_mrna CASCADE;
DROP VIEW IF EXISTS idna CASCADE;
DROP VIEW IF EXISTS orit CASCADE;
DROP VIEW IF EXISTS transit_peptide CASCADE;
DROP VIEW IF EXISTS repeat_unit CASCADE;
DROP VIEW IF EXISTS crm CASCADE;
DROP VIEW IF EXISTS intein CASCADE;
DROP VIEW IF EXISTS intein_containing CASCADE;
DROP VIEW IF EXISTS gap CASCADE;
DROP VIEW IF EXISTS fragmentary CASCADE;
DROP VIEW IF EXISTS predicted CASCADE;
DROP VIEW IF EXISTS feature_attribute CASCADE;
DROP VIEW IF EXISTS exemplar_mrna CASCADE;
DROP VIEW IF EXISTS sequence_location CASCADE;
DROP VIEW IF EXISTS organelle_sequence CASCADE;
DROP VIEW IF EXISTS mitochondrial_sequence CASCADE;
DROP VIEW IF EXISTS nuclear_sequence CASCADE;
DROP VIEW IF EXISTS nucleomorphic_sequence CASCADE;
DROP VIEW IF EXISTS plastid_sequence CASCADE;
DROP VIEW IF EXISTS kinetoplast CASCADE;
DROP VIEW IF EXISTS maxicircle CASCADE;
DROP VIEW IF EXISTS apicoplast_sequence CASCADE;
DROP VIEW IF EXISTS chromoplast_sequence CASCADE;
DROP VIEW IF EXISTS chloroplast_sequence CASCADE;
DROP VIEW IF EXISTS cyanelle_sequence CASCADE;
DROP VIEW IF EXISTS leucoplast_sequence CASCADE;
DROP VIEW IF EXISTS proplastid_sequence CASCADE;
DROP VIEW IF EXISTS plasmid_location CASCADE;
DROP VIEW IF EXISTS amplification_origin CASCADE;
DROP VIEW IF EXISTS proviral_location CASCADE;
DROP VIEW IF EXISTS gene_group_regulatory_region CASCADE;
DROP VIEW IF EXISTS clone_insert CASCADE;
DROP VIEW IF EXISTS lambda_vector CASCADE;
DROP VIEW IF EXISTS plasmid_vector CASCADE;
DROP VIEW IF EXISTS cdna CASCADE;
DROP VIEW IF EXISTS single_stranded_cdna CASCADE;
DROP VIEW IF EXISTS double_stranded_cdna CASCADE;
DROP VIEW IF EXISTS pyrrolysyl_trna CASCADE;
DROP VIEW IF EXISTS episome CASCADE;
DROP VIEW IF EXISTS tmrna_coding_piece CASCADE;
DROP VIEW IF EXISTS tmrna_acceptor_piece CASCADE;
DROP VIEW IF EXISTS qtl CASCADE;
DROP VIEW IF EXISTS genomic_island CASCADE;
DROP VIEW IF EXISTS pathogenic_island CASCADE;
DROP VIEW IF EXISTS metabolic_island CASCADE;
DROP VIEW IF EXISTS adaptive_island CASCADE;
DROP VIEW IF EXISTS symbiosis_island CASCADE;
DROP VIEW IF EXISTS pseudogenic_rrna CASCADE;
DROP VIEW IF EXISTS pseudogenic_trna CASCADE;
DROP VIEW IF EXISTS engineered_episome CASCADE;
DROP VIEW IF EXISTS transgenic CASCADE;
DROP VIEW IF EXISTS so_natural CASCADE;
DROP VIEW IF EXISTS engineered CASCADE;
DROP VIEW IF EXISTS so_foreign CASCADE;
DROP VIEW IF EXISTS cloned_region CASCADE;
DROP VIEW IF EXISTS validated CASCADE;
DROP VIEW IF EXISTS invalidated CASCADE;
DROP VIEW IF EXISTS engineered_rescue_region CASCADE;
DROP VIEW IF EXISTS rescue_mini_gene CASCADE;
DROP VIEW IF EXISTS transgenic_transposable_element CASCADE;
DROP VIEW IF EXISTS natural_transposable_element CASCADE;
DROP VIEW IF EXISTS engineered_transposable_element CASCADE;
DROP VIEW IF EXISTS engineered_foreign_transposable_element CASCADE;
DROP VIEW IF EXISTS assortment_derived_duplication CASCADE;
DROP VIEW IF EXISTS assortment_derived_deficiency_plus_duplication CASCADE;
DROP VIEW IF EXISTS assortment_derived_deficiency CASCADE;
DROP VIEW IF EXISTS assortment_derived_aneuploid CASCADE;
DROP VIEW IF EXISTS engineered_region CASCADE;
DROP VIEW IF EXISTS engineered_foreign_region CASCADE;
DROP VIEW IF EXISTS fusion CASCADE;
DROP VIEW IF EXISTS engineered_tag CASCADE;
DROP VIEW IF EXISTS validated_cdna_clone CASCADE;
DROP VIEW IF EXISTS invalidated_cdna_clone CASCADE;
DROP VIEW IF EXISTS chimeric_cdna_clone CASCADE;
DROP VIEW IF EXISTS genomically_contaminated_cdna_clone CASCADE;
DROP VIEW IF EXISTS polya_primed_cdna_clone CASCADE;
DROP VIEW IF EXISTS partially_processed_cdna_clone CASCADE;
DROP VIEW IF EXISTS rescue CASCADE;
DROP VIEW IF EXISTS mini_gene CASCADE;
DROP VIEW IF EXISTS rescue_gene CASCADE;
DROP VIEW IF EXISTS wild_type CASCADE;
DROP VIEW IF EXISTS wild_type_rescue_gene CASCADE;
DROP VIEW IF EXISTS mitochondrial_chromosome CASCADE;
DROP VIEW IF EXISTS chloroplast_chromosome CASCADE;
DROP VIEW IF EXISTS chromoplast_chromosome CASCADE;
DROP VIEW IF EXISTS cyanelle_chromosome CASCADE;
DROP VIEW IF EXISTS leucoplast_chromosome CASCADE;
DROP VIEW IF EXISTS macronuclear_chromosome CASCADE;
DROP VIEW IF EXISTS micronuclear_chromosome CASCADE;
DROP VIEW IF EXISTS nuclear_chromosome CASCADE;
DROP VIEW IF EXISTS nucleomorphic_chromosome CASCADE;
DROP VIEW IF EXISTS chromosome_part CASCADE;
DROP VIEW IF EXISTS gene_member_region CASCADE;
DROP VIEW IF EXISTS transcript_region CASCADE;
DROP VIEW IF EXISTS mature_transcript_region CASCADE;
DROP VIEW IF EXISTS primary_transcript_region CASCADE;
DROP VIEW IF EXISTS mrna_region CASCADE;
DROP VIEW IF EXISTS utr_region CASCADE;
DROP VIEW IF EXISTS rrna_primary_transcript_region CASCADE;
DROP VIEW IF EXISTS polypeptide_region CASCADE;
DROP VIEW IF EXISTS repeat_component CASCADE;
DROP VIEW IF EXISTS spliceosomal_intron_region CASCADE;
DROP VIEW IF EXISTS gene_component_region CASCADE;
DROP VIEW IF EXISTS tmrna_region CASCADE;
DROP VIEW IF EXISTS ltr_component CASCADE;
DROP VIEW IF EXISTS three_prime_ltr_component CASCADE;
DROP VIEW IF EXISTS five_prime_ltr_component CASCADE;
DROP VIEW IF EXISTS cds_region CASCADE;
DROP VIEW IF EXISTS exon_region CASCADE;
DROP VIEW IF EXISTS homologous_region CASCADE;
DROP VIEW IF EXISTS paralogous_region CASCADE;
DROP VIEW IF EXISTS orthologous_region CASCADE;
DROP VIEW IF EXISTS conserved CASCADE;
DROP VIEW IF EXISTS homologous CASCADE;
DROP VIEW IF EXISTS orthologous CASCADE;
DROP VIEW IF EXISTS paralogous CASCADE;
DROP VIEW IF EXISTS syntenic CASCADE;
DROP VIEW IF EXISTS capped_primary_transcript CASCADE;
DROP VIEW IF EXISTS capped_mrna CASCADE;
DROP VIEW IF EXISTS mrna_attribute CASCADE;
DROP VIEW IF EXISTS exemplar CASCADE;
DROP VIEW IF EXISTS frameshift CASCADE;
DROP VIEW IF EXISTS minus_1_frameshift CASCADE;
DROP VIEW IF EXISTS minus_2_frameshift CASCADE;
DROP VIEW IF EXISTS plus_1_frameshift CASCADE;
DROP VIEW IF EXISTS plus_2_framshift CASCADE;
DROP VIEW IF EXISTS trans_spliced CASCADE;
DROP VIEW IF EXISTS polyadenylated_mrna CASCADE;
DROP VIEW IF EXISTS trans_spliced_mrna CASCADE;
DROP VIEW IF EXISTS edited_transcript CASCADE;
DROP VIEW IF EXISTS edited_transcript_by_a_to_i_substitution CASCADE;
DROP VIEW IF EXISTS bound_by_protein CASCADE;
DROP VIEW IF EXISTS bound_by_nucleic_acid CASCADE;
DROP VIEW IF EXISTS alternatively_spliced CASCADE;
DROP VIEW IF EXISTS monocistronic CASCADE;
DROP VIEW IF EXISTS dicistronic CASCADE;
DROP VIEW IF EXISTS polycistronic CASCADE;
DROP VIEW IF EXISTS recoded CASCADE;
DROP VIEW IF EXISTS codon_redefined CASCADE;
DROP VIEW IF EXISTS stop_codon_read_through CASCADE;
DROP VIEW IF EXISTS stop_codon_redefined_as_pyrrolysine CASCADE;
DROP VIEW IF EXISTS stop_codon_redefined_as_selenocysteine CASCADE;
DROP VIEW IF EXISTS recoded_by_translational_bypass CASCADE;
DROP VIEW IF EXISTS translationally_frameshifted CASCADE;
DROP VIEW IF EXISTS maternally_imprinted_gene CASCADE;
DROP VIEW IF EXISTS paternally_imprinted_gene CASCADE;
DROP VIEW IF EXISTS post_translationally_regulated_gene CASCADE;
DROP VIEW IF EXISTS negatively_autoregulated_gene CASCADE;
DROP VIEW IF EXISTS positively_autoregulated_gene CASCADE;
DROP VIEW IF EXISTS silenced CASCADE;
DROP VIEW IF EXISTS silenced_by_dna_modification CASCADE;
DROP VIEW IF EXISTS silenced_by_dna_methylation CASCADE;
DROP VIEW IF EXISTS translationally_regulated_gene CASCADE;
DROP VIEW IF EXISTS allelically_excluded_gene CASCADE;
DROP VIEW IF EXISTS epigenetically_modified_gene CASCADE;
DROP VIEW IF EXISTS transgene CASCADE;
DROP VIEW IF EXISTS endogenous_retroviral_sequence CASCADE;
DROP VIEW IF EXISTS rearranged_at_dna_level CASCADE;
DROP VIEW IF EXISTS status CASCADE;
DROP VIEW IF EXISTS independently_known CASCADE;
DROP VIEW IF EXISTS supported_by_sequence_similarity CASCADE;
DROP VIEW IF EXISTS supported_by_domain_match CASCADE;
DROP VIEW IF EXISTS supported_by_est_or_cdna CASCADE;
DROP VIEW IF EXISTS orphan CASCADE;
DROP VIEW IF EXISTS predicted_by_ab_initio_computation CASCADE;
DROP VIEW IF EXISTS asx_turn CASCADE;
DROP VIEW IF EXISTS cloned_cdna_insert CASCADE;
DROP VIEW IF EXISTS cloned_genomic_insert CASCADE;
DROP VIEW IF EXISTS engineered_insert CASCADE;
DROP VIEW IF EXISTS edited_mrna CASCADE;
DROP VIEW IF EXISTS guide_rna_region CASCADE;
DROP VIEW IF EXISTS anchor_region CASCADE;
DROP VIEW IF EXISTS pre_edited_mrna CASCADE;
DROP VIEW IF EXISTS intermediate CASCADE;
DROP VIEW IF EXISTS mirna_target_site CASCADE;
DROP VIEW IF EXISTS edited_cds CASCADE;
DROP VIEW IF EXISTS vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment CASCADE;
DROP VIEW IF EXISTS vertebrate_ig_t_cell_receptor_rearranged_gene_cluster CASCADE;
DROP VIEW IF EXISTS vertebrate_immune_system_gene_recombination_signal_feature CASCADE;
DROP VIEW IF EXISTS recombinationally_rearranged CASCADE;
DROP VIEW IF EXISTS recombinationally_rearranged_vertebrate_immune_system_gene CASCADE;
DROP VIEW IF EXISTS attp_site CASCADE;
DROP VIEW IF EXISTS attb_site CASCADE;
DROP VIEW IF EXISTS attl_site CASCADE;
DROP VIEW IF EXISTS attr_site CASCADE;
DROP VIEW IF EXISTS integration_excision_site CASCADE;
DROP VIEW IF EXISTS resolution_site CASCADE;
DROP VIEW IF EXISTS inversion_site CASCADE;
DROP VIEW IF EXISTS dif_site CASCADE;
DROP VIEW IF EXISTS attc_site CASCADE;
DROP VIEW IF EXISTS eukaryotic_terminator CASCADE;
DROP VIEW IF EXISTS oriv CASCADE;
DROP VIEW IF EXISTS oric CASCADE;
DROP VIEW IF EXISTS dna_chromosome CASCADE;
DROP VIEW IF EXISTS double_stranded_dna_chromosome CASCADE;
DROP VIEW IF EXISTS single_stranded_dna_chromosome CASCADE;
DROP VIEW IF EXISTS linear_double_stranded_dna_chromosome CASCADE;
DROP VIEW IF EXISTS circular_double_stranded_dna_chromosome CASCADE;
DROP VIEW IF EXISTS linear_single_stranded_dna_chromosome CASCADE;
DROP VIEW IF EXISTS circular_single_stranded_dna_chromosome CASCADE;
DROP VIEW IF EXISTS rna_chromosome CASCADE;
DROP VIEW IF EXISTS single_stranded_rna_chromosome CASCADE;
DROP VIEW IF EXISTS linear_single_stranded_rna_chromosome CASCADE;
DROP VIEW IF EXISTS linear_double_stranded_rna_chromosome CASCADE;
DROP VIEW IF EXISTS double_stranded_rna_chromosome CASCADE;
DROP VIEW IF EXISTS circular_single_stranded_rna_chromosome CASCADE;
DROP VIEW IF EXISTS circular_double_stranded_rna_chromosome CASCADE;
DROP VIEW IF EXISTS insertion_sequence CASCADE;
DROP VIEW IF EXISTS minicircle_gene CASCADE;
DROP VIEW IF EXISTS cryptic CASCADE;
DROP VIEW IF EXISTS anchor_binding_site CASCADE;
DROP VIEW IF EXISTS template_region CASCADE;
DROP VIEW IF EXISTS grna_encoding CASCADE;
DROP VIEW IF EXISTS minicircle CASCADE;
DROP VIEW IF EXISTS rho_dependent_bacterial_terminator CASCADE;
DROP VIEW IF EXISTS rho_independent_bacterial_terminator CASCADE;
DROP VIEW IF EXISTS strand_attribute CASCADE;
DROP VIEW IF EXISTS single CASCADE;
DROP VIEW IF EXISTS double CASCADE;
DROP VIEW IF EXISTS topology_attribute CASCADE;
DROP VIEW IF EXISTS linear CASCADE;
DROP VIEW IF EXISTS circular CASCADE;
DROP VIEW IF EXISTS class_ii_rna CASCADE;
DROP VIEW IF EXISTS class_i_rna CASCADE;
DROP VIEW IF EXISTS genomic_dna CASCADE;
DROP VIEW IF EXISTS bac_cloned_genomic_insert CASCADE;
DROP VIEW IF EXISTS consensus CASCADE;
DROP VIEW IF EXISTS consensus_region CASCADE;
DROP VIEW IF EXISTS consensus_mrna CASCADE;
DROP VIEW IF EXISTS predicted_gene CASCADE;
DROP VIEW IF EXISTS gene_fragment CASCADE;
DROP VIEW IF EXISTS recursive_splice_site CASCADE;
DROP VIEW IF EXISTS bac_end CASCADE;
DROP VIEW IF EXISTS rrna_16s CASCADE;
DROP VIEW IF EXISTS rrna_23s CASCADE;
DROP VIEW IF EXISTS rrna_25s CASCADE;
DROP VIEW IF EXISTS solo_ltr CASCADE;
DROP VIEW IF EXISTS low_complexity CASCADE;
DROP VIEW IF EXISTS low_complexity_region CASCADE;
DROP VIEW IF EXISTS prophage CASCADE;
DROP VIEW IF EXISTS cryptic_prophage CASCADE;
DROP VIEW IF EXISTS tetraloop CASCADE;
DROP VIEW IF EXISTS dna_constraint_sequence CASCADE;
DROP VIEW IF EXISTS i_motif CASCADE;
DROP VIEW IF EXISTS pna_oligo CASCADE;
DROP VIEW IF EXISTS dnazyme CASCADE;
DROP VIEW IF EXISTS mnp CASCADE;
DROP VIEW IF EXISTS intron_domain CASCADE;
DROP VIEW IF EXISTS wobble_base_pair CASCADE;
DROP VIEW IF EXISTS internal_guide_sequence CASCADE;
DROP VIEW IF EXISTS silent_mutation CASCADE;
DROP VIEW IF EXISTS epitope CASCADE;
DROP VIEW IF EXISTS copy_number_variation CASCADE;
DROP VIEW IF EXISTS chromosome_breakpoint CASCADE;
DROP VIEW IF EXISTS inversion_breakpoint CASCADE;
DROP VIEW IF EXISTS allele CASCADE;
DROP VIEW IF EXISTS haplotype CASCADE;
DROP VIEW IF EXISTS polymorphic_sequence_variant CASCADE;
DROP VIEW IF EXISTS genome CASCADE;
DROP VIEW IF EXISTS so_genotype CASCADE;
DROP VIEW IF EXISTS diplotype CASCADE;
DROP VIEW IF EXISTS direction_attribute CASCADE;
DROP VIEW IF EXISTS forward CASCADE;
DROP VIEW IF EXISTS reverse CASCADE;
DROP VIEW IF EXISTS mitochondrial_dna CASCADE;
DROP VIEW IF EXISTS chloroplast_dna CASCADE;
DROP VIEW IF EXISTS mirtron CASCADE;
DROP VIEW IF EXISTS pirna CASCADE;
DROP VIEW IF EXISTS arginyl_trna CASCADE;
DROP VIEW IF EXISTS mobile_genetic_element CASCADE;
DROP VIEW IF EXISTS extrachromosomal_mobile_genetic_element CASCADE;
DROP VIEW IF EXISTS integrated_mobile_genetic_element CASCADE;
DROP VIEW IF EXISTS integrated_plasmid CASCADE;
DROP VIEW IF EXISTS viral_sequence CASCADE;
DROP VIEW IF EXISTS phage_sequence CASCADE;
DROP VIEW IF EXISTS attctn_site CASCADE;
DROP VIEW IF EXISTS nuclear_mt_pseudogene CASCADE;
DROP VIEW IF EXISTS cointegrated_plasmid CASCADE;
DROP VIEW IF EXISTS irlinv_site CASCADE;
DROP VIEW IF EXISTS irrinv_site CASCADE;
DROP VIEW IF EXISTS inversion_site_part CASCADE;
DROP VIEW IF EXISTS defective_conjugative_transposon CASCADE;
DROP VIEW IF EXISTS repeat_fragment CASCADE;
DROP VIEW IF EXISTS transposon_fragment CASCADE;
DROP VIEW IF EXISTS transcriptional_cis_regulatory_region CASCADE;
DROP VIEW IF EXISTS splicing_regulatory_region CASCADE;
DROP VIEW IF EXISTS promoter_targeting_sequence CASCADE;
DROP VIEW IF EXISTS sequence_alteration CASCADE;
DROP VIEW IF EXISTS sequence_variant CASCADE;
DROP VIEW IF EXISTS propeptide_cleavage_site CASCADE;
DROP VIEW IF EXISTS propeptide CASCADE;
DROP VIEW IF EXISTS immature_peptide_region CASCADE;
DROP VIEW IF EXISTS active_peptide CASCADE;
DROP VIEW IF EXISTS compositionally_biased_region_of_peptide CASCADE;
DROP VIEW IF EXISTS polypeptide_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_repeat CASCADE;
DROP VIEW IF EXISTS polypeptide_structural_region CASCADE;
DROP VIEW IF EXISTS membrane_structure CASCADE;
DROP VIEW IF EXISTS extramembrane_polypeptide_region CASCADE;
DROP VIEW IF EXISTS cytoplasmic_polypeptide_region CASCADE;
DROP VIEW IF EXISTS non_cytoplasmic_polypeptide_region CASCADE;
DROP VIEW IF EXISTS intramembrane_polypeptide_region CASCADE;
DROP VIEW IF EXISTS membrane_peptide_loop CASCADE;
DROP VIEW IF EXISTS transmembrane_polypeptide_region CASCADE;
DROP VIEW IF EXISTS polypeptide_secondary_structure CASCADE;
DROP VIEW IF EXISTS polypeptide_structural_motif CASCADE;
DROP VIEW IF EXISTS coiled_coil CASCADE;
DROP VIEW IF EXISTS helix_turn_helix CASCADE;
DROP VIEW IF EXISTS polypeptide_sequencing_information CASCADE;
DROP VIEW IF EXISTS non_adjacent_residues CASCADE;
DROP VIEW IF EXISTS non_terminal_residue CASCADE;
DROP VIEW IF EXISTS sequence_conflict CASCADE;
DROP VIEW IF EXISTS sequence_uncertainty CASCADE;
DROP VIEW IF EXISTS post_translationally_modified_region CASCADE;
DROP VIEW IF EXISTS polypeptide_metal_contact CASCADE;
DROP VIEW IF EXISTS protein_protein_contact CASCADE;
DROP VIEW IF EXISTS polypeptide_calcium_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_cobalt_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_copper_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_iron_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_magnesium_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_manganese_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_molybdenum_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_nickel_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_tungsten_ion_contact_site CASCADE;
DROP VIEW IF EXISTS polypeptide_zinc_ion_contact_site CASCADE;
DROP VIEW IF EXISTS catalytic_residue CASCADE;
DROP VIEW IF EXISTS polypeptide_ligand_contact CASCADE;
DROP VIEW IF EXISTS asx_motif CASCADE;
DROP VIEW IF EXISTS beta_bulge CASCADE;
DROP VIEW IF EXISTS beta_bulge_loop CASCADE;
DROP VIEW IF EXISTS beta_bulge_loop_five CASCADE;
DROP VIEW IF EXISTS beta_bulge_loop_six CASCADE;
DROP VIEW IF EXISTS beta_strand CASCADE;
DROP VIEW IF EXISTS antiparallel_beta_strand CASCADE;
DROP VIEW IF EXISTS parallel_beta_strand CASCADE;
DROP VIEW IF EXISTS peptide_helix CASCADE;
DROP VIEW IF EXISTS left_handed_peptide_helix CASCADE;
DROP VIEW IF EXISTS right_handed_peptide_helix CASCADE;
DROP VIEW IF EXISTS alpha_helix CASCADE;
DROP VIEW IF EXISTS pi_helix CASCADE;
DROP VIEW IF EXISTS three_ten_helix CASCADE;
DROP VIEW IF EXISTS polypeptide_nest_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_nest_left_right_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_nest_right_left_motif CASCADE;
DROP VIEW IF EXISTS schellmann_loop CASCADE;
DROP VIEW IF EXISTS schellmann_loop_seven CASCADE;
DROP VIEW IF EXISTS schellmann_loop_six CASCADE;
DROP VIEW IF EXISTS serine_threonine_motif CASCADE;
DROP VIEW IF EXISTS serine_threonine_staple_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_turn_motif CASCADE;
DROP VIEW IF EXISTS asx_turn_left_handed_type_one CASCADE;
DROP VIEW IF EXISTS asx_turn_left_handed_type_two CASCADE;
DROP VIEW IF EXISTS asx_turn_right_handed_type_two CASCADE;
DROP VIEW IF EXISTS asx_turn_right_handed_type_one CASCADE;
DROP VIEW IF EXISTS beta_turn CASCADE;
DROP VIEW IF EXISTS beta_turn_left_handed_type_one CASCADE;
DROP VIEW IF EXISTS beta_turn_left_handed_type_two CASCADE;
DROP VIEW IF EXISTS beta_turn_right_handed_type_one CASCADE;
DROP VIEW IF EXISTS beta_turn_right_handed_type_two CASCADE;
DROP VIEW IF EXISTS gamma_turn CASCADE;
DROP VIEW IF EXISTS gamma_turn_classic CASCADE;
DROP VIEW IF EXISTS gamma_turn_inverse CASCADE;
DROP VIEW IF EXISTS serine_threonine_turn CASCADE;
DROP VIEW IF EXISTS st_turn_left_handed_type_one CASCADE;
DROP VIEW IF EXISTS st_turn_left_handed_type_two CASCADE;
DROP VIEW IF EXISTS st_turn_right_handed_type_one CASCADE;
DROP VIEW IF EXISTS st_turn_right_handed_type_two CASCADE;
DROP VIEW IF EXISTS polypeptide_variation_site CASCADE;
DROP VIEW IF EXISTS natural_variant_site CASCADE;
DROP VIEW IF EXISTS mutated_variant_site CASCADE;
DROP VIEW IF EXISTS alternate_sequence_site CASCADE;
DROP VIEW IF EXISTS beta_turn_type_six CASCADE;
DROP VIEW IF EXISTS beta_turn_type_six_a CASCADE;
DROP VIEW IF EXISTS beta_turn_type_six_a_one CASCADE;
DROP VIEW IF EXISTS beta_turn_type_six_a_two CASCADE;
DROP VIEW IF EXISTS beta_turn_type_six_b CASCADE;
DROP VIEW IF EXISTS beta_turn_type_eight CASCADE;
DROP VIEW IF EXISTS dre_motif CASCADE;
DROP VIEW IF EXISTS dmv4_motif CASCADE;
DROP VIEW IF EXISTS e_box_motif CASCADE;
DROP VIEW IF EXISTS dmv5_motif CASCADE;
DROP VIEW IF EXISTS dmv3_motif CASCADE;
DROP VIEW IF EXISTS dmv2_motif CASCADE;
DROP VIEW IF EXISTS mte CASCADE;
DROP VIEW IF EXISTS inr1_motif CASCADE;
DROP VIEW IF EXISTS dpe1_motif CASCADE;
DROP VIEW IF EXISTS dmv1_motif CASCADE;
DROP VIEW IF EXISTS gaga_motif CASCADE;
DROP VIEW IF EXISTS ndm2_motif CASCADE;
DROP VIEW IF EXISTS ndm3_motif CASCADE;
DROP VIEW IF EXISTS ds_rna_viral_sequence CASCADE;
DROP VIEW IF EXISTS polinton CASCADE;
DROP VIEW IF EXISTS rrna_21s CASCADE;
DROP VIEW IF EXISTS trna_region CASCADE;
DROP VIEW IF EXISTS anticodon_loop CASCADE;
DROP VIEW IF EXISTS anticodon CASCADE;
DROP VIEW IF EXISTS cca_tail CASCADE;
DROP VIEW IF EXISTS dhu_loop CASCADE;
DROP VIEW IF EXISTS t_loop CASCADE;
DROP VIEW IF EXISTS pyrrolysine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS u3_snorna CASCADE;
DROP VIEW IF EXISTS au_rich_element CASCADE;
DROP VIEW IF EXISTS bruno_response_element CASCADE;
DROP VIEW IF EXISTS iron_responsive_element CASCADE;
DROP VIEW IF EXISTS morpholino_backbone CASCADE;
DROP VIEW IF EXISTS pna CASCADE;
DROP VIEW IF EXISTS enzymatic CASCADE;
DROP VIEW IF EXISTS ribozymic CASCADE;
DROP VIEW IF EXISTS pseudouridylation_guide_snorna CASCADE;
DROP VIEW IF EXISTS lna CASCADE;
DROP VIEW IF EXISTS lna_oligo CASCADE;
DROP VIEW IF EXISTS tna CASCADE;
DROP VIEW IF EXISTS tna_oligo CASCADE;
DROP VIEW IF EXISTS gna CASCADE;
DROP VIEW IF EXISTS gna_oligo CASCADE;
DROP VIEW IF EXISTS r_gna CASCADE;
DROP VIEW IF EXISTS r_gna_oligo CASCADE;
DROP VIEW IF EXISTS s_gna CASCADE;
DROP VIEW IF EXISTS s_gna_oligo CASCADE;
DROP VIEW IF EXISTS ds_dna_viral_sequence CASCADE;
DROP VIEW IF EXISTS ss_rna_viral_sequence CASCADE;
DROP VIEW IF EXISTS negative_sense_ssrna_viral_sequence CASCADE;
DROP VIEW IF EXISTS positive_sense_ssrna_viral_sequence CASCADE;
DROP VIEW IF EXISTS ambisense_ssrna_viral_sequence CASCADE;
DROP VIEW IF EXISTS rna_polymerase_promoter CASCADE;
DROP VIEW IF EXISTS phage_rna_polymerase_promoter CASCADE;
DROP VIEW IF EXISTS sp6_rna_polymerase_promoter CASCADE;
DROP VIEW IF EXISTS t3_rna_polymerase_promoter CASCADE;
DROP VIEW IF EXISTS t7_rna_polymerase_promoter CASCADE;
DROP VIEW IF EXISTS five_prime_est CASCADE;
DROP VIEW IF EXISTS three_prime_est CASCADE;
DROP VIEW IF EXISTS translational_frameshift CASCADE;
DROP VIEW IF EXISTS plus_1_translational_frameshift CASCADE;
DROP VIEW IF EXISTS plus_2_translational_frameshift CASCADE;
DROP VIEW IF EXISTS group_iii_intron CASCADE;
DROP VIEW IF EXISTS noncoding_region_of_exon CASCADE;
DROP VIEW IF EXISTS coding_region_of_exon CASCADE;
DROP VIEW IF EXISTS endonuclease_spliced_intron CASCADE;
DROP VIEW IF EXISTS transgenic_insertion CASCADE;
DROP VIEW IF EXISTS retrogene CASCADE;
DROP VIEW IF EXISTS silenced_by_rna_interference CASCADE;
DROP VIEW IF EXISTS silenced_by_histone_modification CASCADE;
DROP VIEW IF EXISTS silenced_by_histone_methylation CASCADE;
DROP VIEW IF EXISTS silenced_by_histone_deacetylation CASCADE;
DROP VIEW IF EXISTS gene_silenced_by_rna_interference CASCADE;
DROP VIEW IF EXISTS gene_silenced_by_histone_modification CASCADE;
DROP VIEW IF EXISTS gene_silenced_by_histone_methylation CASCADE;
DROP VIEW IF EXISTS gene_silenced_by_histone_deacetylation CASCADE;
DROP VIEW IF EXISTS dihydrouridine CASCADE;
DROP VIEW IF EXISTS pseudouridine CASCADE;
DROP VIEW IF EXISTS inosine CASCADE;
DROP VIEW IF EXISTS seven_methylguanine CASCADE;
DROP VIEW IF EXISTS ribothymidine CASCADE;
DROP VIEW IF EXISTS methylinosine CASCADE;
DROP VIEW IF EXISTS mobile CASCADE;
DROP VIEW IF EXISTS replicon CASCADE;
DROP VIEW IF EXISTS base CASCADE;
DROP VIEW IF EXISTS amino_acid CASCADE;
DROP VIEW IF EXISTS major_tss CASCADE;
DROP VIEW IF EXISTS minor_tss CASCADE;
DROP VIEW IF EXISTS tss_region CASCADE;
DROP VIEW IF EXISTS encodes_alternate_transcription_start_sites CASCADE;
DROP VIEW IF EXISTS mirna_primary_transcript_region CASCADE;
DROP VIEW IF EXISTS pre_mirna CASCADE;
DROP VIEW IF EXISTS mirna_stem CASCADE;
DROP VIEW IF EXISTS mirna_loop CASCADE;
DROP VIEW IF EXISTS synthetic_oligo CASCADE;
DROP VIEW IF EXISTS assembly CASCADE;
DROP VIEW IF EXISTS fragment_assembly CASCADE;
DROP VIEW IF EXISTS fingerprint_map CASCADE;
DROP VIEW IF EXISTS sts_map CASCADE;
DROP VIEW IF EXISTS rh_map CASCADE;
DROP VIEW IF EXISTS sonicate_fragment CASCADE;
DROP VIEW IF EXISTS polyploid CASCADE;
DROP VIEW IF EXISTS autopolyploid CASCADE;
DROP VIEW IF EXISTS allopolyploid CASCADE;
DROP VIEW IF EXISTS homing_endonuclease_binding_site CASCADE;
DROP VIEW IF EXISTS octamer_motif CASCADE;
DROP VIEW IF EXISTS apicoplast_chromosome CASCADE;
DROP VIEW IF EXISTS sequence_collection CASCADE;
DROP VIEW IF EXISTS overlapping_feature_set CASCADE;
DROP VIEW IF EXISTS overlapping_est_set CASCADE;
DROP VIEW IF EXISTS ncrna_gene CASCADE;
DROP VIEW IF EXISTS grna_gene CASCADE;
DROP VIEW IF EXISTS mirna_gene CASCADE;
DROP VIEW IF EXISTS scrna_gene CASCADE;
DROP VIEW IF EXISTS snorna_gene CASCADE;
DROP VIEW IF EXISTS snrna_gene CASCADE;
DROP VIEW IF EXISTS srp_rna_gene CASCADE;
DROP VIEW IF EXISTS strna_gene CASCADE;
DROP VIEW IF EXISTS tmrna_gene CASCADE;
DROP VIEW IF EXISTS trna_gene CASCADE;
DROP VIEW IF EXISTS modified_adenosine CASCADE;
DROP VIEW IF EXISTS modified_inosine CASCADE;
DROP VIEW IF EXISTS modified_cytidine CASCADE;
DROP VIEW IF EXISTS modified_guanosine CASCADE;
DROP VIEW IF EXISTS modified_uridine CASCADE;
DROP VIEW IF EXISTS one_methylinosine CASCADE;
DROP VIEW IF EXISTS one_two_prime_o_dimethylinosine CASCADE;
DROP VIEW IF EXISTS two_prime_o_methylinosine CASCADE;
DROP VIEW IF EXISTS three_methylcytidine CASCADE;
DROP VIEW IF EXISTS five_methylcytidine CASCADE;
DROP VIEW IF EXISTS two_prime_o_methylcytidine CASCADE;
DROP VIEW IF EXISTS two_thiocytidine CASCADE;
DROP VIEW IF EXISTS n4_acetylcytidine CASCADE;
DROP VIEW IF EXISTS five_formylcytidine CASCADE;
DROP VIEW IF EXISTS five_two_prime_o_dimethylcytidine CASCADE;
DROP VIEW IF EXISTS n4_acetyl_2_prime_o_methylcytidine CASCADE;
DROP VIEW IF EXISTS lysidine CASCADE;
DROP VIEW IF EXISTS n4_methylcytidine CASCADE;
DROP VIEW IF EXISTS n4_2_prime_o_dimethylcytidine CASCADE;
DROP VIEW IF EXISTS five_hydroxymethylcytidine CASCADE;
DROP VIEW IF EXISTS five_formyl_two_prime_o_methylcytidine CASCADE;
DROP VIEW IF EXISTS n4_n4_2_prime_o_trimethylcytidine CASCADE;
DROP VIEW IF EXISTS one_methyladenosine CASCADE;
DROP VIEW IF EXISTS two_methyladenosine CASCADE;
DROP VIEW IF EXISTS n6_methyladenosine CASCADE;
DROP VIEW IF EXISTS two_prime_o_methyladenosine CASCADE;
DROP VIEW IF EXISTS two_methylthio_n6_methyladenosine CASCADE;
DROP VIEW IF EXISTS n6_isopentenyladenosine CASCADE;
DROP VIEW IF EXISTS two_methylthio_n6_isopentenyladenosine CASCADE;
DROP VIEW IF EXISTS n6_cis_hydroxyisopentenyl_adenosine CASCADE;
DROP VIEW IF EXISTS two_methylthio_n6_cis_hydroxyisopentenyl_adenosine CASCADE;
DROP VIEW IF EXISTS n6_glycinylcarbamoyladenosine CASCADE;
DROP VIEW IF EXISTS n6_threonylcarbamoyladenosine CASCADE;
DROP VIEW IF EXISTS two_methylthio_n6_threonyl_carbamoyladenosine CASCADE;
DROP VIEW IF EXISTS n6_methyl_n6_threonylcarbamoyladenosine CASCADE;
DROP VIEW IF EXISTS n6_hydroxynorvalylcarbamoyladenosine CASCADE;
DROP VIEW IF EXISTS two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine CASCADE;
DROP VIEW IF EXISTS two_prime_o_riboA_phosphate CASCADE;
DROP VIEW IF EXISTS n6_n6_dimethyladenosine CASCADE;
DROP VIEW IF EXISTS n6_2_prime_o_dimethyladenosine CASCADE;
DROP VIEW IF EXISTS n6_n6_2_prime_o_trimethyladenosine CASCADE;
DROP VIEW IF EXISTS one_two_prime_o_dimethyladenosine CASCADE;
DROP VIEW IF EXISTS n6_acetyladenosine CASCADE;
DROP VIEW IF EXISTS seven_deazaguanosine CASCADE;
DROP VIEW IF EXISTS queuosine CASCADE;
DROP VIEW IF EXISTS epoxyqueuosine CASCADE;
DROP VIEW IF EXISTS galactosyl_queuosine CASCADE;
DROP VIEW IF EXISTS mannosyl_queuosine CASCADE;
DROP VIEW IF EXISTS seven_cyano_seven_deazaguanosine CASCADE;
DROP VIEW IF EXISTS seven_aminomethyl_seven_deazaguanosine CASCADE;
DROP VIEW IF EXISTS archaeosine CASCADE;
DROP VIEW IF EXISTS one_methylguanosine CASCADE;
DROP VIEW IF EXISTS n2_methylguanosine CASCADE;
DROP VIEW IF EXISTS seven_methylguanosine CASCADE;
DROP VIEW IF EXISTS two_prime_o_methylguanosine CASCADE;
DROP VIEW IF EXISTS n2_n2_dimethylguanosine CASCADE;
DROP VIEW IF EXISTS n2_2_prime_o_dimethylguanosine CASCADE;
DROP VIEW IF EXISTS n2_n2_2_prime_o_trimethylguanosine CASCADE;
DROP VIEW IF EXISTS two_prime_o_ribosylguanosine_phosphate CASCADE;
DROP VIEW IF EXISTS wybutosine CASCADE;
DROP VIEW IF EXISTS peroxywybutosine CASCADE;
DROP VIEW IF EXISTS hydroxywybutosine CASCADE;
DROP VIEW IF EXISTS undermodified_hydroxywybutosine CASCADE;
DROP VIEW IF EXISTS wyosine CASCADE;
DROP VIEW IF EXISTS methylwyosine CASCADE;
DROP VIEW IF EXISTS n2_7_dimethylguanosine CASCADE;
DROP VIEW IF EXISTS n2_n2_7_trimethylguanosine CASCADE;
DROP VIEW IF EXISTS one_two_prime_o_dimethylguanosine CASCADE;
DROP VIEW IF EXISTS four_demethylwyosine CASCADE;
DROP VIEW IF EXISTS isowyosine CASCADE;
DROP VIEW IF EXISTS n2_7_2prirme_o_trimethylguanosine CASCADE;
DROP VIEW IF EXISTS five_methyluridine CASCADE;
DROP VIEW IF EXISTS two_prime_o_methyluridine CASCADE;
DROP VIEW IF EXISTS five_two_prime_o_dimethyluridine CASCADE;
DROP VIEW IF EXISTS one_methylpseudouridine CASCADE;
DROP VIEW IF EXISTS two_prime_o_methylpseudouridine CASCADE;
DROP VIEW IF EXISTS two_thiouridine CASCADE;
DROP VIEW IF EXISTS four_thiouridine CASCADE;
DROP VIEW IF EXISTS five_methyl_2_thiouridine CASCADE;
DROP VIEW IF EXISTS two_thio_two_prime_o_methyluridine CASCADE;
DROP VIEW IF EXISTS three_three_amino_three_carboxypropyl_uridine CASCADE;
DROP VIEW IF EXISTS five_hydroxyuridine CASCADE;
DROP VIEW IF EXISTS five_methoxyuridine CASCADE;
DROP VIEW IF EXISTS uridine_five_oxyacetic_acid CASCADE;
DROP VIEW IF EXISTS uridine_five_oxyacetic_acid_methyl_ester CASCADE;
DROP VIEW IF EXISTS five_carboxyhydroxymethyl_uridine CASCADE;
DROP VIEW IF EXISTS five_carboxyhydroxymethyl_uridine_methyl_ester CASCADE;
DROP VIEW IF EXISTS five_methoxycarbonylmethyluridine CASCADE;
DROP VIEW IF EXISTS five_methoxycarbonylmethyl_two_prime_o_methyluridine CASCADE;
DROP VIEW IF EXISTS five_mcm_2_thiouridine CASCADE;
DROP VIEW IF EXISTS five_aminomethyl_two_thiouridine CASCADE;
DROP VIEW IF EXISTS five_methylaminomethyluridine CASCADE;
DROP VIEW IF EXISTS five_mam_2_thiouridine CASCADE;
DROP VIEW IF EXISTS five_methylaminomethyl_two_selenouridine CASCADE;
DROP VIEW IF EXISTS five_carbamoylmethyluridine CASCADE;
DROP VIEW IF EXISTS five_cm_2_prime_o_methU CASCADE;
DROP VIEW IF EXISTS five_carboxymethylaminomethyluridine CASCADE;
DROP VIEW IF EXISTS five_carboxymethylaminomethyl_two_prime_o_methyluridine CASCADE;
DROP VIEW IF EXISTS five_carboxymethylaminomethyl_two_thiouridine CASCADE;
DROP VIEW IF EXISTS three_methyluridine CASCADE;
DROP VIEW IF EXISTS one_methyl_3_3_amino_three_carboxypropyl_pseudouridine CASCADE;
DROP VIEW IF EXISTS five_carboxymethyluridine CASCADE;
DROP VIEW IF EXISTS three_two_prime_o_dimethyluridine CASCADE;
DROP VIEW IF EXISTS five_methyldihydrouridine CASCADE;
DROP VIEW IF EXISTS three_methylpseudouridine CASCADE;
DROP VIEW IF EXISTS five_taurinomethyluridine CASCADE;
DROP VIEW IF EXISTS five_taurinomethyl_two_thiouridine CASCADE;
DROP VIEW IF EXISTS five_isopentenylaminomethyl_uridine CASCADE;
DROP VIEW IF EXISTS five_isopentenylaminomethyl_two_thiouridine CASCADE;
DROP VIEW IF EXISTS five_isopentenylaminomethyl_two_prime_o_methyluridine CASCADE;
DROP VIEW IF EXISTS histone_binding_site CASCADE;
DROP VIEW IF EXISTS cds_fragment CASCADE;
DROP VIEW IF EXISTS modified_amino_acid_feature CASCADE;
DROP VIEW IF EXISTS modified_glycine CASCADE;
DROP VIEW IF EXISTS modified_l_alanine CASCADE;
DROP VIEW IF EXISTS modified_l_asparagine CASCADE;
DROP VIEW IF EXISTS modified_l_aspartic_acid CASCADE;
DROP VIEW IF EXISTS modified_l_cysteine CASCADE;
DROP VIEW IF EXISTS modified_l_glutamic_acid CASCADE;
DROP VIEW IF EXISTS modified_l_threonine CASCADE;
DROP VIEW IF EXISTS modified_l_tryptophan CASCADE;
DROP VIEW IF EXISTS modified_l_glutamine CASCADE;
DROP VIEW IF EXISTS modified_l_methionine CASCADE;
DROP VIEW IF EXISTS modified_l_isoleucine CASCADE;
DROP VIEW IF EXISTS modified_l_phenylalanine CASCADE;
DROP VIEW IF EXISTS modified_l_histidine CASCADE;
DROP VIEW IF EXISTS modified_l_serine CASCADE;
DROP VIEW IF EXISTS modified_l_lysine CASCADE;
DROP VIEW IF EXISTS modified_l_leucine CASCADE;
DROP VIEW IF EXISTS modified_l_selenocysteine CASCADE;
DROP VIEW IF EXISTS modified_l_valine CASCADE;
DROP VIEW IF EXISTS modified_l_proline CASCADE;
DROP VIEW IF EXISTS modified_l_tyrosine CASCADE;
DROP VIEW IF EXISTS modified_l_arginine CASCADE;
DROP VIEW IF EXISTS peptidyl CASCADE;
DROP VIEW IF EXISTS cleaved_for_gpi_anchor_region CASCADE;
DROP VIEW IF EXISTS biomaterial_region CASCADE;
DROP VIEW IF EXISTS experimental_feature CASCADE;
DROP VIEW IF EXISTS biological_region CASCADE;
DROP VIEW IF EXISTS topologically_defined_region CASCADE;
DROP VIEW IF EXISTS translocation_breakpoint CASCADE;
DROP VIEW IF EXISTS insertion_breakpoint CASCADE;
DROP VIEW IF EXISTS deletion_breakpoint CASCADE;
DROP VIEW IF EXISTS five_prime_flanking_region CASCADE;
DROP VIEW IF EXISTS three_prime_flanking_region CASCADE;
DROP VIEW IF EXISTS transcribed_fragment CASCADE;
DROP VIEW IF EXISTS cis_splice_site CASCADE;
DROP VIEW IF EXISTS trans_splice_site CASCADE;
DROP VIEW IF EXISTS splice_junction CASCADE;
DROP VIEW IF EXISTS conformational_switch CASCADE;
DROP VIEW IF EXISTS dye_terminator_read CASCADE;
DROP VIEW IF EXISTS pyrosequenced_read CASCADE;
DROP VIEW IF EXISTS ligation_based_read CASCADE;
DROP VIEW IF EXISTS polymerase_synthesis_read CASCADE;
DROP VIEW IF EXISTS cis_regulatory_frameshift_element CASCADE;
DROP VIEW IF EXISTS expressed_sequence_assembly CASCADE;
DROP VIEW IF EXISTS dna_binding_site CASCADE;
DROP VIEW IF EXISTS cryptic_gene CASCADE;
DROP VIEW IF EXISTS three_prime_race_clone CASCADE;
DROP VIEW IF EXISTS cassette_pseudogene CASCADE;
DROP VIEW IF EXISTS alanine CASCADE;
DROP VIEW IF EXISTS valine CASCADE;
DROP VIEW IF EXISTS leucine CASCADE;
DROP VIEW IF EXISTS isoleucine CASCADE;
DROP VIEW IF EXISTS proline CASCADE;
DROP VIEW IF EXISTS tryptophan CASCADE;
DROP VIEW IF EXISTS phenylalanine CASCADE;
DROP VIEW IF EXISTS methionine CASCADE;
DROP VIEW IF EXISTS glycine CASCADE;
DROP VIEW IF EXISTS serine CASCADE;
DROP VIEW IF EXISTS threonine CASCADE;
DROP VIEW IF EXISTS tyrosine CASCADE;
DROP VIEW IF EXISTS cysteine CASCADE;
DROP VIEW IF EXISTS glutamine CASCADE;
DROP VIEW IF EXISTS asparagine CASCADE;
DROP VIEW IF EXISTS lysine CASCADE;
DROP VIEW IF EXISTS arginine CASCADE;
DROP VIEW IF EXISTS histidine CASCADE;
DROP VIEW IF EXISTS aspartic_acid CASCADE;
DROP VIEW IF EXISTS glutamic_acid CASCADE;
DROP VIEW IF EXISTS selenocysteine CASCADE;
DROP VIEW IF EXISTS pyrrolysine CASCADE;
DROP VIEW IF EXISTS transcribed_cluster CASCADE;
DROP VIEW IF EXISTS unigene_cluster CASCADE;
DROP VIEW IF EXISTS crispr CASCADE;
DROP VIEW IF EXISTS insulator_binding_site CASCADE;
DROP VIEW IF EXISTS enhancer_binding_site CASCADE;
DROP VIEW IF EXISTS contig_collection CASCADE;
DROP VIEW IF EXISTS lincrna CASCADE;
DROP VIEW IF EXISTS ust CASCADE;
DROP VIEW IF EXISTS three_prime_ust CASCADE;
DROP VIEW IF EXISTS five_prime_ust CASCADE;
DROP VIEW IF EXISTS rst CASCADE;
DROP VIEW IF EXISTS three_prime_rst CASCADE;
DROP VIEW IF EXISTS five_prime_rst CASCADE;
DROP VIEW IF EXISTS ust_match CASCADE;
DROP VIEW IF EXISTS rst_match CASCADE;
DROP VIEW IF EXISTS primer_match CASCADE;
DROP VIEW IF EXISTS mirna_antiguide CASCADE;
DROP VIEW IF EXISTS trans_splice_junction CASCADE;
DROP VIEW IF EXISTS outron CASCADE;
DROP VIEW IF EXISTS natural_plasmid CASCADE;
DROP VIEW IF EXISTS gene_trap_construct CASCADE;
DROP VIEW IF EXISTS promoter_trap_construct CASCADE;
DROP VIEW IF EXISTS enhancer_trap_construct CASCADE;
DROP VIEW IF EXISTS pac_end CASCADE;
DROP VIEW IF EXISTS rapd CASCADE;
DROP VIEW IF EXISTS shadow_enhancer CASCADE;
DROP VIEW IF EXISTS snv CASCADE;
DROP VIEW IF EXISTS x_element_combinatorial_repeat CASCADE;
DROP VIEW IF EXISTS y_prime_element CASCADE;
DROP VIEW IF EXISTS standard_draft CASCADE;
DROP VIEW IF EXISTS high_quality_draft CASCADE;
DROP VIEW IF EXISTS improved_high_quality_draft CASCADE;
DROP VIEW IF EXISTS annotation_directed_improved_draft CASCADE;
DROP VIEW IF EXISTS noncontiguous_finished CASCADE;
DROP VIEW IF EXISTS finished_genome CASCADE;
DROP VIEW IF EXISTS intronic_regulatory_region CASCADE;
DROP VIEW IF EXISTS centromere_dna_element_i CASCADE;
DROP VIEW IF EXISTS centromere_dna_element_ii CASCADE;
DROP VIEW IF EXISTS centromere_dna_element_iii CASCADE;
DROP VIEW IF EXISTS telomeric_repeat CASCADE;
DROP VIEW IF EXISTS x_element CASCADE;
DROP VIEW IF EXISTS yac_end CASCADE;
DROP VIEW IF EXISTS whole_genome_sequence_status CASCADE;
DROP VIEW IF EXISTS heritable_phenotypic_marker CASCADE;
DROP VIEW IF EXISTS peptide_collection CASCADE;
DROP VIEW IF EXISTS high_identity_region CASCADE;
DROP VIEW IF EXISTS processed_transcript CASCADE;
DROP VIEW IF EXISTS assortment_derived_variation CASCADE;
DROP VIEW IF EXISTS reference_genome CASCADE;
DROP VIEW IF EXISTS variant_genome CASCADE;
DROP VIEW IF EXISTS variant_collection CASCADE;
DROP VIEW IF EXISTS alteration_attribute CASCADE;
DROP VIEW IF EXISTS chromosomal_variation_attribute CASCADE;
DROP VIEW IF EXISTS intrachromosomal CASCADE;
DROP VIEW IF EXISTS interchromosomal CASCADE;
DROP VIEW IF EXISTS insertion_attribute CASCADE;
DROP VIEW IF EXISTS tandem CASCADE;
DROP VIEW IF EXISTS direct CASCADE;
DROP VIEW IF EXISTS inverted CASCADE;
DROP VIEW IF EXISTS free CASCADE;
DROP VIEW IF EXISTS inversion_attribute CASCADE;
DROP VIEW IF EXISTS pericentric CASCADE;
DROP VIEW IF EXISTS paracentric CASCADE;
DROP VIEW IF EXISTS translocaton_attribute CASCADE;
DROP VIEW IF EXISTS reciprocal CASCADE;
DROP VIEW IF EXISTS insertional CASCADE;
DROP VIEW IF EXISTS duplication_attribute CASCADE;
DROP VIEW IF EXISTS chromosomally_aberrant_genome CASCADE;
DROP VIEW IF EXISTS assembly_error_correction CASCADE;
DROP VIEW IF EXISTS base_call_error_correction CASCADE;
DROP VIEW IF EXISTS peptide_localization_signal CASCADE;
DROP VIEW IF EXISTS nuclear_localization_signal CASCADE;
DROP VIEW IF EXISTS endosomal_localization_signal CASCADE;
DROP VIEW IF EXISTS lysosomal_localization_signal CASCADE;
DROP VIEW IF EXISTS nuclear_export_signal CASCADE;
DROP VIEW IF EXISTS recombination_signal_sequence CASCADE;
DROP VIEW IF EXISTS cryptic_splice_site CASCADE;
DROP VIEW IF EXISTS nuclear_rim_localization_signal CASCADE;
DROP VIEW IF EXISTS p_element CASCADE;
DROP VIEW IF EXISTS functional_variant CASCADE;
DROP VIEW IF EXISTS structural_variant CASCADE;
DROP VIEW IF EXISTS transcript_function_variant CASCADE;
DROP VIEW IF EXISTS translational_product_function_variant CASCADE;
DROP VIEW IF EXISTS level_of_transcript_variant CASCADE;
DROP VIEW IF EXISTS decreased_transcript_level_variant CASCADE;
DROP VIEW IF EXISTS increased_transcript_level_variant CASCADE;
DROP VIEW IF EXISTS transcript_processing_variant CASCADE;
DROP VIEW IF EXISTS editing_variant CASCADE;
DROP VIEW IF EXISTS polyadenylation_variant CASCADE;
DROP VIEW IF EXISTS transcript_stability_variant CASCADE;
DROP VIEW IF EXISTS decreased_transcript_stability_variant CASCADE;
DROP VIEW IF EXISTS increased_transcript_stability_variant CASCADE;
DROP VIEW IF EXISTS transcription_variant CASCADE;
DROP VIEW IF EXISTS rate_of_transcription_variant CASCADE;
DROP VIEW IF EXISTS increased_transcription_rate_variant CASCADE;
DROP VIEW IF EXISTS decreased_transcription_rate_variant CASCADE;
DROP VIEW IF EXISTS translational_product_level_variant CASCADE;
DROP VIEW IF EXISTS polypeptide_function_variant CASCADE;
DROP VIEW IF EXISTS decreased_translational_product_level CASCADE;
DROP VIEW IF EXISTS increased_translational_product_level CASCADE;
DROP VIEW IF EXISTS polypeptide_gain_of_function_variant CASCADE;
DROP VIEW IF EXISTS polypeptide_localization_variant CASCADE;
DROP VIEW IF EXISTS polypeptide_loss_of_function_variant CASCADE;
DROP VIEW IF EXISTS inactive_ligand_binding_site CASCADE;
DROP VIEW IF EXISTS polypeptide_partial_loss_of_function CASCADE;
DROP VIEW IF EXISTS polypeptide_post_translational_processing_variant CASCADE;
DROP VIEW IF EXISTS copy_number_change CASCADE;
DROP VIEW IF EXISTS gene_variant CASCADE;
DROP VIEW IF EXISTS gene_fusion CASCADE;
DROP VIEW IF EXISTS regulatory_region_variant CASCADE;
DROP VIEW IF EXISTS stop_retained_variant CASCADE;
DROP VIEW IF EXISTS splicing_variant CASCADE;
DROP VIEW IF EXISTS cryptic_splice_site_variant CASCADE;
DROP VIEW IF EXISTS cryptic_splice_acceptor CASCADE;
DROP VIEW IF EXISTS cryptic_splice_donor CASCADE;
DROP VIEW IF EXISTS exon_loss CASCADE;
DROP VIEW IF EXISTS intron_gain CASCADE;
DROP VIEW IF EXISTS splice_acceptor_variant CASCADE;
DROP VIEW IF EXISTS splice_donor_variant CASCADE;
DROP VIEW IF EXISTS transcript_variant CASCADE;
DROP VIEW IF EXISTS complex_change_in_transcript CASCADE;
DROP VIEW IF EXISTS stop_lost CASCADE;
DROP VIEW IF EXISTS coding_sequence_variant CASCADE;
DROP VIEW IF EXISTS codon_variant CASCADE;
DROP VIEW IF EXISTS initiator_codon_change CASCADE;
DROP VIEW IF EXISTS non_synonymous_codon CASCADE;
DROP VIEW IF EXISTS conservative_missense_codon CASCADE;
DROP VIEW IF EXISTS non_conservative_missense_codon CASCADE;
DROP VIEW IF EXISTS stop_gained CASCADE;
DROP VIEW IF EXISTS synonymous_codon CASCADE;
DROP VIEW IF EXISTS frameshift_variant CASCADE;
DROP VIEW IF EXISTS terminator_codon_variant CASCADE;
DROP VIEW IF EXISTS frame_restoring_variant CASCADE;
DROP VIEW IF EXISTS minus_1_frameshift_variant CASCADE;
DROP VIEW IF EXISTS minus_2_frameshift_variant CASCADE;
DROP VIEW IF EXISTS plus_1_frameshift_variant CASCADE;
DROP VIEW IF EXISTS plus_2_frameshift_variant CASCADE;
DROP VIEW IF EXISTS transcript_secondary_structure_variant CASCADE;
DROP VIEW IF EXISTS compensatory_transcript_secondary_structure_variant CASCADE;
DROP VIEW IF EXISTS translational_product_structure_variant CASCADE;
DROP VIEW IF EXISTS threed_polypeptide_structure_variant CASCADE;
DROP VIEW IF EXISTS complex_3d_structural_variant CASCADE;
DROP VIEW IF EXISTS conformational_change_variant CASCADE;
DROP VIEW IF EXISTS complex_change_of_translational_product_variant CASCADE;
DROP VIEW IF EXISTS polypeptide_sequence_variant CASCADE;
DROP VIEW IF EXISTS amino_acid_deletion CASCADE;
DROP VIEW IF EXISTS amino_acid_insertion CASCADE;
DROP VIEW IF EXISTS amino_acid_substitution CASCADE;
DROP VIEW IF EXISTS conservative_amino_acid_substitution CASCADE;
DROP VIEW IF EXISTS non_conservative_amino_acid_substitution CASCADE;
DROP VIEW IF EXISTS elongated_polypeptide CASCADE;
DROP VIEW IF EXISTS elongated_polypeptide_c_terminal CASCADE;
DROP VIEW IF EXISTS elongated_polypeptide_n_terminal CASCADE;
DROP VIEW IF EXISTS elongated_in_frame_polypeptide_c_terminal CASCADE;
DROP VIEW IF EXISTS elongated_out_of_frame_polypeptide_c_terminal CASCADE;
DROP VIEW IF EXISTS elongated_in_frame_polypeptide_n_terminal_elongation CASCADE;
DROP VIEW IF EXISTS elongated_out_of_frame_polypeptide_n_terminal CASCADE;
DROP VIEW IF EXISTS polypeptide_fusion CASCADE;
DROP VIEW IF EXISTS polypeptide_truncation CASCADE;
DROP VIEW IF EXISTS inactive_catalytic_site CASCADE;
DROP VIEW IF EXISTS nc_transcript_variant CASCADE;
DROP VIEW IF EXISTS mature_mirna_variant CASCADE;
DROP VIEW IF EXISTS nmd_transcript_variant CASCADE;
DROP VIEW IF EXISTS utr_variant CASCADE;
DROP VIEW IF EXISTS five_prime_utr_variant CASCADE;
DROP VIEW IF EXISTS three_prime_utr_variant CASCADE;
DROP VIEW IF EXISTS terminal_codon_variant CASCADE;
DROP VIEW IF EXISTS incomplete_terminal_codon_variant CASCADE;
DROP VIEW IF EXISTS intron_variant CASCADE;
DROP VIEW IF EXISTS intergenic_variant CASCADE;
DROP VIEW IF EXISTS splice_site_variant CASCADE;
DROP VIEW IF EXISTS splice_region_variant CASCADE;
DROP VIEW IF EXISTS upstream_gene_variant CASCADE;
DROP VIEW IF EXISTS downstream_gene_variant CASCADE;
DROP VIEW IF EXISTS fivekb_downstream_variant CASCADE;
DROP VIEW IF EXISTS fivehundred_b_downstream_variant CASCADE;
DROP VIEW IF EXISTS fivekb_upstream_variant CASCADE;
DROP VIEW IF EXISTS twokb_upstream_variant CASCADE;
DROP VIEW IF EXISTS rrna_gene CASCADE;
DROP VIEW IF EXISTS pirna_gene CASCADE;
DROP VIEW IF EXISTS rnase_p_rna_gene CASCADE;
DROP VIEW IF EXISTS rnase_mrp_rna_gene CASCADE;
DROP VIEW IF EXISTS lincrna_gene CASCADE;
DROP VIEW IF EXISTS mathematically_defined_repeat CASCADE;
DROP VIEW IF EXISTS telomerase_rna_gene CASCADE;
DROP VIEW IF EXISTS targeting_vector CASCADE;
DROP VIEW IF EXISTS genetic_marker CASCADE;
DROP VIEW IF EXISTS dart_marker CASCADE;
DROP VIEW IF EXISTS kozak_sequence CASCADE;
DROP VIEW IF EXISTS nested_transposon CASCADE;
DROP VIEW IF EXISTS nested_repeat CASCADE;
DROP VIEW IF EXISTS inframe_variant CASCADE;
DROP VIEW IF EXISTS inframe_codon_gain CASCADE;
DROP VIEW IF EXISTS inframe_codon_loss CASCADE;
DROP VIEW IF EXISTS retinoic_acid_responsive_element CASCADE;
DROP VIEW IF EXISTS nucleotide_to_protein_binding_site CASCADE;
DROP VIEW IF EXISTS nucleotide_binding_site CASCADE;
DROP VIEW IF EXISTS metal_binding_site CASCADE;
DROP VIEW IF EXISTS ligand_binding_site CASCADE;
DROP VIEW IF EXISTS nested_tandem_repeat CASCADE;
DROP VIEW IF EXISTS promoter_element CASCADE;
DROP VIEW IF EXISTS core_promoter_element CASCADE;
DROP VIEW IF EXISTS rna_polymerase_ii_tata_box CASCADE;
DROP VIEW IF EXISTS rna_polymerase_iii_tata_box CASCADE;
DROP VIEW IF EXISTS bred_motif CASCADE;
DROP VIEW IF EXISTS dce CASCADE;
DROP VIEW IF EXISTS dce_si CASCADE;
DROP VIEW IF EXISTS dce_sii CASCADE;
DROP VIEW IF EXISTS dce_siii CASCADE;
DROP VIEW IF EXISTS proximal_promoter_element CASCADE;
DROP VIEW IF EXISTS rnapol_ii_core_promoter CASCADE;
DROP VIEW IF EXISTS distal_promoter_element CASCADE;
DROP VIEW IF EXISTS bacterial_rnapol_promoter_sigma_70 CASCADE;
DROP VIEW IF EXISTS bacterial_rnapol_promoter_sigma54 CASCADE;
DROP VIEW IF EXISTS minus_12_signal CASCADE;
DROP VIEW IF EXISTS minus_24_signal CASCADE;
DROP VIEW IF EXISTS a_box_type_1 CASCADE;
DROP VIEW IF EXISTS a_box_type_2 CASCADE;
DROP VIEW IF EXISTS intermediate_element CASCADE;
DROP VIEW IF EXISTS regulatory_promoter_element CASCADE;
DROP VIEW IF EXISTS transcription_regulatory_region CASCADE;
DROP VIEW IF EXISTS translation_regulatory_region CASCADE;
DROP VIEW IF EXISTS recombination_regulatory_region CASCADE;
DROP VIEW IF EXISTS replication_regulatory_region CASCADE;
DROP VIEW IF EXISTS sequence_motif CASCADE;
DROP VIEW IF EXISTS experimental_feature_attribute CASCADE;
DROP VIEW IF EXISTS score CASCADE;
DROP VIEW IF EXISTS quality_value CASCADE;
DROP VIEW IF EXISTS restriction_enzyme_recognition_site CASCADE;
DROP VIEW IF EXISTS restriction_enzyme_cleavage_junction CASCADE;
DROP VIEW IF EXISTS five_prime_restriction_enzyme_junction CASCADE;
DROP VIEW IF EXISTS three_prime_restriction_enzyme_junction CASCADE;
DROP VIEW IF EXISTS blunt_end_restriction_enzyme_cleavage_site CASCADE;
DROP VIEW IF EXISTS sticky_end_restriction_enzyme_cleavage_site CASCADE;
DROP VIEW IF EXISTS blunt_end_restriction_enzyme_cleavage_junction CASCADE;
DROP VIEW IF EXISTS single_strand_restriction_enzyme_cleavage_site CASCADE;
DROP VIEW IF EXISTS restriction_enzyme_single_strand_overhang CASCADE;
DROP VIEW IF EXISTS experimentally_defined_binding_region CASCADE;
DROP VIEW IF EXISTS chip_seq_region CASCADE;
DROP VIEW IF EXISTS aspe_primer CASCADE;
DROP VIEW IF EXISTS dcaps_primer CASCADE;
DROP VIEW IF EXISTS histone_modification CASCADE;
DROP VIEW IF EXISTS histone_methylation_site CASCADE;
DROP VIEW IF EXISTS histone_acetylation_site CASCADE;
DROP VIEW IF EXISTS h3k9_acetylation_site CASCADE;
DROP VIEW IF EXISTS h3k14_acetylation_site CASCADE;
DROP VIEW IF EXISTS h3k4_monomethylation_site CASCADE;
DROP VIEW IF EXISTS h3k4_trimethylation CASCADE;
DROP VIEW IF EXISTS h3k9_trimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k27_monomethylation_site CASCADE;
DROP VIEW IF EXISTS h3k27_trimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k79_monomethylation_site CASCADE;
DROP VIEW IF EXISTS h3k79_dimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k79_trimethylation_site CASCADE;
DROP VIEW IF EXISTS h4k20_monomethylation_site CASCADE;
DROP VIEW IF EXISTS h2bk5_monomethylation_site CASCADE;
DROP VIEW IF EXISTS isre CASCADE;
DROP VIEW IF EXISTS histone_ubiqitination_site CASCADE;
DROP VIEW IF EXISTS h2b_ubiquitination_site CASCADE;
DROP VIEW IF EXISTS h3k18_acetylation_site CASCADE;
DROP VIEW IF EXISTS h3k23_acylation_site CASCADE;
DROP VIEW IF EXISTS epigenetically_modified_region CASCADE;
DROP VIEW IF EXISTS h3k27_acylation_site CASCADE;
DROP VIEW IF EXISTS h3k36_monomethylation_site CASCADE;
DROP VIEW IF EXISTS h3k36_dimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k36_trimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k4_dimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k27_dimethylation_site CASCADE;
DROP VIEW IF EXISTS h3k9_monomethylation_site CASCADE;
DROP VIEW IF EXISTS h3k9_dimethylation_site CASCADE;
DROP VIEW IF EXISTS h4k16_acylation_site CASCADE;
DROP VIEW IF EXISTS h4k5_acylation_site CASCADE;
DROP VIEW IF EXISTS h4k8_acylation_site CASCADE;
DROP VIEW IF EXISTS h3k27_methylation_site CASCADE;
DROP VIEW IF EXISTS h3k36_methylation_site CASCADE;
DROP VIEW IF EXISTS h3k4_methylation_site CASCADE;
DROP VIEW IF EXISTS h3k79_methylation_site CASCADE;
DROP VIEW IF EXISTS h3k9_methylation_site CASCADE;
DROP VIEW IF EXISTS histone_acylation_region CASCADE;
DROP VIEW IF EXISTS h4k_acylation_region CASCADE;
DROP VIEW IF EXISTS gene_with_non_canonical_start_codon CASCADE;
DROP VIEW IF EXISTS gene_with_start_codon_cug CASCADE;
DROP VIEW IF EXISTS pseudogenic_gene_segment CASCADE;
DROP VIEW IF EXISTS copy_number_gain CASCADE;
DROP VIEW IF EXISTS copy_number_loss CASCADE;
DROP VIEW IF EXISTS upd CASCADE;
DROP VIEW IF EXISTS maternal_uniparental_disomy CASCADE;
DROP VIEW IF EXISTS paternal_uniparental_disomy CASCADE;
DROP VIEW IF EXISTS open_chromatin_region CASCADE;
DROP VIEW IF EXISTS sl3_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl4_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl5_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl6_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl7_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl8_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl9_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl10_accceptor_site CASCADE;
DROP VIEW IF EXISTS sl11_acceptor_site CASCADE;
DROP VIEW IF EXISTS sl12_acceptor_site CASCADE;
DROP VIEW IF EXISTS duplicated_pseudogene CASCADE;
DROP VIEW IF EXISTS unitary_pseudogene CASCADE;
DROP VIEW IF EXISTS non_processed_pseudogene CASCADE;
DROP VIEW IF EXISTS variant_quality CASCADE;
DROP VIEW IF EXISTS variant_origin CASCADE;
DROP VIEW IF EXISTS variant_frequency CASCADE;
DROP VIEW IF EXISTS unique_variant CASCADE;
DROP VIEW IF EXISTS rare_variant CASCADE;
DROP VIEW IF EXISTS polymorphic_variant CASCADE;
DROP VIEW IF EXISTS common_variant CASCADE;
DROP VIEW IF EXISTS fixed_variant CASCADE;
DROP VIEW IF EXISTS variant_phenotype CASCADE;
DROP VIEW IF EXISTS benign_variant CASCADE;
DROP VIEW IF EXISTS disease_associated_variant CASCADE;
DROP VIEW IF EXISTS disease_causing_variant CASCADE;
DROP VIEW IF EXISTS lethal_variant CASCADE;
DROP VIEW IF EXISTS quantitative_variant CASCADE;
DROP VIEW IF EXISTS maternal_variant CASCADE;
DROP VIEW IF EXISTS paternal_variant CASCADE;
DROP VIEW IF EXISTS somatic_variant CASCADE;
DROP VIEW IF EXISTS germline_variant CASCADE;
DROP VIEW IF EXISTS pedigree_specific_variant CASCADE;
DROP VIEW IF EXISTS population_specific_variant CASCADE;
DROP VIEW IF EXISTS de_novo_variant CASCADE;
DROP VIEW IF EXISTS tf_binding_site_variant CASCADE;
DROP VIEW IF EXISTS missense_codon CASCADE;
DROP VIEW IF EXISTS complex_structural_alteration CASCADE;
DROP VIEW IF EXISTS structural_alteration CASCADE;
DROP VIEW IF EXISTS loss_of_heterozygosity CASCADE;
DROP VIEW IF EXISTS splice_donor_5th_base_variant CASCADE;
DROP VIEW IF EXISTS u_box CASCADE;
DROP VIEW IF EXISTS mating_type_region CASCADE;
DROP VIEW IF EXISTS paired_end_fragment CASCADE;
DROP VIEW IF EXISTS exon_variant CASCADE;
DROP VIEW IF EXISTS non_coding_exon_variant CASCADE;
DROP VIEW IF EXISTS clone_end CASCADE;
DROP VIEW IF EXISTS point_centromere CASCADE;
DROP VIEW IF EXISTS regional_centromere CASCADE;
DROP VIEW IF EXISTS regional_centromere_central_core CASCADE;
DROP VIEW IF EXISTS centromeric_repeat CASCADE;
DROP VIEW IF EXISTS regional_centromere_inner_repeat_region CASCADE;
DROP VIEW IF EXISTS regional_centromere_outer_repeat_region CASCADE;
DROP VIEW IF EXISTS tasirna CASCADE;
DROP VIEW IF EXISTS tasirna_primary_transcript CASCADE;
DROP VIEW IF EXISTS increased_polyadenylation_variant CASCADE;
DROP VIEW IF EXISTS decreased_polyadenylation_variant CASCADE;
DROP VIEW IF EXISTS regulatory_region CASCADE;
DROP VIEW IF EXISTS u14_snorna_primary_transcript CASCADE;
DROP VIEW IF EXISTS methylation_guide_snorna CASCADE;
DROP VIEW IF EXISTS rrna_cleavage_rna CASCADE;
DROP VIEW IF EXISTS exon_of_single_exon_gene CASCADE;
DROP VIEW IF EXISTS cassette_array_member CASCADE;
DROP VIEW IF EXISTS gene_cassette_member CASCADE;
DROP VIEW IF EXISTS gene_subarray_member CASCADE;
DROP VIEW IF EXISTS primer_binding_site CASCADE;
DROP VIEW IF EXISTS gene_array CASCADE;
DROP VIEW IF EXISTS gene_subarray CASCADE;
DROP VIEW IF EXISTS gene_cassette CASCADE;
DROP VIEW IF EXISTS gene_cassette_array CASCADE;
DROP VIEW IF EXISTS gene_group CASCADE;
DROP VIEW IF EXISTS selenocysteine_trna_primary_transcript CASCADE;
DROP VIEW IF EXISTS selenocysteinyl_trna CASCADE;
DROP VIEW IF EXISTS syntenic_region CASCADE;
DROP VIEW IF EXISTS biochemical_region_of_peptide CASCADE;
DROP VIEW IF EXISTS molecular_contact_region CASCADE;
DROP VIEW IF EXISTS intrinsically_unstructured_polypeptide_region CASCADE;
DROP VIEW IF EXISTS catmat_left_handed_three CASCADE;
DROP VIEW IF EXISTS catmat_left_handed_four CASCADE;
DROP VIEW IF EXISTS catmat_right_handed_three CASCADE;
DROP VIEW IF EXISTS catmat_right_handed_four CASCADE;
DROP VIEW IF EXISTS alpha_beta_motif CASCADE;
DROP VIEW IF EXISTS lipoprotein_signal_peptide CASCADE;
DROP VIEW IF EXISTS no_output CASCADE;
DROP VIEW IF EXISTS cleaved_peptide_region CASCADE;
DROP VIEW IF EXISTS peptide_coil CASCADE;
DROP VIEW IF EXISTS hydrophobic_region_of_peptide CASCADE;
DROP VIEW IF EXISTS n_terminal_region CASCADE;
DROP VIEW IF EXISTS c_terminal_region CASCADE;
DROP VIEW IF EXISTS central_hydrophobic_region_of_signal_peptide CASCADE;
DROP VIEW IF EXISTS polypeptide_conserved_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_binding_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_catalytic_motif CASCADE;
DROP VIEW IF EXISTS polypeptide_dna_contact CASCADE;
DROP VIEW IF EXISTS polypeptide_conserved_region CASCADE;
DROP VIEW IF EXISTS substitution CASCADE;
DROP VIEW IF EXISTS complex_substitution CASCADE;
DROP VIEW IF EXISTS point_mutation CASCADE;
DROP VIEW IF EXISTS transition CASCADE;
DROP VIEW IF EXISTS pyrimidine_transition CASCADE;
DROP VIEW IF EXISTS c_to_t_transition CASCADE;
DROP VIEW IF EXISTS c_to_t_transition_at_pcpg_site CASCADE;
DROP VIEW IF EXISTS t_to_c_transition CASCADE;
DROP VIEW IF EXISTS purine_transition CASCADE;
DROP VIEW IF EXISTS a_to_g_transition CASCADE;
DROP VIEW IF EXISTS g_to_a_transition CASCADE;
DROP VIEW IF EXISTS transversion CASCADE;
DROP VIEW IF EXISTS pyrimidine_to_purine_transversion CASCADE;
DROP VIEW IF EXISTS c_to_a_transversion CASCADE;
DROP VIEW IF EXISTS c_to_g_transversion CASCADE;
DROP VIEW IF EXISTS t_to_a_transversion CASCADE;
DROP VIEW IF EXISTS t_to_g_transversion CASCADE;
DROP VIEW IF EXISTS purine_to_pyrimidine_transversion CASCADE;
DROP VIEW IF EXISTS a_to_c_transversion CASCADE;
DROP VIEW IF EXISTS a_to_t_transversion CASCADE;
DROP VIEW IF EXISTS g_to_c_transversion CASCADE;
DROP VIEW IF EXISTS g_to_t_transversion CASCADE;
DROP VIEW IF EXISTS intrachromosomal_mutation CASCADE;
DROP VIEW IF EXISTS chromosomal_deletion CASCADE;
DROP VIEW IF EXISTS chromosomal_inversion CASCADE;
DROP VIEW IF EXISTS interchromosomal_mutation CASCADE;
DROP VIEW IF EXISTS indel CASCADE;
DROP VIEW IF EXISTS duplication CASCADE;
DROP VIEW IF EXISTS inversion CASCADE;
DROP VIEW IF EXISTS chromosomal_duplication CASCADE;
DROP VIEW IF EXISTS intrachromosomal_duplication CASCADE;
DROP VIEW IF EXISTS direct_tandem_duplication CASCADE;
DROP VIEW IF EXISTS inverted_tandem_duplication CASCADE;
DROP VIEW IF EXISTS intrachromosomal_transposition CASCADE;
DROP VIEW IF EXISTS compound_chromosome CASCADE;
DROP VIEW IF EXISTS robertsonian_fusion CASCADE;
DROP VIEW IF EXISTS chromosomal_translocation CASCADE;
DROP VIEW IF EXISTS ring_chromosome CASCADE;
DROP VIEW IF EXISTS pericentric_inversion CASCADE;
DROP VIEW IF EXISTS paracentric_inversion CASCADE;
DROP VIEW IF EXISTS reciprocal_chromosomal_translocation CASCADE;
DROP VIEW IF EXISTS autosynaptic_chromosome CASCADE;
DROP VIEW IF EXISTS homo_compound_chromosome CASCADE;
DROP VIEW IF EXISTS hetero_compound_chromosome CASCADE;
DROP VIEW IF EXISTS chromosome_fission CASCADE;
DROP VIEW IF EXISTS dexstrosynaptic_chromosome CASCADE;
DROP VIEW IF EXISTS laevosynaptic_chromosome CASCADE;
DROP VIEW IF EXISTS free_duplication CASCADE;
DROP VIEW IF EXISTS free_ring_duplication CASCADE;
DROP VIEW IF EXISTS complex_chromosomal_mutation CASCADE;
DROP VIEW IF EXISTS deficient_translocation CASCADE;
DROP VIEW IF EXISTS inversion_cum_translocation CASCADE;
DROP VIEW IF EXISTS bipartite_duplication CASCADE;
DROP VIEW IF EXISTS cyclic_translocation CASCADE;
DROP VIEW IF EXISTS bipartite_inversion CASCADE;
DROP VIEW IF EXISTS uninvert_insert_dup CASCADE;
DROP VIEW IF EXISTS inverted_insertional_duplication CASCADE;
DROP VIEW IF EXISTS insertional_duplication CASCADE;
DROP VIEW IF EXISTS interchromosomal_transposition CASCADE;
DROP VIEW IF EXISTS invert_inter_transposition CASCADE;
DROP VIEW IF EXISTS uninvert_inter_transposition CASCADE;
DROP VIEW IF EXISTS invert_intra_transposition CASCADE;
DROP VIEW IF EXISTS uninvert_intra_transposition CASCADE;
DROP VIEW IF EXISTS unorient_insert_dup CASCADE;
DROP VIEW IF EXISTS unoriented_interchromosomal_transposition CASCADE;
DROP VIEW IF EXISTS unoriented_intrachromosomal_transposition CASCADE;
DROP VIEW IF EXISTS uncharacterised_chromosomal_mutation CASCADE;
DROP VIEW IF EXISTS deficient_inversion CASCADE;
DROP VIEW IF EXISTS tandem_duplication CASCADE;
DROP VIEW IF EXISTS partially_characterised_chromosomal_mutation CASCADE;
DROP VIEW IF EXISTS chromosome_number_variation CASCADE;
DROP VIEW IF EXISTS chromosome_structure_variation CASCADE;
DROP VIEW IF EXISTS alternatively_spliced_transcript CASCADE;
DROP VIEW IF EXISTS encodes_1_polypeptide CASCADE;
DROP VIEW IF EXISTS encodes_greater_than_1_polypeptide CASCADE;
DROP VIEW IF EXISTS encodes_different_polypeptides_different_stop CASCADE;
DROP VIEW IF EXISTS encodes_overlapping_peptides_different_start CASCADE;
DROP VIEW IF EXISTS encodes_disjoint_polypeptides CASCADE;
DROP VIEW IF EXISTS encodes_overlapping_polypeptides_different_start_and_stop CASCADE;
DROP VIEW IF EXISTS encodes_overlapping_peptides CASCADE;
DROP VIEW IF EXISTS cryptogene CASCADE;
DROP VIEW IF EXISTS dicistronic_primary_transcript CASCADE;
DROP VIEW IF EXISTS member_of_regulon CASCADE;
DROP VIEW IF EXISTS cds_independently_known CASCADE;
DROP VIEW IF EXISTS orphan_cds CASCADE;
DROP VIEW IF EXISTS cds_supported_by_domain_match_data CASCADE;
DROP VIEW IF EXISTS cds_supported_by_sequence_similarity_data CASCADE;
DROP VIEW IF EXISTS cds_predicted CASCADE;
DROP VIEW IF EXISTS cds_supported_by_est_or_cdna_data CASCADE;
DROP VIEW IF EXISTS internal_shine_dalgarno_sequence CASCADE;
DROP VIEW IF EXISTS recoded_mrna CASCADE;
DROP VIEW IF EXISTS minus_1_translationally_frameshifted CASCADE;
DROP VIEW IF EXISTS plus_1_translationally_frameshifted CASCADE;
DROP VIEW IF EXISTS mrna_recoded_by_translational_bypass CASCADE;
DROP VIEW IF EXISTS mrna_recoded_by_codon_redefinition CASCADE;
DROP VIEW IF EXISTS recoding_stimulatory_region CASCADE;
DROP VIEW IF EXISTS four_bp_start_codon CASCADE;
DROP VIEW IF EXISTS archaeal_intron CASCADE;
DROP VIEW IF EXISTS trna_intron CASCADE;
DROP VIEW IF EXISTS ctg_start_codon CASCADE;
DROP VIEW IF EXISTS secis_element CASCADE;
DROP VIEW IF EXISTS retron CASCADE;
DROP VIEW IF EXISTS three_prime_recoding_site CASCADE;
DROP VIEW IF EXISTS three_prime_stem_loop_structure CASCADE;
DROP VIEW IF EXISTS five_prime_recoding_site CASCADE;
DROP VIEW IF EXISTS flanking_three_prime_quadruplet_recoding_signal CASCADE;
DROP VIEW IF EXISTS uag_stop_codon_signal CASCADE;
DROP VIEW IF EXISTS uaa_stop_codon_signal CASCADE;
DROP VIEW IF EXISTS regulon CASCADE;
DROP VIEW IF EXISTS uga_stop_codon_signal CASCADE;
DROP VIEW IF EXISTS three_prime_repeat_recoding_signal CASCADE;
DROP VIEW IF EXISTS distant_three_prime_recoding_signal CASCADE;
DROP VIEW IF EXISTS stop_codon_signal CASCADE;
DROP VIEW IF EXISTS databank_entry CASCADE;
DROP VIEW IF EXISTS gene_segment CASCADE;
DROP VIEW IF EXISTS protein_coding_gene CASCADE;
DROP VIEW IF EXISTS intronloc_view CASCADE;
DROP VIEW IF EXISTS intron_combined_view CASCADE;
DROP VIEW IF EXISTS gffatts CASCADE;
DROP VIEW IF EXISTS gff3atts CASCADE;
DROP VIEW IF EXISTS gff3view CASCADE;
DROP VIEW IF EXISTS all_feature_names CASCADE;
DROP VIEW IF EXISTS f_loc CASCADE;
DROP VIEW IF EXISTS dfeatureloc CASCADE;
DROP VIEW IF EXISTS f_type CASCADE;
DROP VIEW IF EXISTS fnr_type CASCADE;
DROP VIEW IF EXISTS fp_key CASCADE;
DROP VIEW IF EXISTS featureset_meets CASCADE;
DROP VIEW IF EXISTS feature_meets CASCADE;
DROP VIEW IF EXISTS feature_meets_on_same_strand CASCADE;
DROP VIEW IF EXISTS feature_disjoint CASCADE;
DROP VIEW IF EXISTS feature_union CASCADE;
DROP VIEW IF EXISTS feature_intersection CASCADE;
DROP VIEW IF EXISTS feature_difference CASCADE;
DROP VIEW IF EXISTS feature_distance CASCADE;
DROP VIEW IF EXISTS feature_contains CASCADE;


--
-- Name: feature_by_fx_type; Type: TYPE; Schema: public; Owner: chado
--
ALTER TYPE feature_by_fx_type ALTER ATTRIBUTE feature_id SET DATA TYPE bigint;

--
-- Name: soi_type; Type: TYPE; Schema: public; Owner: chado
--
ALTER TYPE soi_type 
    ALTER ATTRIBUTE type_id TYPE bigint,
    ALTER ATTRIBUTE subject_id TYPE bigint,
    ALTER ATTRIBUTE object_id TYPE bigint;


--
-- Name: create_point(bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS create_point(integer, integer);
CREATE OR REPLACE FUNCTION create_point(bigint, bigint) RETURNS point
    LANGUAGE sql
    AS $_$SELECT point ($1, $2)$_$;
    
    
--
-- Name: boxrange(bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP INDEX IF EXISTS bingroup_boxrange;
DROP INDEX IF EXISTS binloc_boxrange;
DROP FUNCTION IF EXISTS boxrange(integer, integer);
CREATE OR REPLACE FUNCTION boxrange(bigint, bigint) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point(CAST(0 AS bigint), $1), create_point($2,500000000))$_$;

--
-- Name: boxrange(bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP INDEX IF EXISTS binloc_boxrange_src;
DROP FUNCTION IF EXISTS boxrange(integer, integer, integer);
CREATE OR REPLACE FUNCTION boxrange(bigint, bigint, bigint) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1,$3))$_$;
  

SET search_path=frange,public,pg_catalog;

--
-- Name: featuregroup; Type: TABLE; Schema: frange; Owner: chado; Tablespace: 
--

ALTER TABLE featuregroup 
    ALTER featuregroup_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER group_id TYPE bigint,
    ALTER srcfeature_id TYPE bigint,
    ALTER fmin TYPE bigint,
    ALTER fmax TYPE bigint;

DROP INDEX IF EXISTS bingroup_boxrange;
CREATE INDEX bingroup_boxrange ON featuregroup USING RTREE (boxrange(fmin, fmax)) WHERE is_root = 1;


--
-- Name: _fill_featuregroup(bigint, bigint); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS _fill_featuregroup(integer, integer);
CREATE OR REPLACE FUNCTION _fill_featuregroup(bigint, bigint) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    groupid alias for $1;
    parentid alias for $2;
    g featuregroup%ROWTYPE;
BEGIN
    FOR g IN
        SELECT DISTINCT 0, fr.subject_id, fr.object_id, groupid, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand, 0
        FROM  feature_relationship AS fr,
              featureloc AS fl
        WHERE fr.object_id = parentid
          AND fr.subject_id = fl.feature_id
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (g.subject_id, g.object_id, g.group_id, g.srcfeature_id, g.fmin, g.fmax, g.strand, 0);
        PERFORM _fill_featuregroup(groupid,g.subject_id);
    END LOOP;
    RETURN 1;
END;
$_$;

--
-- Name: fill_featuregroup(); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS fill_featuregroup();
CREATE OR REPLACE FUNCTION fill_featuregroup() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    p featuregroup%ROWTYPE;
    l featureloc%ROWTYPE;
    isa bigint;
    -- c int;  the c variable isnt used
BEGIN
    TRUNCATE featuregroup;
    SELECT INTO isa cvterm_id FROM cvterm WHERE (name = 'isa' OR name = 'is_a');

    -- Recursion is the biggest performance killer for this function.
    -- We can dodge the first round of recursion using the "fr1 / GROUP BY" approach.
    -- Luckily, most feature graphs are only 2 levels deep, so most recursion is
    -- avoidable.

    RAISE NOTICE 'Loading root and singleton features.';
    FOR p IN
        SELECT DISTINCT 0, f.feature_id, f.feature_id, f.feature_id, srcfeature_id, fmin, fmax, strand, 1
        FROM feature AS f
        LEFT JOIN feature_relationship ON (f.feature_id = object_id)
        LEFT JOIN featureloc           ON (f.feature_id = featureloc.feature_id)
        WHERE f.feature_id NOT IN ( SELECT subject_id FROM feature_relationship )
          AND srcfeature_id IS NOT NULL
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (p.object_id, p.object_id, p.object_id, p.srcfeature_id, p.fmin, p.fmax, p.strand, 1);
    END LOOP;

    RAISE NOTICE 'Loading child features.  If your database contains grandchild';
    RAISE NOTICE 'features, they will be loaded recursively and may take a long time.';

    FOR p IN
        SELECT DISTINCT 0, fr0.subject_id, fr0.object_id, fr0.object_id, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand, count(fr1.subject_id)
        FROM  feature_relationship AS fr0
        LEFT JOIN feature_relationship AS fr1 ON ( fr0.subject_id = fr1.object_id),
        featureloc AS fl
        WHERE fr0.subject_id = fl.feature_id
          AND fr0.object_id IN (
                  SELECT f.feature_id
                  FROM feature AS f
                  LEFT JOIN feature_relationship ON (f.feature_id = object_id)
                  LEFT JOIN featureloc           ON (f.feature_id = featureloc.feature_id)
                  WHERE f.feature_id NOT IN ( SELECT subject_id FROM feature_relationship )
                    AND f.feature_id     IN ( SELECT object_id  FROM feature_relationship )
                    AND srcfeature_id IS NOT NULL
              )
        GROUP BY fr0.subject_id, fr0.object_id, fl.srcfeature_id, fl.fmin, fl.fmax, fl.strand
    LOOP
        INSERT INTO featuregroup
            (subject_id, object_id, group_id, srcfeature_id, fmin, fmax, strand, is_root)
        VALUES
            (p.subject_id, p.object_id, p.object_id, p.srcfeature_id, p.fmin, p.fmax, p.strand, 0);
        IF ( p.is_root > 0 ) THEN
            PERFORM _fill_featuregroup(p.subject_id,p.subject_id);
        END IF;
    END LOOP;

    RETURN 1;
END;   
$$;


SET search_path=public,frange,pg_catalog;
--
-- Name: boxquery(bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS boxquery(integer, integer);
CREATE OR REPLACE FUNCTION boxquery(bigint, bigint) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1, $2))$_$;

--
-- Name: boxquery(bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS boxquery(integer, integer, integer);
CREATE OR REPLACE FUNCTION boxquery(bigint, bigint, bigint) RETURNS box
    LANGUAGE sql IMMUTABLE
    AS $_$SELECT box (create_point($1, $2), create_point($1, $3))$_$;


SET search_path=frange,public,pg_catalog; 
--
-- Name: groupoverlaps(bigint, bigint); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupoverlaps(integer, integer);
CREATE OR REPLACE FUNCTION groupoverlaps(bigint, bigint) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM featuregroup
  WHERE is_root = 1
    AND boxquery($1, $2) <@ boxrange(fmin,fmax)
$_$;

--
-- Name: groupoverlaps(bigint[], bigint[], character varying[]); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupoverlaps(integer[], integer[], character varying[]);
CREATE OR REPLACE FUNCTION groupoverlaps(bigint[], bigint[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;

--
-- Name: groupoverlaps(bigint, bigint, character varying); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupoverlaps(integer, integer, character varying); 
CREATE OR REPLACE FUNCTION groupoverlaps(bigint, bigint, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT g2.*
  FROM  featuregroup g1,
        featuregroup g2
  WHERE g1.is_root = 1
    AND ( g1.srcfeature_id = g2.srcfeature_id OR g2.srcfeature_id IS NULL )
    AND g1.group_id = g2.group_id
    AND g1.srcfeature_id = (SELECT feature_id FROM feature WHERE uniquename = $3)
    AND boxquery($1, $2) <@ boxrange(g1.fmin,g2.fmax)
$_$;
  
--
-- Name: groupcontains(bigint[], bigint[], character varying[]); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupcontains(integer[], integer[], character varying[]);
CREATE OR REPLACE FUNCTION groupcontains(bigint[], bigint[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin <= mins[i]
                  AND fmax >= maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;

--
-- Name: groupcontains(bigint, bigint, character varying); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupcontains(integer, integer, character varying);
CREATE OR REPLACE FUNCTION groupcontains(bigint, bigint, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin <= $1 AND fmax >= $2
$_$;

--
-- Name: groupidentical(bigint[], bigint[], character varying[]); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupidentical(integer[], integer[], character varying[]);
CREATE OR REPLACE FUNCTION groupidentical(bigint[], bigint[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin = mins[i]
                  AND fmax = maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;

--
-- Name: groupidentical(bigint, bigint, character varying); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupidentical(integer, integer, character varying);
CREATE OR REPLACE FUNCTION groupidentical(bigint, bigint, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin = $1 AND fmax = $2
$_$;

--
-- Name: groupinside(bigint[], bigint[], character varying[]); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupinside(integer[], integer[], character varying[]);
CREATE OR REPLACE FUNCTION groupinside(bigint[], bigint[], character varying[]) RETURNS SETOF featuregroup
    LANGUAGE plpgsql
    AS $_$
DECLARE
    mins alias for $1;
    maxs alias for $2;
    srcs alias for $3;
    f featuregroup%ROWTYPE;
    i int;
    s int;
BEGIN
    i := 1;
    FOR i in array_lower( mins, 1 ) .. array_upper( mins, 1 ) LOOP
        SELECT INTO s feature_id FROM feature WHERE uniquename = srcs[i];
        FOR f IN
            SELECT *
            FROM  featuregroup WHERE group_id IN (
                SELECT group_id FROM featuregroup
                WHERE (srcfeature_id = s OR srcfeature_id IS NULL)
                  AND fmin >= mins[i]
                  AND fmax <= maxs[i]
                  AND group_id IN (
                      SELECT group_id FROM groupoverlaps( mins[i], maxs[i] )
                      WHERE  srcfeature_id = s
                  )
            )
        LOOP
            RETURN NEXT f;
        END LOOP;
    END LOOP;
    RETURN;
END;
$_$;

--
-- Name: groupinside(bigint, bigint, character varying); Type: FUNCTION; Schema: frange; Owner: chado
--
DROP FUNCTION IF EXISTS groupinside(integer, integer, character varying);
CREATE OR REPLACE FUNCTION groupinside(bigint, bigint, character varying) RETURNS SETOF featuregroup
    LANGUAGE sql
    AS $_$
  SELECT *
  FROM groupoverlaps($1,$2,$3)
  WHERE fmin >= $1 AND fmax <= $2
$_$;

SET search_path = public, frange,pg_catalog;

--
-- Name: cvtermpath; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE cvtermpath 
    ALTER cvtermpath_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER cv_id TYPE bigint;
   
--
-- Name: create_soi(); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS create_soi();
CREATE OR REPLACE FUNCTION create_soi() RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
    parent soi_type%ROWTYPE;
    isa_id cvterm.cvterm_id%TYPE;
    soi_term TEXT := 'soi';
    soi_def TEXT := 'ontology of SO feature instantiated in database';
    soi_cvid bigint;
    soiterm_id bigint;
    pcount INTEGER;
    count INTEGER := 0;
    cquery TEXT;
BEGIN

    SELECT INTO isa_id cvterm_id FROM cvterm WHERE name = 'isa';

    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    IF (soi_cvid > 0) THEN
        DELETE FROM cvtermpath WHERE cv_id = soi_cvid;
        DELETE FROM cvterm WHERE cv_id = soi_cvid;
    ELSE
        INSERT INTO cv (name, definition) VALUES(soi_term, soi_def);
    END IF;
    SELECT INTO soi_cvid cv_id FROM cv WHERE name = soi_term;
    INSERT INTO cvterm (name, cv_id) VALUES(soi_term, soi_cvid);
    SELECT INTO soiterm_id cvterm_id FROM cvterm WHERE name = soi_term;

    CREATE TEMP TABLE tmpcvtr (tmp_type INT, type_id bigint, subject_id bigint, object_id bigint);
    CREATE UNIQUE INDEX u_tmpcvtr ON tmpcvtr(subject_id, object_id);

    INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
        SELECT DISTINCT isa_id, soiterm_id, f.type_id, soiterm_id FROM feature f, cvterm t
        WHERE f.type_id = t.cvterm_id AND f.type_id > 0;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature %',pcount;
--- do it hard way, delete any child feature type from above (NOT IN clause did not work)
    FOR parent IN SELECT DISTINCT 0, t.cvterm_id, 0 FROM feature c, feature_relationship fr, cvterm t
            WHERE t.cvterm_id = c.type_id AND c.feature_id = fr.subject_id LOOP
        DELETE FROM tmpcvtr WHERE type_id = soiterm_id and object_id = soiterm_id
            AND subject_id = parent.subject_id;
    END LOOP;
    EXECUTE 'select * from tmpcvtr where type_id = ' || soiterm_id || ';';
    get diagnostics pcount = row_count;
    raise notice 'all types in feature after delete child %',pcount;

    --- create feature type relationship (store in tmpcvtr)
    CREATE TEMP TABLE tmproot (cv_id bigint not null, cvterm_id bigint not null, status INTEGER DEFAULT 0);
    cquery := 'SELECT * FROM tmproot tmp WHERE tmp.status = 0;';
    ---temp use tmpcvtr to hold instantiated SO relationship for speed
    ---use soterm_id as type_id, will delete from tmpcvtr
    ---us tmproot for this as well
    INSERT INTO tmproot (cv_id, cvterm_id, status) SELECT DISTINCT soi_cvid, c.subject_id, 0 FROM tmpcvtr c
        WHERE c.object_id = soiterm_id;
    EXECUTE cquery;
    GET DIAGNOSTICS pcount = ROW_COUNT;
    WHILE (pcount > 0) LOOP
        RAISE NOTICE 'num child temp (to be inserted) in tmpcvtr: %',pcount;
        INSERT INTO tmpcvtr (tmp_type, type_id, subject_id, object_id)
            SELECT DISTINCT fr.type_id, soiterm_id, c.type_id, p.cvterm_id FROM feature c, feature_relationship fr,
            tmproot p, feature pf, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = pf.feature_id
            AND p.cvterm_id = pf.type_id AND t.cvterm_id = c.type_id AND p.status = 0;
        UPDATE tmproot SET status = 1 WHERE status = 0;
        INSERT INTO tmproot (cv_id, cvterm_id, status)
            SELECT DISTINCT soi_cvid, c.type_id, 0 FROM feature c, feature_relationship fr,
            tmproot tmp, feature p, cvterm t WHERE c.feature_id = fr.subject_id AND fr.object_id = p.feature_id
            AND tmp.cvterm_id = p.type_id AND t.cvterm_id = c.type_id AND tmp.status = 1;
        UPDATE tmproot SET status = 2 WHERE status = 1;
        EXECUTE cquery;
        GET DIAGNOSTICS pcount = ROW_COUNT; 
    END LOOP;
    DELETE FROM tmproot;

    ---get transitive closure for soi
    PERFORM _fill_cvtermpath4soi(soiterm_id, soi_cvid);

    DROP TABLE tmpcvtr;
    DROP TABLE tmproot;

    RETURN 1;
END;
$$;

--
-- Name: feature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature 
    ALTER feature_id TYPE  bigint,
    ALTER dbxref_id TYPE bigint,
    ALTER organism_id TYPE bigint,
    ALTER seqlen TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: feature_disjoint_from(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS feature_disjoint_from(integer);
CREATE OR REPLACE FUNCTION feature_disjoint_from(bigint) RETURNS SETOF feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id = $1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax < y.fmin OR x.fmin > y.fmax ) $_$;

--
-- Name: feature_overlaps(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS feature_overlaps(integer);
CREATE OR REPLACE FUNCTION feature_overlaps(bigint) RETURNS SETOF feature
    LANGUAGE sql
    AS $_$SELECT feature.*
  FROM feature
   INNER JOIN featureloc AS x ON (x.feature_id=feature.feature_id)
   INNER JOIN featureloc AS y ON (y.feature_id = $1)
  WHERE
   x.srcfeature_id = y.srcfeature_id            AND
   ( x.fmax >= y.fmin AND x.fmin <= y.fmax ) $_$;

--
-- Name: featureloc; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE FEATURELOC
    ALTER featureloc_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER srcfeature_id TYPE bigint,
    ALTER fmin TYPE bigint,
    ALTER fmax TYPE bigint;

DROP INDEX IF EXISTS binloc_boxrange_src;
CREATE INDEX binloc_boxrange_src ON featureloc USING RTREE (boxrange(srcfeature_id,fmin, fmax));
  
--
-- Name: featureloc_slice(bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS featureloc_slice(integer, integer);
CREATE OR REPLACE FUNCTION featureloc_slice(bigint, bigint) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * from featureloc where boxquery($1, $2) <@ boxrange(fmin,fmax)$_$;

--
-- Name: featureloc_slice(integer, bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS featureloc_slice(integer, integer, integer);
CREATE OR REPLACE FUNCTION featureloc_slice(integer, bigint, bigint) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * 
   FROM featureloc 
   WHERE boxquery($2, $3) <@ boxrange(fmin,fmax)
   AND srcfeature_id = $1 $_$;

--
-- Name: featureloc_slice(bigint, bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
CREATE OR REPLACE FUNCTION featureloc_slice(bigint, bigint, bigint) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT * 
   FROM featureloc 
   WHERE boxquery($1, $2, $3) && boxrange(srcfeature_id,fmin,fmax)$_$;

--
-- Name: featureloc_slice(character varying, bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS featureloc_slice(character varying, integer, integer);
CREATE OR REPLACE FUNCTION featureloc_slice(character varying, bigint, bigint) RETURNS SETOF featureloc
    LANGUAGE sql
    AS $_$SELECT featureloc.* 
   FROM featureloc 
   INNER JOIN feature AS srcf ON (srcf.feature_id = featureloc.srcfeature_id)
   WHERE boxquery($2, $3) <@ boxrange(fmin,fmax)
   AND srcf.name = $1 $_$;

--
-- Name: cv; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cv ALTER cv_id TYPE bigint;

--
-- Name: cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE cvterm
    ALTER cvterm_id TYPE bigint,
    ALTER cv_id TYPE bigint,
    ALTER dbxref_id TYPE bigint; 

--
-- Name: organism; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE organism
    ALTER organism_id TYPE bigint,
    ADD infraspecific_name character varying(1024),
    ADD type_id bigint;
    
--
-- Name: get_cv_id_for_feature(); Type: FUNCTION; Schema: public; Owner: chado
--

DROP FUNCTION IF EXISTS get_cv_id_for_feature();
CREATE OR REPLACE FUNCTION get_cv_id_for_feature() RETURNS bigint
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='sequence'$$;

--
-- Name: get_cv_id_for_feature_relationsgip(); Type: FUNCTION; Schema: public; Owner: chado
--

DROP FUNCTION IF EXISTS get_cv_id_for_feature_relationsgip();
CREATE OR REPLACE FUNCTION get_cv_id_for_feature_relationsgip() RETURNS bigint
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='relationship'$$;

--
-- Name: get_cv_id_for_featureprop(); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_cv_id_for_featureprop();
CREATE OR REPLACE FUNCTION get_cv_id_for_featureprop() RETURNS bigint
    LANGUAGE sql
    AS $$SELECT cv_id FROM cv WHERE name='feature_property'$$;

--
-- Name: get_cycle_cvterm_id(integer); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_cycle_cvterm_id(integer);
CREATE OR REPLACE FUNCTION get_cycle_cvterm_id(integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id bigint, subject_id bigint, cv_id bigint, type_id bigint, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(root.cvterm_id, root.cv_id);
        IF (rtn > 0) THEN
            DROP TABLE tmpcvtermpath;
            RETURN rtn;
        END IF;
    END LOOP;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$;

--
-- Name: get_cycle_cvterm_id(character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_cycle_cvterm_id(character varying);
CREATE OR REPLACE FUNCTION get_cycle_cvterm_id(character varying) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvname alias for $1;
    cv_id bigint;
    rtn int;
BEGIN

    SELECT INTO cv_id cv.cv_id from cv WHERE cv.name = cvname;
    SELECT INTO rtn  get_cycle_cvterm_id(cv_id);

    RETURN rtn;
END;   
$_$;

--
-- Name: get_cycle_cvterm_id(integer, integer); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_cycle_cvterm_id(integer, integer);
CREATE OR REPLACE FUNCTION get_cycle_cvterm_id(integer, integer) RETURNS integer
    LANGUAGE plpgsql
    AS $_$
DECLARE
    cvid alias for $1;
    rootid alias for $2;
    rtn     int;
BEGIN

    CREATE TEMP TABLE tmpcvtermpath(object_id bigint, subject_id bigint, cv_id bigint, type_id bigint, pathdistance int);
    CREATE INDEX tmp_cvtpath1 ON tmpcvtermpath(object_id, subject_id);

    SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(rootid, cvid);
    IF (rtn > 0) THEN
        DROP TABLE tmpcvtermpath;
        RETURN rtn;
    END IF;
    DROP TABLE tmpcvtermpath;
    RETURN 0;
END;   
$_$;

--
-- Name: get_feature_id(character varying, character varying, character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_feature_id(character varying, character varying, character varying);
CREATE OR REPLACE FUNCTION get_feature_id(character varying, character varying, character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$
  SELECT feature_id 
  FROM feature
  WHERE uniquename=$1
    AND type_id=get_feature_type_id($2)
    AND organism_id=get_organism_id($3)
 $_$;

--
-- Name: get_feature_relationship_type_id(character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_feature_relationship_type_id(character varying);
CREATE OR REPLACE FUNCTION get_feature_relationship_type_id(character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='relationship'
 $_$;

--
-- Name: get_feature_type_id(character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_feature_type_id(character varying);
CREATE OR REPLACE FUNCTION get_feature_type_id(character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$ 
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='sequence'
 $_$;

--
-- Name: get_featureprop_type_id(character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_featureprop_type_id(character varying);
CREATE OR REPLACE FUNCTION get_featureprop_type_id(character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$
  SELECT cvterm_id 
  FROM cv INNER JOIN cvterm USING (cv_id)
  WHERE cvterm.name=$1 AND cv.name='feature_property'
 $_$;
 

--
-- Name: get_organism_id(character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_organism_id(character varying);
CREATE OR REPLACE FUNCTION get_organism_id(character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$ 
SELECT organism_id
  FROM organism
  WHERE genus=substring($1,1,position(' ' IN $1)-1)
    AND species=substring($1,position(' ' IN $1)+1)
 $_$;
 
--
-- Name: get_organism_id(character varying, character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_organism_id(character varying, character varying);
CREATE OR REPLACE FUNCTION get_organism_id(character varying, character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$
  SELECT organism_id 
  FROM organism
  WHERE genus=$1
    AND species=$2
 $_$;
 
--
-- Name: get_organism_id_abbrev(character varying); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS get_organism_id_abbrev(character varying);
CREATE OR REPLACE FUNCTION get_organism_id_abbrev(character varying) RETURNS bigint
    LANGUAGE sql
    AS $_$
SELECT organism_id
  FROM organism
  WHERE substr(genus,1,1)=substring($1,1,1)
    AND species=substring($1,position(' ' IN $1)+1)
 $_$;

--
-- Name: db; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE db ALTER db_id TYPE bigint;

--
-- Name: dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE dbxref
    ALTER dbxref_id TYPE bigint,
    ALTER db_id TYPE bigint,
    ALTER accession TYPE character varying(1024);

--
-- Name: feature_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature_cvterm
    ALTER feature_cvterm_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;
  
--
-- Name: feature_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature_dbxref
    ALTER feature_dbxref_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
  
--
-- Name: TABLE feature_dbxref; Type: COMMENT; Schema: public; Owner: chado
--
COMMENT ON TABLE feature_dbxref IS 'Links a feature to dbxrefs.';

--
-- Name: COLUMN feature_dbxref.is_current; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN feature_dbxref.is_current IS 'True if this secondary dbxref is 
the most up to date accession in the corresponding db. Retired accessions 
should set this field to false';

--
-- Name: feature_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature_pub
    ALTER feature_pub_id TYPE bigint,
    ALTER feature_id  TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: feature_synonym; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature_synonym
    ALTER feature_synonym_id TYPE bigint,
    ALTER synonym_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER pub_id TYPE bigint;
  
--
-- Name: featureprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featureprop
    ALTER featureprop_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE pub
    ALTER pub_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: synonym; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE synonym
    ALTER synonym_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: phylonode_depth(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS phylonode_depth(integer);
CREATE OR REPLACE FUNCTION phylonode_depth(bigint) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$DECLARE  id    ALIAS FOR $1;
  DECLARE  depth FLOAT := 0;
  DECLARE  curr_node phylonode%ROWTYPE;
  BEGIN
   SELECT INTO curr_node *
    FROM phylonode 
    WHERE phylonode_id=id;
   depth = depth + curr_node.distance;
   IF curr_node.parent_phylonode_id IS NULL
    THEN RETURN depth;
    ELSE RETURN depth + phylonode_depth(curr_node.parent_phylonode_id);
   END IF;
 END
$_$;

--
-- Name: phylonode_height(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS phylonode_height(integer);
CREATE OR REPLACE FUNCTION phylonode_height(bigint) RETURNS double precision
    LANGUAGE sql
    AS $_$
  SELECT coalesce(max(phylonode_height(phylonode_id) + distance), 0.0)
    FROM phylonode
    WHERE parent_phylonode_id = $1
$_$;

--
-- Name: subsequence(bigint, bigint, bigint, integer); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence(integer, integer, integer, integer);
CREATE OR REPLACE FUNCTION subsequence(bigint, bigint, bigint, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN $4<0 
   THEN reverse_complement(substring(srcf.residues,CAST(($2+1) as int),CAST(($3-$2) as int)))
   ELSE substring(residues,CAST(($2+1) as int),CAST(($3-$2) as int))
  END AS residues
  FROM feature AS srcf
  WHERE
   srcf.feature_id=$1$_$;

--
-- Name: subsequence_by_feature(bigint, integer, integer); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_feature(integer, integer, integer);
CREATE OR REPLACE FUNCTION subsequence_by_feature(bigint, integer, integer) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN strand<0 
   THEN reverse_complement(substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int)))
   ELSE substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int))
  END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
  WHERE
   featureloc.feature_id=$1 AND
   featureloc.rank=$2 AND
   featureloc.locgroup=$3$_$;

--
-- Name: subsequence_by_feature(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_feature(integer);
CREATE OR REPLACE FUNCTION subsequence_by_feature(bigint) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_feature($1,0,0)$_$;

--
-- Name: subsequence_by_featureloc(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_featureloc(integer);
CREATE OR REPLACE FUNCTION subsequence_by_featureloc(bigint) RETURNS text
    LANGUAGE sql
    AS $_$SELECT 
  CASE WHEN strand<0 
   THEN reverse_complement(substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int)))
   ELSE substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int))
  END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
  WHERE
   featureloc_id=$1$_$;

--
-- Name: subsequence_by_subfeatures(bigint, bigint, integer, integer); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_subfeatures(integer, integer, integer, integer);
CREATE OR REPLACE FUNCTION subsequence_by_subfeatures(bigint, bigint, integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE v_feature_id ALIAS FOR $1;
DECLARE v_rtype_id   ALIAS FOR $2;
DECLARE v_rank       ALIAS FOR $3;
DECLARE v_locgroup   ALIAS FOR $4;
DECLARE subseq       TEXT;
DECLARE seqrow       RECORD;
BEGIN 
  subseq = '';
 FOR seqrow IN
   SELECT
    CASE WHEN strand<0 
     THEN reverse_complement(substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int)))
     ELSE substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int))
    END AS residues
    FROM feature AS srcf
     INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
     INNER JOIN feature_relationship AS fr
       ON (fr.subject_id=featureloc.feature_id)
    WHERE
     fr.object_id=v_feature_id AND
     fr.type_id=v_rtype_id AND
     featureloc.rank=v_rank AND
     featureloc.locgroup=v_locgroup
    ORDER BY fr.rank
  LOOP
   subseq = subseq  || seqrow.residues;
  END LOOP;
 RETURN subseq;
END
$_$;


--
-- Name: subsequence_by_subfeatures(bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_subfeatures(integer);
CREATE OR REPLACE FUNCTION subsequence_by_subfeatures(bigint) RETURNS text
    LANGUAGE sql
    AS $_$
SELECT subsequence_by_subfeatures($1,get_feature_relationship_type_id('part_of'),0,0)
$_$;

--
-- Name: subsequence_by_subfeatures(bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_subfeatures(integer, integer);
CREATE OR REPLACE FUNCTION subsequence_by_subfeatures(bigint, bigint) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_subfeatures($1,$2,0,0)$_$;


--
-- Name: subsequence_by_typed_subfeatures(bigint, bigint, integer, integer); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_typed_subfeatures(integer, integer, integer, integer);
CREATE OR REPLACE FUNCTION subsequence_by_typed_subfeatures(bigint, bigint, integer, integer) RETURNS text
    LANGUAGE plpgsql
    AS $_$
DECLARE v_feature_id ALIAS FOR $1;
DECLARE v_ftype_id   ALIAS FOR $2;
DECLARE v_rank       ALIAS FOR $3;
DECLARE v_locgroup   ALIAS FOR $4;
DECLARE subseq       TEXT;
DECLARE seqrow       RECORD;
BEGIN 
  subseq = '';
 FOR seqrow IN
   SELECT
    CASE WHEN strand<0 
     THEN reverse_complement(substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int)))
     ELSE substring(srcf.residues,CAST(fmin+1 as int),CAST((fmax-fmin) as int))
    END AS residues
  FROM feature AS srcf
   INNER JOIN featureloc ON (srcf.feature_id=featureloc.srcfeature_id)
   INNER JOIN feature AS subf ON (subf.feature_id=featureloc.feature_id)
   INNER JOIN feature_relationship AS fr ON (fr.subject_id=subf.feature_id)
  WHERE
     fr.object_id=v_feature_id AND
     subf.type_id=v_ftype_id AND
     featureloc.rank=v_rank AND
     featureloc.locgroup=v_locgroup
  ORDER BY fr.rank
   LOOP
   subseq = subseq  || seqrow.residues;
  END LOOP;
 RETURN subseq;
END
$_$;

--
-- Name: subsequence_by_typed_subfeatures(bigint, bigint); Type: FUNCTION; Schema: public; Owner: chado
--
DROP FUNCTION IF EXISTS subsequence_by_typed_subfeatures(integer, integer);
CREATE OR REPLACE FUNCTION subsequence_by_typed_subfeatures(bigint, bigint) RETURNS text
    LANGUAGE sql
    AS $_$SELECT subsequence_by_typed_subfeatures($1,$2,0,0)$_$;
    
--
-- Name: acquisition; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE acquisition
    ALTER acquisition_id TYPE bigint,
    ALTER assay_id TYPE bigint,
    ALTER protocol_id TYPE bigint,
    ALTER channel_id TYPE bigint;
  
--
-- Name: acquisition_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE acquisition_relationship 
    ALTER acquisition_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER object_id TYPE bigint;

--
-- Name: acquisitionprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE acquisitionprop 
    ALTER acquisitionprop_id TYPE bigint,
    ALTER acquisition_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: analysis; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE analysis ALTER analysis_id TYPE bigint;

--
-- Name: analysis_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS analysis_cvterm (
    analysis_cvterm_id bigint NOT NULL,
    analysis_id bigint NOT NULL,
    cvterm_id bigint NOT NULL,
    is_not boolean DEFAULT false NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE analysis_cvterm; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE analysis_cvterm IS 'Associate a term from a cv with an analysis.';


--
-- Name: COLUMN analysis_cvterm.is_not; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_cvterm.is_not IS 'If this is set to true, then this 
annotation is interpreted as a NEGATIVE annotation - i.e. the analysis does 
NOT have the specified term.';


--
-- Name: analysis_cvterm_analysis_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE analysis_cvterm_analysis_cvterm_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: analysis_cvterm_analysis_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE analysis_cvterm_analysis_cvterm_id_seq OWNED BY analysis_cvterm.analysis_cvterm_id;


--
-- Name: analysis_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS analysis_dbxref (
    analysis_dbxref_id bigint NOT NULL,
    analysis_id bigint NOT NULL,
    dbxref_id bigint NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);


--
-- Name: TABLE analysis_dbxref; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE analysis_dbxref IS 'Links an analysis to dbxrefs.';


--
-- Name: COLUMN analysis_dbxref.is_current; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_dbxref.is_current IS 'True if this dbxref 
is the most up to date accession in the corresponding db. Retired 
accessions should set this field to false';


--
-- Name: analysis_dbxref_analysis_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE analysis_dbxref_analysis_dbxref_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: analysis_dbxref_analysis_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE analysis_dbxref_analysis_dbxref_id_seq OWNED BY analysis_dbxref.analysis_dbxref_id;


--
-- Name: analysis_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS analysis_pub (
    analysis_pub_id bigint NOT NULL,
    analysis_id bigint NOT NULL,
    pub_id bigint NOT NULL
);



--
-- Name: TABLE analysis_pub; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE analysis_pub IS 'Provenance. Linking table between analyses and the publications that mention them.';


--
-- Name: analysis_pub_analysis_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE analysis_pub_analysis_pub_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;



--
-- Name: analysis_pub_analysis_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE analysis_pub_analysis_pub_id_seq OWNED BY analysis_pub.analysis_pub_id;


--
-- Name: analysis_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS analysis_relationship (
    analysis_relationship_id bigint NOT NULL,
    subject_id bigint NOT NULL,
    object_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: COLUMN analysis_relationship.subject_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_relationship.subject_id IS 'analysis_relationship.subject_id i
s the subject of the subj-predicate-obj sentence.';


--
-- Name: COLUMN analysis_relationship.object_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_relationship.object_id IS 'analysis_relationship.object_id 
is the object of the subj-predicate-obj sentence.';


--
-- Name: COLUMN analysis_relationship.type_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_relationship.type_id IS 'analysis_relationship.type_id 
is relationship type between subject and object. This is a cvterm, typically 
from the OBO relationship ontology, although other relationship types are allowed.';


--
-- Name: COLUMN analysis_relationship.value; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_relationship.value IS 'analysis_relationship.value 
is for additional notes or comments.';


--
-- Name: COLUMN analysis_relationship.rank; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN analysis_relationship.rank IS 'analysis_relationship.rank is 
the ordering of subject analysiss with respect to the object analysis may be 
important where rank is used to order these; starts from zero.';


--
-- Name: analysis_relationship_analysis_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE analysis_relationship_analysis_relationship_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: analysis_relationship_analysis_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE analysis_relationship_analysis_relationship_id_seq OWNED BY analysis_relationship.analysis_relationship_id;

--
-- Name: analysisfeature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE analysisfeature 
    ALTER analysisfeature_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER analysis_id TYPE bigint;
  
--
-- Name: analysisfeatureprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE analysisfeatureprop 
    ALTER analysisfeatureprop_id TYPE bigint,
    ALTER analysisfeature_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: analysisprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE analysisprop 
    ALTER analysisprop_id TYPE bigint,
    ALTER analysis_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: arraydesign; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE arraydesign
    ALTER arraydesign_id TYPE bigint,
    ALTER manufacturer_id TYPE bigint,
    ALTER platformtype_id TYPE bigint,
    ALTER substratetype_id TYPE bigint,
    ALTER protocol_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
  
  
--
-- Name: arraydesignprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE arraydesignprop 
    ALTER arraydesignprop_id TYPE bigint,
    ALTER arraydesign_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
  
--
-- Name: assay; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE assay 
    ALTER assay_id TYPE bigint,
    ALTER arraydesign_id TYPE bigint,
    ALTER protocol_id TYPE bigint,
    ALTER operator_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
  
--
-- Name: assay_biomaterial; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE assay_biomaterial
    ALTER assay_biomaterial_id TYPE bigint,
    ALTER assay_id TYPE bigint,
    ALTER biomaterial_id TYPE bigint,
    ALTER channel_id TYPE bigint;
  
--
-- Name: assay_project; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE assay_project
    ALTER assay_project_id TYPE bigint,
    ALTER assay_id TYPE bigint,
    ALTER project_id TYPE bigint;
  
--
-- Name: assayprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE assayprop 
    ALTER assayprop_id TYPE bigint,
    ALTER assay_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: biomaterial; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE biomaterial
    ALTER biomaterial_id TYPE bigint,
    ALTER taxon_id TYPE bigint,
    ALTER biosourceprovider_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: biomaterial_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE biomaterial_dbxref
    ALTER biomaterial_dbxref_id TYPE bigint,
    ALTER biomaterial_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
  
--
-- Name: biomaterial_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE biomaterial_dbxref
    ALTER biomaterial_dbxref_id TYPE bigint,
    ALTER biomaterial_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: biomaterial_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE biomaterial_relationship 
    ALTER biomaterial_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER object_id TYPE bigint;

--
-- Name: biomaterial_treatment; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE biomaterial_treatment 
    ALTER biomaterial_treatment_id TYPE bigint,
    ALTER biomaterial_id TYPE bigint,
    ALTER treatment_id TYPE bigint,
    ALTER unittype_id TYPE bigint;
  
--
-- Name: biomaterialprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE biomaterialprop 
    ALTER biomaterialprop_id TYPE bigint,
    ALTER biomaterial_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: cell_line; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line
    ALTER cell_line_id TYPE bigint,
    ALTER organism_id TYPE bigint;
  
--
-- Name: cell_line_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_cvterm 
    ALTER cell_line_cvterm_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;
  
--
-- Name: cell_line_cvtermprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_cvtermprop
    ALTER cell_line_cvtermprop_id TYPE bigint,
    ALTER cell_line_cvterm_id TYPE bigint,
    ALTER type_id TYPE bigint;
  
--
-- Name: cell_line_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_dbxref
    ALTER cell_line_dbxref_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
--
-- Name: cell_line_feature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_feature
    ALTER cell_line_feature_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: cell_line_library; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_library
    ALTER cell_line_library_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: cell_line_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_pub 
    ALTER cell_line_pub_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: cell_line_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_relationship
    ALTER cell_line_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: cell_line_synonym; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_line_synonym
    ALTER cell_line_synonym_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER synonym_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: cell_lineprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_lineprop
    ALTER cell_lineprop_id TYPE bigint,
    ALTER cell_line_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: cell_lineprop_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cell_lineprop_pub
    ALTER cell_lineprop_pub_id TYPE bigint,
    ALTER cell_lineprop_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: chadoprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE chadoprop 
    ALTER chadoprop_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: channel; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE channel ALTER channel_id TYPE bigint;

--
-- Name: contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE contact 
    ALTER contact_id TYPE bigint,
    ALTER type_id TYPE bigint;


--
-- Name: contact_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE contact_relationship 
    ALTER contact_relationship_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint;

--
-- Name: contactprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS contactprop (
    contactprop_id bigint NOT NULL,
    contact_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE contactprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE contactprop IS 'A contact can have any number of slot-value property 
tags attached to it. This is an alternative to hardcoding a list of columns in the 
relational schema, and is completely extensible.';


--
-- Name: contactprop_contactprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE contactprop_contactprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: contactprop_contactprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE contactprop_contactprop_id_seq OWNED BY contactprop.contactprop_id;

--
-- Name: control; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE control 
    ALTER control_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER assay_id TYPE bigint,
    ALTER tableinfo_id TYPE bigint;

--
-- Name: cvterm_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cvterm_relationship
    ALTER cvterm_relationship_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint;
    
--
-- Name: cvprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cvprop 
    ALTER cvprop_id TYPE bigint,
    ALTER cv_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: cvterm_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cvterm_dbxref 
    ALTER cvterm_dbxref_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: cvtermprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cvtermprop
    ALTER cvtermprop_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: cvtermsynonym; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE cvtermsynonym
    ALTER cvtermsynonym_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: dbprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS dbprop (
    dbprop_id bigint NOT NULL,
    db_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE dbprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE dbprop IS 'An external database can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, dbprop_c1, for
the combination of db_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: dbprop_dbprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE dbprop_dbprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: dbprop_dbprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE dbprop_dbprop_id_seq OWNED BY dbprop.dbprop_id;

--
-- Name: dbxrefprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE dbxrefprop
    ALTER dbxrefprop_id TYPE bigint,
    ALTER dbxref_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: eimage; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE eimage ALTER eimage_id TYPE bigint;

--
-- Name: element; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE element
    ALTER element_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER arraydesign_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
--
-- Name: element_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE element_relationship
    ALTER element_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER object_id TYPE bigint;
    
--
-- Name: elementresult; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE elementresult 
    ALTER elementresult_id TYPE bigint,
    ALTER element_id TYPE bigint,
    ALTER quantification_id TYPE bigint;
    
--
-- Name: elementresult_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE elementresult_relationship
    ALTER elementresult_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER object_id TYPE bigint;

--
-- Name: environment; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE environment ALTER environment_id TYPE bigint;


--
-- Name: environment_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE environment_cvterm
    ALTER environment_cvterm_id TYPE bigint,
    ALTER environment_id TYPE bigint,
    ALTER cvterm_id TYPE bigint;
    
--
-- Name: expression; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE expression ALTER expression_id TYPE bigint;

--
-- Name: expression_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE expression_cvterm 
    ALTER expression_cvterm_id TYPE bigint,
    ALTER expression_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER cvterm_type_id TYPE bigint;
    
--
-- Name: expression_cvtermprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE expression_cvtermprop 
    ALTER expression_cvtermprop_id TYPE bigint,
    ALTER expression_cvterm_id type bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: expression_image; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE expression_image 
    ALTER expression_image_id TYPE bigint,
    ALTER expression_id TYPE bigint,
    ALTER eimage_id TYPE bigint;
    
--
-- Name: expression_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE expression_pub
    ALTER expression_pub_id TYPE bigint,
    ALTER expression_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: expressionprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE expressionprop 
    ALTER expressionprop_id TYPE bigint,
    ALTER expression_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: feature_contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS feature_contact (
    feature_contact_id bigint NOT NULL,
    feature_id bigint NOT NULL,
    contact_id bigint NOT NULL
);

--
-- Name: TABLE feature_contact; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE feature_contact IS 'Links contact(s) with a feature.  Used to indicate a particular 
person or organization responsible for discovery or that can provide more information on a particular feature.';


--
-- Name: feature_contact_feature_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE feature_contact_feature_contact_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: feature_contact_feature_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE feature_contact_feature_contact_id_seq OWNED BY feature_contact.feature_contact_id;

--
-- Name: feature_cvterm_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_cvterm_dbxref 
    ALTER feature_cvterm_dbxref_id TYPE bigint,
    ALTER feature_cvterm_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
    
--
-- Name: feature_cvterm_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_cvterm_pub 
    ALTER feature_cvterm_pub_id TYPE bigint,
    ALTER feature_cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: feature_cvtermprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_cvtermprop 
    ALTER feature_cvtermprop_id TYPE bigint,
    ALTER feature_cvterm_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: feature_expression; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_expression 
    ALTER feature_expression_id TYPE bigint,
    ALTER expression_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    

--
-- Name: feature_expressionprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_expressionprop 
    ALTER feature_expressionprop_id TYPE bigint,
    ALTER feature_expression_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: feature_genotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_genotype
    ALTER feature_genotype_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER genotype_id TYPE bigint,
    ALTER chromosome_id TYPE bigint,
    ALTER cvterm_id TYPE bigint;

--
-- Name: feature_phenotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_phenotype
    ALTER feature_phenotype_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER phenotype_id TYPE bigint;
    
--
-- Name: TABLE feature_phenotype; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE feature_phenotype IS 'Linking table between features and phenotypes.';

--
-- Name: feature_pubprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_pubprop
    ALTER feature_pubprop_id TYPE bigint,
    ALTER feature_pub_id TYPE bigint,
    ALTER type_id TYPE bigint ;

--
-- Name: feature_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_relationship
    ALTER feature_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: feature_relationship_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_relationship_pub 
    ALTER feature_relationship_pub_id TYPE bigint,
    ALTER feature_relationship_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: feature_relationshipprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_relationshipprop 
    ALTER feature_relationshipprop_id TYPE bigint,
    ALTER feature_relationship_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: feature_relationshipprop_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE feature_relationshipprop_pub 
    ALTER feature_relationshipprop_pub_id TYPE bigint,
    ALTER feature_relationshipprop_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: featureloc_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE featureloc_pub 
    ALTER featureloc_pub_id TYPE bigint,
    ALTER featureloc_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: featuremap; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE featuremap 
    ALTER featuremap_id TYPE bigint,
    ALTER unittype_id TYPE bigint;

--
-- Name: featuremap_contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS featuremap_contact (
    featuremap_contact_id bigint NOT NULL,
    featuremap_id bigint NOT NULL,
    contact_id bigint NOT NULL
);

--
-- Name: TABLE featuremap_contact; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE featuremap_contact IS 'Links contact(s) with a featuremap.  Used to 
indicate a particular person or organization responsible for constrution of or 
that can provide more information on a particular featuremap.';


--
-- Name: featuremap_contact_featuremap_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE featuremap_contact_featuremap_contact_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: featuremap_contact_featuremap_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE featuremap_contact_featuremap_contact_id_seq OWNED BY featuremap_contact.featuremap_contact_id;


--
-- Name: featuremap_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS featuremap_dbxref (
    featuremap_dbxref_id bigint NOT NULL,
    featuremap_id bigint NOT NULL,
    dbxref_id bigint NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);

--
-- Name: featuremap_dbxref_featuremap_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE featuremap_dbxref_featuremap_dbxref_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: featuremap_dbxref_featuremap_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE featuremap_dbxref_featuremap_dbxref_id_seq OWNED BY featuremap_dbxref.featuremap_dbxref_id;

--
-- Name: featuremap_organism; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS featuremap_organism (
    featuremap_organism_id bigint NOT NULL,
    featuremap_id bigint NOT NULL,
    organism_id bigint NOT NULL
);


--
-- Name: TABLE featuremap_organism; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE featuremap_organism IS 'Links a featuremap to the organism(s) with which it is associated.';


--
-- Name: featuremap_organism_featuremap_organism_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE featuremap_organism_featuremap_organism_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: featuremap_organism_featuremap_organism_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE featuremap_organism_featuremap_organism_id_seq OWNED BY featuremap_organism.featuremap_organism_id;

--
-- Name: featuremap_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE featuremap_pub 
    ALTER featuremap_pub_id TYPE bigint,
    ALTER featuremap_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: featuremapprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS featuremapprop (
    featuremapprop_id bigint NOT NULL,
    featuremap_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE featuremapprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE featuremapprop IS 'A featuremap can have any number of slot-value property 
tags attached to it. This is an alternative to hardcoding a list of columns in the 
relational schema, and is completely extensible.';


--
-- Name: featuremapprop_featuremapprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE featuremapprop_featuremapprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: featuremapprop_featuremapprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE featuremapprop_featuremapprop_id_seq OWNED BY featuremapprop.featuremapprop_id;

--
-- Name: featurepos; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE featurepos 
    ALTER featurepos_id TYPE bigint,
    ALTER featuremap_id TYPE bigint,
    ALTER featuremap_id DROP DEFAULT,
    ALTER feature_id TYPE bigint,
    ALTER map_feature_id TYPE bigint;

DROP SEQUENCE featurepos_featuremap_id_seq;
    
--
-- Name: featureposprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS featureposprop (
    featureposprop_id bigint NOT NULL,
    featurepos_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE featureposprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE featureposprop IS 'Property or attribute of a featurepos record.';

--
-- Name: featureposprop_featureposprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE featureposprop_featureposprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: featureposprop_featureposprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE featureposprop_featureposprop_id_seq OWNED BY featureposprop.featureposprop_id;

--
-- Name: featureprop_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE featureprop_pub 
    ALTER featureprop_pub_id TYPE bigint,
    ALTER featureprop_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: featurerange; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE featurerange 
    ALTER featurerange_id TYPE bigint,
    ALTER featuremap_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER leftstartf_id TYPE bigint,
    ALTER leftendf_id TYPE bigint,
    ALTER rightstartf_id TYPE bigint,
    ALTER rightendf_id TYPE bigint;
    
--
-- Name: genotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE genotype 
    ALTER genotype_id TYPE bigint,
    ALTER description TYPE text,
    ALTER type_id TYPE bigint;

--
-- Name: genotypeprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE genotypeprop 
    ALTER genotypeprop_id TYPE bigint,
    ALTER genotype_id TYPE bigint,
    ALTER type_id TYPE bigint;


--
-- Name: library; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE library 
    ALTER library_id TYPE bigint,
    ALTER organism_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: COLUMN library.type_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN library.type_id IS 'The type_id foreign key links to a controlled vocabulary of library types. Examples of this would be: "cDNA_library" or "genomic_library"';

--
-- Name: library_contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS library_contact (
    library_contact_id bigint NOT NULL,
    library_id bigint NOT NULL,
    contact_id bigint NOT NULL
);

--
-- Name: TABLE library_contact; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_contact IS 'Links contact(s) with a library.  Used to indicate a particular person or organization responsible for creation of or that can provide more information on a particular library.';


--
-- Name: library_contact_library_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE library_contact_library_contact_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: library_contact_library_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE library_contact_library_contact_id_seq OWNED BY library_contact.library_contact_id;

--
-- Name: library_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE library_cvterm 
    ALTER library_cvterm_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: library_dbxref; Type: TABLE; Schema: public; Owner: -; Tablespace: 
--

ALTER TABLE library_dbxref
    ALTER library_dbxref_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: TABLE library_dbxref; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_dbxref IS 'Links a library to dbxrefs.';

--
-- Name: library_expression; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS library_expression (
    library_expression_id bigint NOT NULL,
    library_id bigint NOT NULL,
    expression_id bigint NOT NULL,
    pub_id bigint NOT NULL
);

--
-- Name: TABLE library_expression; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_expression IS 'Links a library to expression statements.';


--
-- Name: library_expression_library_expression_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE library_expression_library_expression_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: library_expression_library_expression_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE library_expression_library_expression_id_seq OWNED BY library_expression.library_expression_id;


--
-- Name: library_expressionprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS library_expressionprop (
    library_expressionprop_id bigint NOT NULL,
    library_expression_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE library_expressionprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_expressionprop IS 'Attributes of a library_expression relationship.';


--
-- Name: library_expressionprop_library_expressionprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE library_expressionprop_library_expressionprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: library_expressionprop_library_expressionprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE library_expressionprop_library_expressionprop_id_seq OWNED BY library_expressionprop.library_expressionprop_id;

--
-- Name: library_feature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE library_feature
    ALTER library_feature_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER feature_id TYPE bigint;

--
-- Name: library_featureprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS library_featureprop (
    library_featureprop_id bigint NOT NULL,
    library_feature_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE library_featureprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_featureprop IS 'Attributes of a library_feature relationship.';


--
-- Name: library_featureprop_library_featureprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE library_featureprop_library_featureprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: library_featureprop_library_featureprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE library_featureprop_library_featureprop_id_seq OWNED BY library_featureprop.library_featureprop_id;

--
-- Name: library_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE library_pub
    ALTER library_pub_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: TABLE library_pub; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_pub IS 'Attribution for a library.';

--
-- Name: library_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS library_relationship (
    library_relationship_id bigint NOT NULL,
    subject_id bigint NOT NULL,
    object_id bigint NOT NULL,
    type_id bigint NOT NULL
);


--
-- Name: TABLE library_relationship; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_relationship IS 'Relationships between libraries.';


--
-- Name: library_relationship_library_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE library_relationship_library_relationship_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: library_relationship_library_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE library_relationship_library_relationship_id_seq OWNED BY library_relationship.library_relationship_id;


--
-- Name: library_relationship_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS library_relationship_pub (
    library_relationship_pub_id bigint NOT NULL,
    library_relationship_id bigint NOT NULL,
    pub_id bigint NOT NULL
);

--
-- Name: TABLE library_relationship_pub; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_relationship_pub IS 'Provenance of library_relationship.';


--
-- Name: library_relationship_pub_library_relationship_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE library_relationship_pub_library_relationship_pub_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: library_relationship_pub_library_relationship_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE library_relationship_pub_library_relationship_pub_id_seq OWNED BY library_relationship_pub.library_relationship_pub_id;


--
-- Name: library_synonym; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE library_synonym
    ALTER library_synonym_id TYPE bigint,
    ALTER synonym_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: TABLE library_synonym; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE library_synonym IS 'Linking table between library and synonym.';


--
-- Name: libraryprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE libraryprop
    ALTER libraryprop_id TYPE bigint,
    ALTER library_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: TABLE libraryprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE libraryprop IS 'Tag-value properties - follows standard chado model.';

--
-- Name: libraryprop_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE libraryprop_pub 
    ALTER libraryprop_pub_id TYPE bigint,
    ALTER libraryprop_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: TABLE libraryprop_pub; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE libraryprop_pub IS 'Attribution for libraryprop.';

--
-- Name: magedocumentation; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE magedocumentation 
    ALTER magedocumentation_id TYPE bigint,
    ALTER mageml_id TYPE bigint,
    ALTER tableinfo_id TYPE bigint;

--
-- Name: mageml; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE mageml ALTER mageml_id TYPE bigint;

--
-- Name: nd_experiment; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment
    ALTER nd_experiment_id TYPE bigint,
    ALTER nd_geolocation_id TYPE bigint,
    ALTER type_id TYPE bigint;

    --
-- Name: TABLE nd_experiment; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE nd_experiment IS 'This is the core table for the natural diversity module, 
representing each individual assay that is undertaken (this is usually *not* an 
entire experiment). Each nd_experiment should give rise to a single genotype or 
phenotype and be described via 1 (or more) protocols. Collections of assays that 
relate to each other should be linked to the same record in the project table.';


--
-- Name: nd_experiment_analysis; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS nd_experiment_analysis (
    nd_experiment_analysis_id bigint NOT NULL,
    nd_experiment_id bigint NOT NULL,
    analysis_id bigint NOT NULL,
    type_id bigint
);

--
-- Name: TABLE nd_experiment_analysis; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE nd_experiment_analysis IS 'An analysis that is used in an experiment';


--
-- Name: nd_experiment_analysis_nd_experiment_analysis_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE nd_experiment_analysis_nd_experiment_analysis_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: nd_experiment_analysis_nd_experiment_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE nd_experiment_analysis_nd_experiment_analysis_id_seq OWNED BY nd_experiment_analysis.nd_experiment_analysis_id;


--
-- Name: nd_experiment_contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_contact 
    ALTER nd_experiment_contact_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER contact_id TYPE bigint;

--
-- Name: nd_experiment_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_dbxref
    ALTER nd_experiment_dbxref_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
--
-- Name: nd_experiment_genotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_genotype
    ALTER nd_experiment_genotype_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER genotype_id TYPE bigint;
    
--
-- Name: nd_experiment_phenotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_phenotype
    ALTER nd_experiment_phenotype_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER phenotype_id TYPE bigint;
    
--
-- Name: nd_experiment_project; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_project
    ALTER nd_experiment_project_id TYPE bigint,
    ALTER project_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint;
    
--
-- Name: TABLE nd_experiment_project; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE nd_experiment_project IS 'Used to group together related nd_experiment records. All nd_experiments 
should be linked to at least one project.';

--
-- Name: nd_experiment_protocol; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_protocol 
    ALTER nd_experiment_protocol_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER nd_protocol_id TYPE bigint;

--
-- Name: nd_experiment_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_pub
    ALTER nd_experiment_pub_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: nd_experiment_stock; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_stock
    ALTER nd_experiment_stock_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER stock_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: nd_experiment_stock_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_stock_dbxref 
    ALTER nd_experiment_stock_dbxref_id TYPE bigint,
    ALTER nd_experiment_stock_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
--
-- Name: nd_experiment_stockprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experiment_stockprop 
    ALTER nd_experiment_stockprop_id TYPE bigint,
    ALTER nd_experiment_stock_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: nd_experimentprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_experimentprop 
    ALTER nd_experimentprop_id TYPE bigint,
    ALTER nd_experiment_id TYPE bigint,
    ALTER type_id TYPE bigint;

 --
-- Name: TABLE nd_experimentprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE nd_experimentprop IS 'An nd_experiment can have any number of
slot-value property tags attached to it. This is an alternative to
hardcoding a list of columns in the relational schema, and is
completely extensible. There is a unique constraint, stockprop_c1, for
the combination of stock_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';

--
-- Name: nd_geolocation; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_geolocation
    ALTER nd_geolocation_id TYPE bigint,
    ALTER description TYPE text;
  
  --
-- Name: nd_geolocationprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_geolocationprop 
    ALTER nd_geolocationprop_id TYPE bigint,
    ALTER nd_geolocation_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
   --
-- Name: nd_protocol; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_protocol 
    ALTER nd_protocol_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: nd_protocol_reagent; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_protocol_reagent
    ALTER nd_protocol_reagent_id TYPE bigint,
    ALTER nd_protocol_id TYPE bigint,
    ALTER reagent_id TYPE bigint,
    ALTER type_id TYPE bigint; 
    
--
-- Name: nd_protocolprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_protocolprop
    ALTER nd_protocolprop_id TYPE bigint,
    ALTER nd_protocol_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: nd_reagent; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_reagent
    ALTER nd_reagent_id TYPE bigint,
    ALTER type_id TYPE bigint ,
    ALTER feature_id TYPE bigint;

--
-- Name: nd_reagent_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_reagent_relationship
    ALTER nd_reagent_relationship_id TYPE bigint,
    ALTER subject_reagent_id TYPE bigint,
    ALTER object_reagent_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: nd_reagentprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE nd_reagentprop
    ALTER nd_reagentprop_id TYPE bigint,
    ALTER nd_reagent_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: COLUMN organism.infraspecific_name; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN organism.infraspecific_name IS 'The scientific name for any taxon 
below the rank of species.  The rank should be specified using the type_id field
and the name is provided here.';


--
-- Name: COLUMN organism.type_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN organism.type_id IS 'A controlled vocabulary term that
specifies the organism rank below species. It is used when an infraspecific 
name is provided.  Ideally, the rank should be a valid ICN name such as 
subspecies, varietas, subvarietas, forma and subforma';


--
-- Name: organism_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS organism_cvterm (
    organism_cvterm_id bigint NOT NULL,
    organism_id bigint NOT NULL,
    cvterm_id bigint NOT NULL,
    rank integer DEFAULT 0 NOT NULL,
    pub_id bigint NOT NULL
);

--
-- Name: TABLE organism_cvterm; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE organism_cvterm IS 'organism to cvterm associations. Examples: taxonomic name';


--
-- Name: COLUMN organism_cvterm.rank; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN organism_cvterm.rank IS 'Property-Value
ordering. Any organism_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used';


--
-- Name: organism_cvterm_organism_cvterm_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE organism_cvterm_organism_cvterm_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: organism_cvterm_organism_cvterm_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE organism_cvterm_organism_cvterm_id_seq OWNED BY organism_cvterm.organism_cvterm_id;


--
-- Name: organism_cvtermprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS organism_cvtermprop (
    organism_cvtermprop_id bigint NOT NULL,
    organism_cvterm_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE organism_cvtermprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE organism_cvtermprop IS 'Extensible properties for
organism to cvterm associations. Examples: qualifiers';


--
-- Name: COLUMN organism_cvtermprop.type_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN organism_cvtermprop.type_id IS 'The name of the
property/slot is a cvterm. The meaning of the property is defined in
that cvterm. ';


--
-- Name: COLUMN organism_cvtermprop.value; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN organism_cvtermprop.value IS 'The value of the
property, represented as text. Numeric values are converted to their
text representation. This is less efficient than using native database
types, but is easier to query.';


--
-- Name: COLUMN organism_cvtermprop.rank; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN organism_cvtermprop.rank IS 'Property-Value
ordering. Any organism_cvterm can have multiple values for any particular
property type - these are ordered in a list using rank, counting from
zero. For properties that are single-valued rather than multi-valued,
the default 0 value should be used';


--
-- Name: organism_cvtermprop_organism_cvtermprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE organism_cvtermprop_organism_cvtermprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: organism_cvtermprop_organism_cvtermprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE organism_cvtermprop_organism_cvtermprop_id_seq OWNED BY organism_cvtermprop.organism_cvtermprop_id;

--
-- Name: organism_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE organism_dbxref
    ALTER organism_dbxref_id TYPE bigint,
    ALTER organism_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
--
-- Name: TABLE organism_dbxref; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE organism_dbxref IS 'Links an organism to a dbxref.';


--
-- Name: organism_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS organism_pub (
    organism_pub_id bigint NOT NULL,
    organism_id bigint NOT NULL,
    pub_id bigint NOT NULL
);

--
-- Name: TABLE organism_pub; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE organism_pub IS 'Attribution for organism.';


--
-- Name: organism_pub_organism_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE organism_pub_organism_pub_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: organism_pub_organism_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE organism_pub_organism_pub_id_seq OWNED BY organism_pub.organism_pub_id;


--
-- Name: organism_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS organism_relationship (
    organism_relationship_id bigint NOT NULL,
    subject_id bigint NOT NULL,
    object_id bigint NOT NULL,
    type_id bigint NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE organism_relationship; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE organism_relationship IS 'Specifies relationships between organisms 
that are not taxonomic. For example, in breeding, relationships such as 
"sterile_with", "incompatible_with", or "fertile_with" would be appropriate. Taxonomic
relatinoships should be housed in the phylogeny tables.';


--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE organism_relationship_organism_relationship_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: organism_relationship_organism_relationship_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE organism_relationship_organism_relationship_id_seq OWNED BY organism_relationship.organism_relationship_id;

--
-- Name: organismprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE organismprop
    ALTER organismprop_id TYPE bigint,
    ALTER organism_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: organismprop_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS organismprop_pub (
    organismprop_pub_id bigint NOT NULL,
    organismprop_id bigint NOT NULL,
    pub_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);

--
-- Name: TABLE organismprop_pub; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE organismprop_pub IS 'Attribution for organismprop.';


--
-- Name: organismprop_pub_organismprop_pub_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE organismprop_pub_organismprop_pub_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: organismprop_pub_organismprop_pub_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE organismprop_pub_organismprop_pub_id_seq OWNED BY organismprop_pub.organismprop_pub_id;

--
-- Name: phendesc; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phendesc 
    ALTER phendesc_id TYPE bigint,
    ALTER genotype_id TYPE bigint,
    ALTER environment_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: phenotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phenotype 
    ALTER phenotype_id TYPE bigint,
    ALTER observable_id TYPE bigint,
    ALTER attr_id TYPE bigint,
    ALTER cvalue_id TYPE bigint,
    ALTER assay_id TYPE bigint;
    
--
-- Name: phenotype_comparison; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phenotype_comparison
    ALTER phenotype_comparison_id TYPE bigint,
    ALTER genotype1_id TYPE bigint,
    ALTER environment1_id TYPE bigint,
    ALTER genotype2_id TYPE bigint,
    ALTER environment2_id TYPE bigint,
    ALTER phenotype1_id TYPE bigint,
    ALTER phenotype2_id TYPE bigint,
    ALTER pub_id TYPE bigint,
    ALTER organism_id TYPE bigint;
    
--
-- Name: phenotype_comparison_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phenotype_comparison_cvterm 
    ALTER phenotype_comparison_cvterm_id TYPE bigint,
    ALTER phenotype_comparison_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: phenotype_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phenotype_cvterm
    ALTER phenotype_cvterm_id TYPE bigint,
    ALTER phenotype_id TYPE bigint,
    ALTER cvterm_id TYPE bigint;

--
-- Name: TABLE phenotype_cvterm; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE phenotype_cvterm IS 'phenotype to cvterm associations.';

--
-- Name: phenotypeprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS phenotypeprop (
    phenotypeprop_id bigint NOT NULL,
    phenotype_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE phenotypeprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE phenotypeprop IS 'A phenotype can have any number of slot-value property tags attached to it. This is an alternative to hardcoding a list of columns in the relational schema, and is completely extensible. There is a unique constraint, phenotypeprop_c1, for the combination of phenotype_id, rank, and type_id. Multivalued property-value pairs must be differentiated by rank.';


--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE phenotypeprop_phenotypeprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: phenotypeprop_phenotypeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE phenotypeprop_phenotypeprop_id_seq OWNED BY phenotypeprop.phenotypeprop_id;

--
-- Name: phenstatement; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phenstatement 
    ALTER phenstatement_id TYPE bigint,
    ALTER genotype_id TYPE bigint,
    ALTER environment_id TYPE bigint,
    ALTER phenotype_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: phylonode; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylonode
    ALTER phylonode_id TYPE bigint,
    ALTER phylotree_id TYPE bigint,
    ALTER parent_phylonode_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER feature_id TYPE bigint;

--
-- Name: phylonode_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylonode_dbxref 
    ALTER phylonode_dbxref_id TYPE bigint,
    ALTER phylonode_id TYPE bigint,
    ALTER dbxref_id TYPE biginT;
    
--
-- Name: phylonode_organism; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylonode_organism 
    ALTER phylonode_organism_id TYPE bigint,
    ALTER phylonode_id TYPE bigint,
    ALTER organism_id TYPE bigint;

--
-- Name: phylonode_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylonode_pub 
    ALTER phylonode_pub_id TYPE bigint,
    ALTER phylonode_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: phylonode_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylonode_relationship 
    ALTER phylonode_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER phylotree_id TYPE bigint;

--
-- Name: phylonodeprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylonodeprop
    ALTER phylonodeprop_id TYPE bigint,
    ALTER phylonode_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: phylotree; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylotree
    ALTER phylotree_id TYPE bigint,
    ALTER dbxref_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER analysis_id TYPE bigint;
    
--
-- Name: phylotree_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE phylotree_pub
    ALTER phylotree_pub_id TYPE bigint,
    ALTER phylotree_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: phylotreeprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS phylotreeprop (
    phylotreeprop_id bigint NOT NULL,
    phylotree_id bigint NOT NULL,
    type_id bigint NOT NULL,
    value text,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE phylotreeprop; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE phylotreeprop IS 'A phylotree can have any number of slot-value property 
tags attached to it. This is an alternative to hardcoding a list of columns in the 
relational schema, and is completely extensible.';


--
-- Name: COLUMN phylotreeprop.type_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN phylotreeprop.type_id IS 'The name of the property/slot is a cvterm. 
The meaning of the property is defined in that cvterm.';


--
-- Name: COLUMN phylotreeprop.value; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN phylotreeprop.value IS 'The value of the property, represented as text. 
Numeric values are converted to their text representation. This is less efficient than 
using native database types, but is easier to query.';


--
-- Name: COLUMN phylotreeprop.rank; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN phylotreeprop.rank IS 'Property-Value ordering. Any
phylotree can have multiple values for any particular property type 
these are ordered in a list using rank, counting from zero. For
properties that are single-valued rather than multi-valued, the
default 0 value should be used';


--
-- Name: phylotreeprop_phylotreeprop_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE phylotreeprop_phylotreeprop_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: phylotreeprop_phylotreeprop_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE phylotreeprop_phylotreeprop_id_seq OWNED BY phylotreeprop.phylotreeprop_id;

--
-- Name: project; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE project 
    ALTER project_id TYPE bigint,
    ALTER description TYPE text,
    ALTER description DROP NOT NULL;

--
-- Name: TABLE project; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project IS 'Standard Chado flexible property table for projects.';


--
-- Name: project_analysis; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS project_analysis (
    project_analysis_id bigint NOT NULL,
    project_id bigint NOT NULL,
    analysis_id bigint NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE project_analysis; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project_analysis IS 'Links an analysis to a project that may contain multiple analyses. 
The rank column can be used to specify a simple ordering in which analyses were executed.';


--
-- Name: project_analysis_project_analysis_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE project_analysis_project_analysis_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;


--
-- Name: project_analysis_project_analysis_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE project_analysis_project_analysis_id_seq OWNED BY project_analysis.project_analysis_id;

--
-- Name: project_contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE project_contact 
    ALTER project_contact_id TYPE bigint,
    ALTER project_id TYPE bigint,
    ALTER contact_id TYPE bigint;


--
-- Name: TABLE project_contact; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project_contact IS 'Linking table for associating projects and contacts.';


--
-- Name: project_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS project_dbxref (
    project_dbxref_id bigint NOT NULL,
    project_id bigint NOT NULL,
    dbxref_id bigint NOT NULL,
    is_current boolean DEFAULT true NOT NULL
);

--
-- Name: TABLE project_dbxref; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project_dbxref IS 'project_dbxref links a project to dbxrefs.';


--
-- Name: COLUMN project_dbxref.is_current; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN project_dbxref.is_current IS 'The is_current boolean indicates whether the linked dbxref is the current -official- dbxref for the linked project.';


--
-- Name: project_dbxref_project_dbxref_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE project_dbxref_project_dbxref_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: project_dbxref_project_dbxref_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE project_dbxref_project_dbxref_id_seq OWNED BY project_dbxref.project_dbxref_id;


--
-- Name: project_feature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS project_feature (
    project_feature_id bigint NOT NULL,
    feature_id bigint NOT NULL,
    project_id bigint NOT NULL
);


--
-- Name: TABLE project_feature; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project_feature IS 'This table is intended associate records in the feature table with a project.';


--
-- Name: project_feature_project_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE project_feature_project_feature_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: project_feature_project_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE project_feature_project_feature_id_seq OWNED BY project_feature.project_feature_id;

--
-- Name: project_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE project_pub
    ALTER project_pub_id TYPE bigint,
    ALTER project_id TYPE bigint,
    ALTER pub_id TYPE bigint;

COMMENT ON TABLE project_pub IS 'Linking table for associating projects and publications.';

--
-- Name: project_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE project_relationship
    ALTER project_relationship_id TYPE bigint,
    ALTER subject_project_id TYPE bigint,
    ALTER object_project_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: TABLE project_relationship; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project_relationship IS 'Linking table for relating projects to each other.  For example, a
given project could be composed of several smaller subprojects';


--
-- Name: COLUMN project_relationship.type_id; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON COLUMN project_relationship.type_id IS 'The cvterm type of the relationship being stated, such as "part of".';

--
-- Name: project_stock; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS project_stock (
    project_stock_id bigint NOT NULL,
    stock_id bigint NOT NULL,
    project_id bigint NOT NULL
);


--
-- Name: TABLE project_stock; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE project_stock IS 'This table is intended associate records in the stock table with a project.';


--
-- Name: project_stock_project_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE project_stock_project_stock_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;
--
-- Name: projectprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE projectprop 
    ALTER projectprop_id TYPE bigint,
    ALTER project_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: protocol; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE protocol
    ALTER protocol_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER pub_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: protocolparam; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE protocolparam 
    ALTER protocolparam_id TYPE bigint,
    ALTER protocol_id TYPE bigint,
    ALTER datatype_id TYPE bigint,
    ALTER unittype_id TYPE bigint;
    
--
-- Name: pub_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE pub_dbxref
    ALTER pub_dbxref_id TYPE bigint,
    ALTER pub_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;
    
--
-- Name: pub_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE pub_relationship
    ALTER pub_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: pubauthor; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE pubauthor
    ALTER pubauthor_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: pubauthor_contact; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS pubauthor_contact (
    pubauthor_contact_id bigint NOT NULL,
    contact_id bigint NOT NULL,
    pubauthor_id bigint NOT NULL
);


--
-- Name: TABLE pubauthor_contact; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE pubauthor_contact IS 'An author on a publication may have a corresponding entry in the contact table and this table can link the two.';


--
-- Name: pubauthor_contact_pubauthor_contact_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE pubauthor_contact_pubauthor_contact_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: pubauthor_contact_pubauthor_contact_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE pubauthor_contact_pubauthor_contact_id_seq OWNED BY pubauthor_contact.pubauthor_contact_id;

--
-- Name: pubprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE pubprop 
    ALTER pubprop_id TYPE bigint,
    ALTER pub_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: quantification; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE quantification
    ALTER quantification_id TYPE bigint,
    ALTER acquisition_id TYPE bigint,
    ALTER operator_id TYPE bigint,
    ALTER protocol_id TYPE bigint,
    ALTER analysis_id TYPE bigint;

--
-- Name: quantification_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE quantification_relationship
    ALTER quantification_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER object_id TYPE bigint;

--
-- Name: quantificationprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE quantificationprop 
    ALTER quantificationprop_id TYPE bigint,
    ALTER quantification_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: stock; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock
    ALTER stock_id TYPE bigint,
    ALTER dbxref_id TYPE bigint,
    ALTER organism_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: stock_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_cvterm
    ALTER stock_cvterm_id TYPE bigint,
    ALTER stock_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: stock_cvtermprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_cvtermprop
    ALTER stock_cvtermprop_id TYPE bigint,
    ALTER stock_cvterm_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: stock_dbxref; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_dbxref 
    ALTER stock_dbxref_id TYPE bigint,
    ALTER stock_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: stock_dbxrefprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_dbxrefprop 
    ALTER stock_dbxrefprop_id TYPE bigint,
    ALTER stock_dbxref_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: stock_feature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS stock_feature (
    stock_feature_id bigint NOT NULL,
    feature_id bigint NOT NULL,
    stock_id bigint NOT NULL,
    type_id bigint NOT NULL,
    rank integer DEFAULT 0 NOT NULL
);


--
-- Name: TABLE stock_feature; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE stock_feature IS 'Links a stock to a feature.';


--
-- Name: stock_feature_stock_feature_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE stock_feature_stock_feature_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: stock_feature_stock_feature_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: chado
--

ALTER SEQUENCE stock_feature_stock_feature_id_seq OWNED BY stock_feature.stock_feature_id;


--
-- Name: stock_featuremap; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS stock_featuremap (
    stock_featuremap_id bigint NOT NULL,
    featuremap_id bigint NOT NULL,
    stock_id bigint NOT NULL,
    type_id bigint
);


--
-- Name: TABLE stock_featuremap; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE stock_featuremap IS 'Links a featuremap to a stock.';


--
-- Name: stock_featuremap_stock_featuremap_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE stock_featuremap_stock_featuremap_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: stock_genotype; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_genotype 
    ALTER stock_genotype_id TYPE bigint,
    ALTER stock_id TYPE bigint,
    ALTER genotype_id TYPE bigint;

--
-- Name: stock_library; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS stock_library (
    stock_library_id bigint NOT NULL,
    library_id bigint NOT NULL,
    stock_id bigint NOT NULL
);


--
-- Name: TABLE stock_library; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE stock_library IS 'Links a stock with a library.';


--
-- Name: stock_library_stock_library_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE stock_library_stock_library_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: stock_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_pub 
    ALTER stock_pub_id TYPE bigint,
    ALTER stock_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: stock_relationship; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_relationship 
    ALTER stock_relationship_id TYPE bigint,
    ALTER subject_id TYPE bigint,
    ALTER object_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: stock_relationship_cvterm; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_relationship_cvterm
    ALTER stock_relationship_cvterm_id TYPE bigint,
    ALTER stock_relationship_id TYPE bigint,
    ALTER cvterm_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: stock_relationship_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stock_relationship_pub 
    ALTER stock_relationship_pub_id TYPE bigint,
    ALTER stock_relationship_id TYPE bigint,
    ALTER pub_id TYPE bigint;

--
-- Name: stockcollection; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stockcollection
    ALTER stockcollection_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER contact_id TYPE bigint;
    
--
-- Name: stockcollection_db; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

CREATE TABLE IF NOT EXISTS stockcollection_db (
    stockcollection_db_id bigint NOT NULL,
    stockcollection_id bigint NOT NULL,
    db_id bigint NOT NULL
);


--
-- Name: TABLE stockcollection_db; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON TABLE stockcollection_db IS 'Stock collections may be respresented 
by an external online database. This table associates a stock collection with 
a database where its member stocks can be found. Individual stock that are part 
of this collction should have entries in the stock_dbxref table with the same 
db_id record';


--
-- Name: stockcollection_db_stockcollection_db_id_seq; Type: SEQUENCE; Schema: public; Owner: chado
--

---CREATE SEQUENCE stockcollection_db_stockcollection_db_id_seq
---    START WITH 1
---    INCREMENT BY 1
---    NO MINVALUE
---    NO MAXVALUE
---    CACHE 1;

--
-- Name: stockcollection_stock; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stockcollection_stock
    ALTER stockcollection_stock_id TYPE bigint,
    ALTER stockcollection_id TYPE bigint,
    ALTER stock_id TYPE bigint;
    

--
-- Name: stockcollectionprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stockcollectionprop
    ALTER stockcollectionprop_id TYPE bigint,
    ALTER stockcollection_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: stockprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stockprop
    ALTER stockprop_id TYPE bigint,
    ALTER stock_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: stockprop_pub; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE stockprop_pub 
    ALTER stockprop_pub_id TYPE biginT,
    ALTER stockprop_id TYPE bigint,
    ALTER pub_id TYPE bigint;
    
--
-- Name: study; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE study
    ALTER study_id TYPE bigint,
    ALTER contact_id TYPE bigint,
    ALTER pub_id TYPE bigint,
    ALTER dbxref_id TYPE bigint;

--
-- Name: study_assay; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE study_assay
    ALTER study_assay_id TYPE bigint,
    ALTER study_id TYPE bigint,
    ALTER assay_id TYPE bigint;

--
-- Name: studydesign; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE studydesign
    ALTER studydesign_id TYPE bigint,
    ALTER study_id TYPE bigint;

--
-- Name: studydesignprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE studydesignprop 
    ALTER studydesignprop_id TYPE bigint,
    ALTER studydesign_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: studyfactor; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE studyfactor 
    ALTER studyfactor_id TYPE bigint,
    ALTER studydesign_id TYPE bigint,
    ALTER type_id TYPE bigint;
    
--
-- Name: studyfactorvalue; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE studyfactorvalue 
    ALTER studyfactorvalue_id TYPE bigint,
    ALTER studyfactor_id TYPE bigint,
    ALTER assay_id TYPE bigint;
    
--
-- Name: studyprop; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE studyprop 
    ALTER studyprop_id TYPE bigint,
    ALTER study_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: studyprop_feature; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE studyprop_feature
    ALTER studyprop_feature_id TYPE bigint,
    ALTER studyprop_id TYPE bigint,
    ALTER feature_id TYPE bigint,
    ALTER type_id TYPE bigint;

--
-- Name: tableinfo; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE tableinfo
    ALTER tableinfo_Id TYPE bigint,
    ALTER view_on_table_id TYPE bigint,
    ALTER superclass_table_id TYPE bigint;
    
--
-- Name: treatment; Type: TABLE; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE treatment
    ALTER treatment_id TYPE bigint,
    ALTER biomaterial_id TYPE bigint,
    ALTER type_id TYPE bigint,
    ALTER protocol_id TYPE bigint;
    
--
-- Name: analysis_cvterm_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY analysis_cvterm ALTER COLUMN analysis_cvterm_id SET DEFAULT nextval('analysis_cvterm_analysis_cvterm_id_seq'::regclass);


--
-- Name: analysis_dbxref_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY analysis_dbxref ALTER COLUMN analysis_dbxref_id SET DEFAULT nextval('analysis_dbxref_analysis_dbxref_id_seq'::regclass);


--
-- Name: analysis_pub_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY analysis_pub ALTER COLUMN analysis_pub_id SET DEFAULT nextval('analysis_pub_analysis_pub_id_seq'::regclass);


--
-- Name: analysis_relationship_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY analysis_relationship ALTER COLUMN analysis_relationship_id SET DEFAULT nextval('analysis_relationship_analysis_relationship_id_seq'::regclass);

--
-- Name: dbprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY dbprop ALTER COLUMN dbprop_id SET DEFAULT nextval('dbprop_dbprop_id_seq'::regclass);

--
-- Name: feature_contact_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY feature_contact ALTER COLUMN feature_contact_id SET DEFAULT nextval('feature_contact_feature_contact_id_seq'::regclass);

--
-- Name: featuremap_contact_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY featuremap_contact ALTER COLUMN featuremap_contact_id SET DEFAULT nextval('featuremap_contact_featuremap_contact_id_seq'::regclass);


--
-- Name: featuremap_dbxref_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY featuremap_dbxref ALTER COLUMN featuremap_dbxref_id SET DEFAULT nextval('featuremap_dbxref_featuremap_dbxref_id_seq'::regclass);


--
-- Name: featuremap_organism_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY featuremap_organism ALTER COLUMN featuremap_organism_id SET DEFAULT nextval('featuremap_organism_featuremap_organism_id_seq'::regclass);

--
-- Name: featuremapprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY featuremapprop ALTER COLUMN featuremapprop_id SET DEFAULT nextval('featuremapprop_featuremapprop_id_seq'::regclass);


--
-- Name: featureposprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY featureposprop 
  ALTER COLUMN featureposprop_id SET DEFAULT nextval('featureposprop_featureposprop_id_seq'::regclass);

--
-- Name: library_contact_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY library_contact ALTER COLUMN library_contact_id SET DEFAULT nextval('library_contact_library_contact_id_seq'::regclass);

--
-- Name: library_expression_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY library_expression ALTER COLUMN library_expression_id SET DEFAULT nextval('library_expression_library_expression_id_seq'::regclass);


--
-- Name: library_expressionprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY library_expressionprop ALTER COLUMN library_expressionprop_id SET DEFAULT nextval('library_expressionprop_library_expressionprop_id_seq'::regclass);


--
-- Name: library_featureprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY library_featureprop ALTER COLUMN library_featureprop_id SET DEFAULT nextval('library_featureprop_library_featureprop_id_seq'::regclass);

--
-- Name: library_relationship_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY library_relationship ALTER COLUMN library_relationship_id SET DEFAULT nextval('library_relationship_library_relationship_id_seq'::regclass);


--
-- Name: library_relationship_pub_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY library_relationship_pub ALTER COLUMN library_relationship_pub_id SET DEFAULT nextval('library_relationship_pub_library_relationship_pub_id_seq'::regclass);


--
-- Name: nd_experiment_analysis_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY nd_experiment_analysis ALTER COLUMN nd_experiment_analysis_id SET DEFAULT nextval('nd_experiment_analysis_nd_experiment_analysis_id_seq'::regclass);

--
-- Name: organism_cvterm_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY organism_cvterm ALTER COLUMN organism_cvterm_id SET DEFAULT nextval('organism_cvterm_organism_cvterm_id_seq'::regclass);


--
-- Name: organism_cvtermprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY organism_cvtermprop ALTER COLUMN organism_cvtermprop_id SET DEFAULT nextval('organism_cvtermprop_organism_cvtermprop_id_seq'::regclass);

--
-- Name: organism_pub_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY organism_pub ALTER COLUMN organism_pub_id SET DEFAULT nextval('organism_pub_organism_pub_id_seq'::regclass);


--
-- Name: organism_relationship_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY organism_relationship ALTER COLUMN organism_relationship_id SET DEFAULT nextval('organism_relationship_organism_relationship_id_seq'::regclass);


--
-- Name: organismprop_pub_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY organismprop_pub ALTER COLUMN organismprop_pub_id SET DEFAULT nextval('organismprop_pub_organismprop_pub_id_seq'::regclass);

--
-- Name: phenotypeprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY phenotypeprop ALTER COLUMN phenotypeprop_id SET DEFAULT nextval('phenotypeprop_phenotypeprop_id_seq'::regclass);

--
-- Name: phylotreeprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY phylotreeprop ALTER COLUMN phylotreeprop_id SET DEFAULT nextval('phylotreeprop_phylotreeprop_id_seq'::regclass);

--
-- Name: project_analysis_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY project_analysis ALTER COLUMN project_analysis_id SET DEFAULT nextval('project_analysis_project_analysis_id_seq'::regclass);

--
-- Name: project_dbxref_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY project_dbxref ALTER COLUMN project_dbxref_id SET DEFAULT nextval('project_dbxref_project_dbxref_id_seq'::regclass);


--
-- Name: project_feature_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY project_feature ALTER COLUMN project_feature_id SET DEFAULT nextval('project_feature_project_feature_id_seq'::regclass);

--
-- Name: project_stock_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY project_stock ALTER COLUMN project_stock_id SET DEFAULT nextval('project_stock_project_stock_id_seq'::regclass);

--
-- Name: pubauthor_contact_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY pubauthor_contact ALTER COLUMN pubauthor_contact_id SET DEFAULT nextval('pubauthor_contact_pubauthor_contact_id_seq'::regclass);


--
-- Name: stock_feature_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY stock_feature ALTER COLUMN stock_feature_id SET DEFAULT nextval('stock_feature_stock_feature_id_seq'::regclass);


--
-- Name: stock_featuremap_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY stock_featuremap ALTER COLUMN stock_featuremap_id SET DEFAULT nextval('stock_featuremap_stock_featuremap_id_seq'::regclass);


--
-- Name: stock_library_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY stock_library ALTER COLUMN stock_library_id SET DEFAULT nextval('stock_library_stock_library_id_seq'::regclass);

--
-- Name: stockcollection_db_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY stockcollection_db ALTER COLUMN stockcollection_db_id SET DEFAULT nextval('stockcollection_db_stockcollection_db_id_seq'::regclass);

--
-- Name: analysis_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--

ALTER TABLE analysis_cvterm DROP CONSTRAINT IF EXISTS analysis_cvterm_c1;
ALTER TABLE ONLY analysis_cvterm
    ADD CONSTRAINT analysis_cvterm_c1 UNIQUE (analysis_id, cvterm_id, rank);


--
-- Name: analysis_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_cvterm DROP CONSTRAINT IF EXISTS analysis_cvterm_pkey;
ALTER TABLE ONLY analysis_cvterm
    ADD CONSTRAINT analysis_cvterm_pkey PRIMARY KEY (analysis_cvterm_id);


--
-- Name: analysis_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_dbxref DROP CONSTRAINT IF EXISTS analysis_dbxref_c1;
ALTER TABLE ONLY analysis_dbxref
    ADD CONSTRAINT analysis_dbxref_c1 UNIQUE (analysis_id, dbxref_id);


--
-- Name: analysis_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_dbxref DROP CONSTRAINT IF EXISTS analysis_dbxref_pkey;
ALTER TABLE ONLY analysis_dbxref
    ADD CONSTRAINT analysis_dbxref_pkey PRIMARY KEY (analysis_dbxref_id);

--
-- Name: analysis_pub_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_pub DROP CONSTRAINT IF EXISTS analysis_pub_c1;
ALTER TABLE ONLY analysis_pub
    ADD CONSTRAINT analysis_pub_c1 UNIQUE (analysis_id, pub_id);


--
-- Name: analysis_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_pub DROP CONSTRAINT IF EXISTS analysis_pub_pkey;
ALTER TABLE ONLY analysis_pub
    ADD CONSTRAINT analysis_pub_pkey PRIMARY KEY (analysis_pub_id);


--
-- Name: analysis_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_relationship DROP CONSTRAINT IF EXISTS analysis_relationship_c1;
ALTER TABLE ONLY analysis_relationship
    ADD CONSTRAINT analysis_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: analysis_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE analysis_relationship DROP CONSTRAINT IF EXISTS analysis_relationship_pkey;
ALTER TABLE ONLY analysis_relationship
    ADD CONSTRAINT analysis_relationship_pkey PRIMARY KEY (analysis_relationship_id);

--
-- Name: contactprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE contactprop DROP CONSTRAINT IF EXISTS contactprop_c1;
ALTER TABLE ONLY contactprop
    ADD CONSTRAINT contactprop_c1 UNIQUE (contact_id, type_id, rank);


--
-- Name: contactprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE contactprop DROP CONSTRAINT IF EXISTS contactprop_pkey;
ALTER TABLE ONLY contactprop
    ADD CONSTRAINT contactprop_pkey PRIMARY KEY (contactprop_id);

--
-- Name: dbprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE dbprop DROP CONSTRAINT IF EXISTS dbprop_c1;
ALTER TABLE ONLY dbprop
    ADD CONSTRAINT dbprop_c1 UNIQUE (db_id, type_id, rank);


--
-- Name: dbprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE dbprop DROP CONSTRAINT IF EXISTS dbprop_pkey;
ALTER TABLE ONLY dbprop
    ADD CONSTRAINT dbprop_pkey PRIMARY KEY (dbprop_id);

--
-- Name: expression_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE ONLY expression_cvterm DROP CONSTRAINT expression_cvterm_c1;
ALTER TABLE ONLY expression_cvterm
    ADD CONSTRAINT expression_cvterm_c1 UNIQUE (expression_id, cvterm_id, rank, cvterm_type_id);

--
-- Name: contactprop_id; Type: DEFAULT; Schema: public; Owner: chado
--

ALTER TABLE ONLY contactprop ALTER COLUMN contactprop_id SET DEFAULT nextval('contactprop_contactprop_id_seq'::regclass);

--
-- Name: feature_contact_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature_contact DROP CONSTRAINT IF EXISTS feature_contact_c1;
ALTER TABLE ONLY feature_contact
    ADD CONSTRAINT feature_contact_c1 UNIQUE (feature_id, contact_id);


--
-- Name: feature_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE feature_contact DROP CONSTRAINT IF EXISTS feature_contact_pkey;
ALTER TABLE ONLY feature_contact
    ADD CONSTRAINT feature_contact_pkey PRIMARY KEY (feature_contact_id);

--
-- Name: featuremap_contact_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremap_contact DROP CONSTRAINT IF EXISTS featuremap_contact_c1;
ALTER TABLE ONLY featuremap_contact
    ADD CONSTRAINT featuremap_contact_c1 UNIQUE (featuremap_id, contact_id);


--
-- Name: featuremap_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremap_contact DROP CONSTRAINT IF EXISTS featuremap_contact_pkey;
ALTER TABLE ONLY featuremap_contact
    ADD CONSTRAINT featuremap_contact_pkey PRIMARY KEY (featuremap_contact_id);


--
-- Name: featuremap_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremap_dbxref DROP CONSTRAINT IF EXISTS featuremap_dbxref_pkey;
ALTER TABLE ONLY featuremap_dbxref
    ADD CONSTRAINT featuremap_dbxref_pkey PRIMARY KEY (featuremap_dbxref_id);


--
-- Name: featuremap_organism_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremap_organism DROP CONSTRAINT IF EXISTS featuremap_organism_c1;
ALTER TABLE ONLY featuremap_organism
    ADD CONSTRAINT featuremap_organism_c1 UNIQUE (featuremap_id, organism_id);


--
-- Name: featuremap_organism_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremap_organism DROP CONSTRAINT IF EXISTS featuremap_organism_pkey;
ALTER TABLE ONLY featuremap_organism
    ADD CONSTRAINT featuremap_organism_pkey PRIMARY KEY (featuremap_organism_id);

--
-- Name: featuremapprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremapprop DROP CONSTRAINT IF EXISTS featuremapprop_c1;
ALTER TABLE ONLY featuremapprop
    ADD CONSTRAINT featuremapprop_c1 UNIQUE (featuremap_id, type_id, rank);


--
-- Name: featuremapprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featuremapprop DROP CONSTRAINT IF EXISTS featuremapprop_pkey;
ALTER TABLE ONLY featuremapprop
    ADD CONSTRAINT featuremapprop_pkey PRIMARY KEY (featuremapprop_id);

--
-- Name: featureposprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featureposprop DROP CONSTRAINT IF EXISTS featureposprop_c1;
ALTER TABLE ONLY featureposprop
    ADD CONSTRAINT featureposprop_c1 UNIQUE (featurepos_id, type_id, rank);


--
-- Name: featureposprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE featureposprop DROP CONSTRAINT IF EXISTS featureposprop_pkey;
ALTER TABLE ONLY featureposprop
    ADD CONSTRAINT featureposprop_pkey PRIMARY KEY (featureposprop_id);

--
-- Name: library_contact_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_contact DROP CONSTRAINT IF EXISTS library_contact_c1;
ALTER TABLE ONLY library_contact
    ADD CONSTRAINT library_contact_c1 UNIQUE (library_id, contact_id);


--
-- Name: library_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_contact DROP CONSTRAINT IF EXISTS library_contact_pkey;
ALTER TABLE ONLY library_contact
    ADD CONSTRAINT library_contact_pkey PRIMARY KEY (library_contact_id);

--
-- Name: library_expression_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_expression DROP CONSTRAINT IF EXISTS library_expression_c1;
ALTER TABLE ONLY library_expression
    ADD CONSTRAINT library_expression_c1 UNIQUE (library_id, expression_id);


--
-- Name: library_expression_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_expression DROP CONSTRAINT IF EXISTS library_expression_pkey;
ALTER TABLE ONLY library_expression
    ADD CONSTRAINT library_expression_pkey PRIMARY KEY (library_expression_id);


--
-- Name: library_expressionprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_expressionprop DROP CONSTRAINT IF EXISTS library_expressionprop_c1;
ALTER TABLE ONLY library_expressionprop
    ADD CONSTRAINT library_expressionprop_c1 UNIQUE (library_expression_id, type_id, rank);


--
-- Name: library_expressionprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_expressionprop DROP CONSTRAINT IF EXISTS library_expressionprop_pkey;
ALTER TABLE ONLY library_expressionprop
    ADD CONSTRAINT library_expressionprop_pkey PRIMARY KEY (library_expressionprop_id);

--
-- Name: library_featureprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_featureprop DROP CONSTRAINT IF EXISTS library_featureprop_c1;
ALTER TABLE ONLY library_featureprop
    ADD CONSTRAINT library_featureprop_c1 UNIQUE (library_feature_id, type_id, rank);


--
-- Name: library_featureprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_featureprop DROP CONSTRAINT IF EXISTS library_featureprop_pkey;
ALTER TABLE ONLY library_featureprop
    ADD CONSTRAINT library_featureprop_pkey PRIMARY KEY (library_featureprop_id);

--
-- Name: library_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_relationship DROP CONSTRAINT IF EXISTS library_relationship_c1;
ALTER TABLE ONLY library_relationship
    ADD CONSTRAINT library_relationship_c1 UNIQUE (subject_id, object_id, type_id);


--
-- Name: library_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_relationship DROP CONSTRAINT IF EXISTS library_relationship_pkey;
ALTER TABLE ONLY library_relationship
    ADD CONSTRAINT library_relationship_pkey PRIMARY KEY (library_relationship_id);


--
-- Name: library_relationship_pub_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_relationship_pub DROP CONSTRAINT IF EXISTS library_relationship_pub_c1;
ALTER TABLE ONLY library_relationship_pub
    ADD CONSTRAINT library_relationship_pub_c1 UNIQUE (library_relationship_id, pub_id);


--
-- Name: library_relationship_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE library_relationship_pub DROP CONSTRAINT IF EXISTS library_relationship_pub_pkey;
ALTER TABLE ONLY library_relationship_pub
    ADD CONSTRAINT library_relationship_pub_pkey PRIMARY KEY (library_relationship_pub_id);

--
-- Name: nd_experiment_analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE nd_experiment_analysis DROP CONSTRAINT IF EXISTS nd_experiment_analysis_pkey;
ALTER TABLE ONLY nd_experiment_analysis
    ADD CONSTRAINT nd_experiment_analysis_pkey PRIMARY KEY (nd_experiment_analysis_id);

--
-- Name: nd_experiment_project_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE nd_experiment_project DROP CONSTRAINT IF EXISTS nd_experiment_project_c1;
ALTER TABLE ONLY nd_experiment_project
    ADD CONSTRAINT nd_experiment_project_c1 UNIQUE (project_id, nd_experiment_id);

ALTER TABLE ONLY organism DROP CONSTRAINT organism_c1;
ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_c1 UNIQUE (genus, species, type_id, infraspecific_name);


--
-- Name: organism_cvterm_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_cvterm DROP CONSTRAINT IF EXISTS organism_cvterm_c1;
ALTER TABLE ONLY organism_cvterm
    ADD CONSTRAINT organism_cvterm_c1 UNIQUE (organism_id, cvterm_id, pub_id);


--
-- Name: organism_cvterm_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_cvterm DROP CONSTRAINT IF EXISTS organism_cvterm_pkey;
ALTER TABLE ONLY organism_cvterm
    ADD CONSTRAINT organism_cvterm_pkey PRIMARY KEY (organism_cvterm_id);


--
-- Name: organism_cvtermprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_cvtermprop DROP CONSTRAINT IF EXISTS organism_cvtermprop_c1;
ALTER TABLE ONLY organism_cvtermprop
    ADD CONSTRAINT organism_cvtermprop_c1 UNIQUE (organism_cvterm_id, type_id, rank);


--
-- Name: organism_cvtermprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_cvtermprop DROP CONSTRAINT IF EXISTS organism_cvtermprop_pkey;
ALTER TABLE ONLY organism_cvtermprop
    ADD CONSTRAINT organism_cvtermprop_pkey PRIMARY KEY (organism_cvtermprop_id);

--
-- Name: organism_pub_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_pub DROP CONSTRAINT IF EXISTS organism_pub_c1;
ALTER TABLE ONLY organism_pub
    ADD CONSTRAINT organism_pub_c1 UNIQUE (organism_id, pub_id);


--
-- Name: organism_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_pub DROP CONSTRAINT IF EXISTS organism_pub_pkey;
ALTER TABLE ONLY organism_pub
    ADD CONSTRAINT organism_pub_pkey PRIMARY KEY (organism_pub_id);


--
-- Name: organism_relationship_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_relationship DROP CONSTRAINT IF EXISTS organism_relationship_c1;
ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_c1 UNIQUE (subject_id, object_id, type_id, rank);


--
-- Name: organism_relationship_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organism_relationship DROP CONSTRAINT IF EXISTS organism_relationship_pkey;
ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_pkey PRIMARY KEY (organism_relationship_id);

--
-- Name: organismprop_pub_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organismprop_pub DROP CONSTRAINT IF EXISTS organismprop_pub_c1;
ALTER TABLE ONLY organismprop_pub
    ADD CONSTRAINT organismprop_pub_c1 UNIQUE (organismprop_id, pub_id);


--
-- Name: organismprop_pub_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE organismprop_pub DROP CONSTRAINT IF EXISTS organismprop_pub_pkey;
ALTER TABLE ONLY organismprop_pub
    ADD CONSTRAINT organismprop_pub_pkey PRIMARY KEY (organismprop_pub_id);


--
-- Name: phenotypeprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE phenotypeprop DROP CONSTRAINT IF EXISTS phenotypeprop_c1;
ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_c1 UNIQUE (phenotype_id, type_id, rank);


--
-- Name: phenotypeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE phenotypeprop DROP CONSTRAINT IF EXISTS phenotypeprop_pkey;
ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_pkey PRIMARY KEY (phenotypeprop_id);

--
-- Name: phylotreeprop_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE phylotreeprop DROP CONSTRAINT IF EXISTS phylotreeprop_c1;
ALTER TABLE ONLY phylotreeprop
    ADD CONSTRAINT phylotreeprop_c1 UNIQUE (phylotree_id, type_id, rank);


--
-- Name: phylotreeprop_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE phylotreeprop DROP CONSTRAINT IF EXISTS phylotreeprop_pkey;
ALTER TABLE ONLY phylotreeprop
    ADD CONSTRAINT phylotreeprop_pkey PRIMARY KEY (phylotreeprop_id);


--
-- Name: project_analysis_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_analysis DROP CONSTRAINT IF EXISTS project_analysis_c1;
ALTER TABLE ONLY project_analysis
    ADD CONSTRAINT project_analysis_c1 UNIQUE (project_id, analysis_id);


--
-- Name: project_analysis_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_analysis DROP CONSTRAINT IF EXISTS project_analysis_pkey;
ALTER TABLE ONLY project_analysis
    ADD CONSTRAINT project_analysis_pkey PRIMARY KEY (project_analysis_id);

--
-- Name: project_dbxref_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_dbxref DROP CONSTRAINT IF EXISTS project_dbxref_c1;
ALTER TABLE ONLY project_dbxref
    ADD CONSTRAINT project_dbxref_c1 UNIQUE (project_id, dbxref_id);


--
-- Name: project_dbxref_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_dbxref DROP CONSTRAINT IF EXISTS project_dbxref_pkey;
ALTER TABLE ONLY project_dbxref
    ADD CONSTRAINT project_dbxref_pkey PRIMARY KEY (project_dbxref_id);


--
-- Name: project_feature_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_feature DROP CONSTRAINT IF EXISTS project_feature_c1;
ALTER TABLE ONLY project_feature
    ADD CONSTRAINT project_feature_c1 UNIQUE (feature_id, project_id);


--
-- Name: project_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_feature DROP CONSTRAINT IF EXISTS project_feature_pkey;
ALTER TABLE ONLY project_feature
    ADD CONSTRAINT project_feature_pkey PRIMARY KEY (project_feature_id);

--
-- Name: project_stock_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_stock DROP CONSTRAINT IF EXISTS project_stock_c1;
ALTER TABLE ONLY project_stock
    ADD CONSTRAINT project_stock_c1 UNIQUE (stock_id, project_id);


--
-- Name: project_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE project_stock DROP CONSTRAINT IF EXISTS project_stock_pkey;
ALTER TABLE ONLY project_stock
    ADD CONSTRAINT project_stock_pkey PRIMARY KEY (project_stock_id);

--
-- Name: pubauthor_contact_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE pubauthor_contact DROP CONSTRAINT IF EXISTS pubauthor_contact_c1;
ALTER TABLE ONLY pubauthor_contact
    ADD CONSTRAINT pubauthor_contact_c1 UNIQUE (contact_id, pubauthor_id);


--
-- Name: pubauthor_contact_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE pubauthor_contact DROP CONSTRAINT IF EXISTS pubauthor_contact_pkey;
ALTER TABLE ONLY pubauthor_contact
    ADD CONSTRAINT pubauthor_contact_pkey PRIMARY KEY (pubauthor_contact_id);

--
-- Name: stock_feature_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stock_feature DROP CONSTRAINT IF EXISTS stock_feature_c1;
ALTER TABLE ONLY stock_feature
    ADD CONSTRAINT stock_feature_c1 UNIQUE (feature_id, stock_id, type_id, rank);


--
-- Name: stock_feature_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stock_feature DROP CONSTRAINT IF EXISTS stock_feature_pkey;
ALTER TABLE ONLY stock_feature
    ADD CONSTRAINT stock_feature_pkey PRIMARY KEY (stock_feature_id);


--
-- Name: stock_featuremap_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stock_featuremap DROP CONSTRAINT IF EXISTS stock_featuremap_c1;
ALTER TABLE ONLY stock_featuremap
    ADD CONSTRAINT stock_featuremap_c1 UNIQUE (featuremap_id, stock_id, type_id);


--
-- Name: stock_featuremap_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stock_featuremap DROP CONSTRAINT IF EXISTS stock_featuremap_pkey;
ALTER TABLE ONLY stock_featuremap
    ADD CONSTRAINT stock_featuremap_pkey PRIMARY KEY (stock_featuremap_id);

--
-- Name: stock_library_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stock_library DROP CONSTRAINT IF EXISTS stock_library_c1;
ALTER TABLE ONLY stock_library
    ADD CONSTRAINT stock_library_c1 UNIQUE (library_id, stock_id);


--
-- Name: stock_library_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stock_library DROP CONSTRAINT IF EXISTS stock_library_pkey;
ALTER TABLE ONLY stock_library
    ADD CONSTRAINT stock_library_pkey PRIMARY KEY (stock_library_id);


--
-- Name: stockcollection_db_c1; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stockcollection_db DROP CONSTRAINT IF EXISTS stockcollection_db_c1;
ALTER TABLE ONLY stockcollection_db
    ADD CONSTRAINT stockcollection_db_c1 UNIQUE (stockcollection_id, db_id);


--
-- Name: stockcollection_db_pkey; Type: CONSTRAINT; Schema: public; Owner: chado; Tablespace: 
--
ALTER TABLE stockcollection_db DROP CONSTRAINT IF EXISTS stockcollection_db_pkey;
ALTER TABLE ONLY stockcollection_db
    ADD CONSTRAINT stockcollection_db_pkey PRIMARY KEY (stockcollection_db_id);

--
-- Name: analysis_cvterm_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--

DROP INDEX IF EXISTS analysis_cvterm_idx1;
CREATE INDEX analysis_cvterm_idx1 ON analysis_cvterm USING btree (analysis_id);


--
-- Name: analysis_cvterm_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--

DROP INDEX IF EXISTS analysis_cvterm_idx2;
CREATE INDEX analysis_cvterm_idx2 ON analysis_cvterm USING btree (cvterm_id);


--
-- Name: analysis_dbxref_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_dbxref_idx1;
CREATE INDEX analysis_dbxref_idx1 ON analysis_dbxref USING btree (analysis_id);


--
-- Name: analysis_dbxref_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_dbxref_idx2;
CREATE INDEX analysis_dbxref_idx2 ON analysis_dbxref USING btree (dbxref_id);


--
-- Name: analysis_pub_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_pub_idx1;
CREATE INDEX analysis_pub_idx1 ON analysis_pub USING btree (analysis_id);


--
-- Name: analysis_pub_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_pub_idx2;
CREATE INDEX analysis_pub_idx2 ON analysis_pub USING btree (pub_id);


--
-- Name: analysis_relationship_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_relationship_idx1;
CREATE INDEX analysis_relationship_idx1 ON analysis_relationship USING btree (subject_id);


--
-- Name: analysis_relationship_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_relationship_idx2;
CREATE INDEX analysis_relationship_idx2 ON analysis_relationship USING btree (object_id);


--
-- Name: analysis_relationship_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysis_relationship_idx3;
CREATE INDEX analysis_relationship_idx3 ON analysis_relationship USING btree (type_id);

--
-- Name: analysisfeatureprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysisfeatureprop_idx1;
CREATE INDEX analysisfeatureprop_idx1 ON analysisfeatureprop USING btree (analysisfeature_id);


--
-- Name: analysisfeatureprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS analysisfeatureprop_idx2;
CREATE INDEX analysisfeatureprop_idx2 ON analysisfeatureprop USING btree (type_id);

--
-- Name: contactprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS contactprop_idx1;
CREATE INDEX contactprop_idx1 ON contactprop USING btree (contact_id);


--
-- Name: contactprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS contactprop_idx2;
CREATE INDEX contactprop_idx2 ON contactprop USING btree (type_id);

--
-- Name: dbprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS dbprop_idx1;
CREATE INDEX dbprop_idx1 ON dbprop USING btree (db_id);


--
-- Name: dbprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS dbprop_idx2;
CREATE INDEX dbprop_idx2 ON dbprop USING btree (type_id);

--
-- Name: feature_contact_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS feature_contact_idx1;
CREATE INDEX feature_contact_idx1 ON feature_contact USING btree (feature_id);


--
-- Name: feature_contact_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS feature_contact_idx2;
CREATE INDEX feature_contact_idx2 ON feature_contact USING btree (contact_id);


--
-- Name: featuremap_contact_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremap_contact_idx1;
CREATE INDEX featuremap_contact_idx1 ON featuremap_contact USING btree (featuremap_id);


--
-- Name: featuremap_contact_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremap_contact_idx2;
CREATE INDEX featuremap_contact_idx2 ON featuremap_contact USING btree (contact_id);


--
-- Name: featuremap_dbxref_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremap_dbxref_idx1;
CREATE INDEX featuremap_dbxref_idx1 ON featuremap_dbxref USING btree (featuremap_id);


--
-- Name: featuremap_dbxref_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremap_dbxref_idx2;
CREATE INDEX featuremap_dbxref_idx2 ON featuremap_dbxref USING btree (dbxref_id);


--
-- Name: featuremap_organism_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremap_organism_idx1;
CREATE INDEX featuremap_organism_idx1 ON featuremap_organism USING btree (featuremap_id);


--
-- Name: featuremap_organism_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremap_organism_idx2;
CREATE INDEX featuremap_organism_idx2 ON featuremap_organism USING btree (organism_id);


--
-- Name: featuremapprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremapprop_idx1;
CREATE INDEX featuremapprop_idx1 ON featuremapprop USING btree (featuremap_id);


--
-- Name: featuremapprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featuremapprop_idx2;
CREATE INDEX featuremapprop_idx2 ON featuremapprop USING btree (type_id);


--
-- Name: featureposprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featureposprop_idx1;
CREATE INDEX featureposprop_idx1 ON featureposprop USING btree (featurepos_id);


--
-- Name: featureposprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS featureposprop_idx2;
CREATE INDEX featureposprop_idx2 ON featureposprop USING btree (type_id);


--
-- Name: library_contact_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_contact_idx1;
CREATE INDEX library_contact_idx1 ON library USING btree (library_id);


--
-- Name: library_contact_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_contact_idx2;
CREATE INDEX library_contact_idx2 ON contact USING btree (contact_id);

--
-- Name: library_expression_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_expression_idx1;
CREATE INDEX library_expression_idx1 ON library_expression USING btree (library_id);


--
-- Name: library_expression_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_expression_idx2;
CREATE INDEX library_expression_idx2 ON library_expression USING btree (expression_id);


--
-- Name: library_expression_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_expression_idx3;
CREATE INDEX library_expression_idx3 ON library_expression USING btree (pub_id);


--
-- Name: library_expressionprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_expressionprop_idx1;
CREATE INDEX library_expressionprop_idx1 ON library_expressionprop USING btree (library_expression_id);


--
-- Name: library_expressionprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_expressionprop_idx2;
CREATE INDEX library_expressionprop_idx2 ON library_expressionprop USING btree (type_id);

--
-- Name: library_featureprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_featureprop_idx1;
CREATE INDEX library_featureprop_idx1 ON library_featureprop USING btree (library_feature_id);


--
-- Name: library_featureprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_featureprop_idx2;
CREATE INDEX library_featureprop_idx2 ON library_featureprop USING btree (type_id);

--
-- Name: library_relationship_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_relationship_idx1;
CREATE INDEX library_relationship_idx1 ON library_relationship USING btree (subject_id);


--
-- Name: library_relationship_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_relationship_idx2;
CREATE INDEX library_relationship_idx2 ON library_relationship USING btree (object_id);


--
-- Name: library_relationship_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_relationship_idx3;
CREATE INDEX library_relationship_idx3 ON library_relationship USING btree (type_id);


--
-- Name: library_relationship_pub_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_relationship_pub_idx1;
CREATE INDEX library_relationship_pub_idx1 ON library_relationship_pub USING btree (library_relationship_id);


--
-- Name: library_relationship_pub_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS library_relationship_pub_idx2;
CREATE INDEX library_relationship_pub_idx2 ON library_relationship_pub USING btree (pub_id);

--
-- Name: nd_experiment_analysis_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_analysis_idx1;
CREATE INDEX nd_experiment_analysis_idx1 ON nd_experiment_analysis USING btree (nd_experiment_id);


--
-- Name: nd_experiment_analysis_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_analysis_idx2;
CREATE INDEX nd_experiment_analysis_idx2 ON nd_experiment_analysis USING btree (analysis_id);


--
-- Name: nd_experiment_analysis_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_analysis_idx3;
CREATE INDEX nd_experiment_analysis_idx3 ON nd_experiment_analysis USING btree (type_id);


--
-- Name: nd_experiment_contact_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_contact_idx1;
CREATE INDEX nd_experiment_contact_idx1 ON nd_experiment_contact USING btree (nd_experiment_id);


--
-- Name: nd_experiment_contact_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_contact_idx2;
CREATE INDEX nd_experiment_contact_idx2 ON nd_experiment_contact USING btree (contact_id);


--
-- Name: nd_experiment_dbxref_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_dbxref_idx1;
CREATE INDEX nd_experiment_dbxref_idx1 ON nd_experiment_dbxref USING btree (nd_experiment_id);


--
-- Name: nd_experiment_dbxref_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_dbxref_idx2;
CREATE INDEX nd_experiment_dbxref_idx2 ON nd_experiment_dbxref USING btree (dbxref_id);


--
-- Name: nd_experiment_genotype_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_genotype_idx1;
CREATE INDEX nd_experiment_genotype_idx1 ON nd_experiment_genotype USING btree (nd_experiment_id);


--
-- Name: nd_experiment_genotype_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_genotype_idx2;
CREATE INDEX nd_experiment_genotype_idx2 ON nd_experiment_genotype USING btree (genotype_id);


--
-- Name: nd_experiment_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_idx1;
CREATE INDEX nd_experiment_idx1 ON nd_experiment USING btree (nd_geolocation_id);


--
-- Name: nd_experiment_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_idx2;
CREATE INDEX nd_experiment_idx2 ON nd_experiment USING btree (type_id);


--
-- Name: nd_experiment_phenotype_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_phenotype_idx1;
CREATE INDEX nd_experiment_phenotype_idx1 ON nd_experiment_phenotype USING btree (nd_experiment_id);


--
-- Name: nd_experiment_phenotype_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_phenotype_idx2;
CREATE INDEX nd_experiment_phenotype_idx2 ON nd_experiment_phenotype USING btree (phenotype_id);


--
-- Name: nd_experiment_project_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_project_idx1;
CREATE INDEX nd_experiment_project_idx1 ON nd_experiment_project USING btree (project_id);


--
-- Name: nd_experiment_project_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_project_idx2;
CREATE INDEX nd_experiment_project_idx2 ON nd_experiment_project USING btree (nd_experiment_id);


--
-- Name: nd_experiment_protocol_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_protocol_idx1;
CREATE INDEX nd_experiment_protocol_idx1 ON nd_experiment_protocol USING btree (nd_experiment_id);


--
-- Name: nd_experiment_protocol_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_protocol_idx2;
CREATE INDEX nd_experiment_protocol_idx2 ON nd_experiment_protocol USING btree (nd_protocol_id);





--
-- Name: nd_experiment_stock_dbxref_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stock_dbxref_idx1;
CREATE INDEX nd_experiment_stock_dbxref_idx1 ON nd_experiment_stock_dbxref USING btree (nd_experiment_stock_id);


--
-- Name: nd_experiment_stock_dbxref_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stock_dbxref_idx2;
CREATE INDEX nd_experiment_stock_dbxref_idx2 ON nd_experiment_stock_dbxref USING btree (dbxref_id);


--
-- Name: nd_experiment_stock_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stock_idx1;
CREATE INDEX nd_experiment_stock_idx1 ON nd_experiment_stock USING btree (nd_experiment_id);


--
-- Name: nd_experiment_stock_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stock_idx2;
CREATE INDEX nd_experiment_stock_idx2 ON nd_experiment_stock USING btree (stock_id);


--
-- Name: nd_experiment_stock_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stock_idx3;
CREATE INDEX nd_experiment_stock_idx3 ON nd_experiment_stock USING btree (type_id);


--
-- Name: nd_experiment_stockprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stockprop_idx1;
CREATE INDEX nd_experiment_stockprop_idx1 ON nd_experiment_stockprop USING btree (nd_experiment_stock_id);


--
-- Name: nd_experiment_stockprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experiment_stockprop_idx2;
CREATE INDEX nd_experiment_stockprop_idx2 ON nd_experiment_stockprop USING btree (type_id);


--
-- Name: nd_experimentprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experimentprop_idx1;
CREATE INDEX nd_experimentprop_idx1 ON nd_experimentprop USING btree (nd_experiment_id);


--
-- Name: nd_experimentprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_experimentprop_idx2;
CREATE INDEX nd_experimentprop_idx2 ON nd_experimentprop USING btree (type_id);


--
-- Name: nd_geolocation_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_geolocation_idx1;
CREATE INDEX nd_geolocation_idx1 ON nd_geolocation USING btree (latitude);


--
-- Name: nd_geolocation_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_geolocation_idx2;
CREATE INDEX nd_geolocation_idx2 ON nd_geolocation USING btree (longitude);


--
-- Name: nd_geolocation_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_geolocation_idx3;
CREATE INDEX nd_geolocation_idx3 ON nd_geolocation USING btree (altitude);


--
-- Name: nd_geolocationprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_geolocationprop_idx1;
CREATE INDEX nd_geolocationprop_idx1 ON nd_geolocationprop USING btree (nd_geolocation_id);


--
-- Name: nd_geolocationprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_geolocationprop_idx2;
CREATE INDEX nd_geolocationprop_idx2 ON nd_geolocationprop USING btree (type_id);


--
-- Name: nd_protocol_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_protocol_idx1;
CREATE INDEX nd_protocol_idx1 ON nd_protocol USING btree (type_id);


--
-- Name: nd_protocol_reagent_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_protocol_reagent_idx1;
CREATE INDEX nd_protocol_reagent_idx1 ON nd_protocol_reagent USING btree (nd_protocol_id);


--
-- Name: nd_protocol_reagent_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_protocol_reagent_idx2;
CREATE INDEX nd_protocol_reagent_idx2 ON nd_protocol_reagent USING btree (reagent_id);


--
-- Name: nd_protocol_reagent_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_protocol_reagent_idx3;
CREATE INDEX nd_protocol_reagent_idx3 ON nd_protocol_reagent USING btree (type_id);


--
-- Name: nd_protocolprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_protocolprop_idx1;
CREATE INDEX nd_protocolprop_idx1 ON nd_protocolprop USING btree (nd_protocol_id);


--
-- Name: nd_protocolprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_protocolprop_idx2;
CREATE INDEX nd_protocolprop_idx2 ON nd_protocolprop USING btree (type_id);


--
-- Name: nd_reagent_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagent_idx1;
CREATE INDEX nd_reagent_idx1 ON nd_reagent USING btree (type_id);


--
-- Name: nd_reagent_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagent_idx2;
CREATE INDEX nd_reagent_idx2 ON nd_reagent USING btree (feature_id);


--
-- Name: nd_reagent_relationship_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagent_relationship_idx1;
CREATE INDEX nd_reagent_relationship_idx1 ON nd_reagent_relationship USING btree (subject_reagent_id);


--
-- Name: nd_reagent_relationship_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagent_relationship_idx2;
CREATE INDEX nd_reagent_relationship_idx2 ON nd_reagent_relationship USING btree (object_reagent_id);


--
-- Name: nd_reagent_relationship_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagent_relationship_idx3;
CREATE INDEX nd_reagent_relationship_idx3 ON nd_reagent_relationship USING btree (type_id);


--
-- Name: nd_reagentprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagentprop_idx1;
CREATE INDEX nd_reagentprop_idx1 ON nd_reagentprop USING btree (nd_reagent_id);


--
-- Name: nd_reagentprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS nd_reagentprop_idx2;
CREATE INDEX nd_reagentprop_idx2 ON nd_reagentprop USING btree (type_id);


--
-- Name: organism_cvterm_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_cvterm_idx1;
CREATE INDEX organism_cvterm_idx1 ON organism_cvterm USING btree (organism_id);


--
-- Name: organism_cvterm_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_cvterm_idx2;
CREATE INDEX organism_cvterm_idx2 ON organism_cvterm USING btree (cvterm_id);


--
-- Name: organism_cvtermprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_cvtermprop_idx1;
CREATE INDEX organism_cvtermprop_idx1 ON organism_cvtermprop USING btree (organism_cvterm_id);


--
-- Name: organism_cvtermprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_cvtermprop_idx2;
CREATE INDEX organism_cvtermprop_idx2 ON organism_cvtermprop USING btree (type_id);


--
-- Name: organism_pub_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_pub_idx1;
CREATE INDEX organism_pub_idx1 ON organism_pub USING btree (organism_id);


--
-- Name: organism_pub_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_pub_idx2;
CREATE INDEX organism_pub_idx2 ON organism_pub USING btree (pub_id);


--
-- Name: organism_relationship_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_relationship_idx1;
CREATE INDEX organism_relationship_idx1 ON organism_relationship USING btree (subject_id);


--
-- Name: organism_relationship_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_relationship_idx2;
CREATE INDEX organism_relationship_idx2 ON organism_relationship USING btree (object_id);


--
-- Name: organism_relationship_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organism_relationship_idx3;
CREATE INDEX organism_relationship_idx3 ON organism_relationship USING btree (type_id);


--
-- Name: organismprop_pub_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organismprop_pub_idx1;
CREATE INDEX organismprop_pub_idx1 ON organismprop_pub USING btree (organismprop_id);


--
-- Name: organismprop_pub_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS organismprop_pub_idx2;
CREATE INDEX organismprop_pub_idx2 ON organismprop_pub USING btree (pub_id);


--
-- Name: phenotypeprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS phenotypeprop_idx1;
CREATE INDEX phenotypeprop_idx1 ON phenotypeprop USING btree (phenotype_id);


--
-- Name: phenotypeprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS phenotypeprop_idx2;
CREATE INDEX phenotypeprop_idx2 ON phenotypeprop USING btree (type_id);

--
-- Name: phylonode_parent_phylonode_id_idx; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS phylonode_parent_phylonode_id_idx;
CREATE INDEX phylonode_parent_phylonode_id_idx ON phylonode USING btree (parent_phylonode_id);


--
-- Name: INDEX phylotreeprop_c1; Type: COMMENT; Schema: public; Owner: chado
--

COMMENT ON INDEX phylotreeprop_c1 IS 'For any one phylotree, multivalued
property-value pairs must be differentiated by rank.';


--
-- Name: phylotreeprop_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS phylotreeprop_idx1;
CREATE INDEX phylotreeprop_idx1 ON phylotreeprop USING btree (phylotree_id);


--
-- Name: phylotreeprop_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS phylotreeprop_idx2;
CREATE INDEX phylotreeprop_idx2 ON phylotreeprop USING btree (type_id);


--
-- Name: project_analysis_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_analysis_idx1;
CREATE INDEX project_analysis_idx1 ON project_analysis USING btree (project_id);


--
-- Name: project_analysis_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_analysis_idx2;
CREATE INDEX project_analysis_idx2 ON project_analysis USING btree (analysis_id);

--
-- Name: project_dbxref_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_dbxref_idx1;
CREATE INDEX project_dbxref_idx1 ON project_dbxref USING btree (project_id);


--
-- Name: project_dbxref_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_dbxref_idx2;
CREATE INDEX project_dbxref_idx2 ON project_dbxref USING btree (dbxref_id);


--
-- Name: project_feature_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_feature_idx1;
CREATE INDEX project_feature_idx1 ON project_feature USING btree (feature_id);


--
-- Name: project_feature_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_feature_idx2;
CREATE INDEX project_feature_idx2 ON project_feature USING btree (project_id);


--
-- Name: project_stock_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_stock_idx1;
CREATE INDEX project_stock_idx1 ON project_stock USING btree (stock_id);


--
-- Name: project_stock_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS project_stock_idx2;
CREATE INDEX project_stock_idx2 ON project_stock USING btree (project_id);

--
-- Name: pubauthor_contact_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS pubauthor_contact_idx1;
CREATE INDEX pubauthor_contact_idx1 ON pubauthor USING btree (pubauthor_id);


--
-- Name: pubauthor_contact_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS pubauthor_contact_idx2;
CREATE INDEX pubauthor_contact_idx2 ON contact USING btree (contact_id);

--
-- Name: stock_feature_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_feature_idx1;
CREATE INDEX stock_feature_idx1 ON stock_feature USING btree (stock_feature_id);


--
-- Name: stock_feature_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_feature_idx2;
CREATE INDEX stock_feature_idx2 ON stock_feature USING btree (feature_id);


--
-- Name: stock_feature_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_feature_idx3;
CREATE INDEX stock_feature_idx3 ON stock_feature USING btree (stock_id);


--
-- Name: stock_feature_idx4; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_feature_idx4;
CREATE INDEX stock_feature_idx4 ON stock_feature USING btree (type_id);


--
-- Name: stock_featuremap_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_featuremap_idx1;
CREATE INDEX stock_featuremap_idx1 ON stock_featuremap USING btree (featuremap_id);


--
-- Name: stock_featuremap_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_featuremap_idx2;
CREATE INDEX stock_featuremap_idx2 ON stock_featuremap USING btree (stock_id);


--
-- Name: stock_featuremap_idx3; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_featuremap_idx3;
CREATE INDEX stock_featuremap_idx3 ON stock_featuremap USING btree (type_id);

--
-- Name: stock_library_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_library_idx1;
CREATE INDEX stock_library_idx1 ON stock_library USING btree (library_id);


--
-- Name: stock_library_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stock_library_idx2;
CREATE INDEX stock_library_idx2 ON stock_library USING btree (stock_id);

--
-- Name: stockcollection_db_idx1; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stockcollection_db_idx1;
CREATE INDEX stockcollection_db_idx1 ON stockcollection_db USING btree (stockcollection_id);


--
-- Name: stockcollection_db_idx2; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS stockcollection_db_idx2;
CREATE INDEX stockcollection_db_idx2 ON stockcollection_db USING btree (db_id);


--
-- Name: analysis_cvterm_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_cvterm DROP CONSTRAINT IF EXISTS analysis_cvterm_analysis_id_fkey;
ALTER TABLE ONLY analysis_cvterm
    ADD CONSTRAINT analysis_cvterm_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_cvterm DROP CONSTRAINT IF EXISTS analysis_cvterm_cvterm_id_fkey;
ALTER TABLE ONLY analysis_cvterm
    ADD CONSTRAINT analysis_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_dbxref_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_dbxref DROP CONSTRAINT IF EXISTS analysis_dbxref_analysis_id_fkey;
ALTER TABLE ONLY analysis_dbxref
    ADD CONSTRAINT analysis_dbxref_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_dbxref DROP CONSTRAINT IF EXISTS analysis_dbxref_dbxref_id_fkey;
ALTER TABLE ONLY analysis_dbxref
    ADD CONSTRAINT analysis_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_pub_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_pub DROP CONSTRAINT IF EXISTS analysis_pub_analysis_id_fkey;
ALTER TABLE ONLY analysis_pub
    ADD CONSTRAINT analysis_pub_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_pub DROP CONSTRAINT IF EXISTS analysis_pub_pub_id_fkey;
ALTER TABLE ONLY analysis_pub
    ADD CONSTRAINT analysis_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_relationship DROP CONSTRAINT IF EXISTS analysis_relationship_object_id_fkey;
ALTER TABLE ONLY analysis_relationship
    ADD CONSTRAINT analysis_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_relationship DROP CONSTRAINT IF EXISTS analysis_relationship_subject_id_fkey;
ALTER TABLE ONLY analysis_relationship
    ADD CONSTRAINT analysis_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: analysis_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE analysis_relationship DROP CONSTRAINT IF EXISTS analysis_relationship_type_id_fkey;
ALTER TABLE ONLY analysis_relationship
    ADD CONSTRAINT analysis_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;

--
-- Name: contactprop_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE contactprop DROP CONSTRAINT IF EXISTS contactprop_contact_id_fkey;
ALTER TABLE ONLY contactprop
    ADD CONSTRAINT contactprop_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE;


--
-- Name: contactprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE contactprop DROP CONSTRAINT IF EXISTS contactprop_type_id_fkey;
ALTER TABLE ONLY contactprop
    ADD CONSTRAINT contactprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: dbprop_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE dbprop DROP CONSTRAINT IF EXISTS dbprop_db_id_fkey;
ALTER TABLE ONLY dbprop
    ADD CONSTRAINT dbprop_db_id_fkey FOREIGN KEY (db_id) REFERENCES db(db_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: dbprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE dbprop DROP CONSTRAINT IF EXISTS dbprop_type_id_fkey;
ALTER TABLE ONLY dbprop
    ADD CONSTRAINT dbprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: feature_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE feature_contact DROP CONSTRAINT IF EXISTS feature_contact_contact_id_fkey;
ALTER TABLE ONLY feature_contact
    ADD CONSTRAINT feature_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE;


--
-- Name: feature_contact_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE feature_contact DROP CONSTRAINT IF EXISTS feature_contact_feature_id_fkey;
ALTER TABLE ONLY feature_contact
    ADD CONSTRAINT feature_contact_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;

--
-- Name: featuremap_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremap_contact DROP CONSTRAINT IF EXISTS featuremap_contact_contact_id_fkey;
ALTER TABLE ONLY featuremap_contact
    ADD CONSTRAINT featuremap_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE;


--
-- Name: featuremap_contact_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremap_contact DROP CONSTRAINT IF EXISTS featuremap_contact_featuremap_id_fkey;
ALTER TABLE ONLY featuremap_contact
    ADD CONSTRAINT featuremap_contact_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE;


--
-- Name: featuremap_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremap_dbxref DROP CONSTRAINT IF EXISTS featuremap_dbxref_dbxref_id_fkey;
ALTER TABLE ONLY featuremap_dbxref
    ADD CONSTRAINT featuremap_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE;


--
-- Name: featuremap_dbxref_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremap_dbxref DROP CONSTRAINT IF EXISTS featuremap_dbxref_featuremap_id_fkey;
ALTER TABLE ONLY featuremap_dbxref
    ADD CONSTRAINT featuremap_dbxref_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE;


--
-- Name: featuremap_organism_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremap_organism DROP CONSTRAINT IF EXISTS featuremap_organism_featuremap_id_fkey;
ALTER TABLE ONLY featuremap_organism
    ADD CONSTRAINT featuremap_organism_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE;


--
-- Name: featuremap_organism_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremap_organism DROP CONSTRAINT IF EXISTS featuremap_organism_organism_id_fkey;
ALTER TABLE ONLY featuremap_organism
    ADD CONSTRAINT featuremap_organism_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE;

--
-- Name: featuremapprop_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremapprop DROP CONSTRAINT IF EXISTS featuremapprop_featuremap_id_fkey;
ALTER TABLE ONLY featuremapprop
    ADD CONSTRAINT featuremapprop_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE;


--
-- Name: featuremapprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featuremapprop DROP CONSTRAINT IF EXISTS featuremapprop_type_id_fkey;
ALTER TABLE ONLY featuremapprop
    ADD CONSTRAINT featuremapprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;

--
-- Name: featureposprop_featurepos_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featureposprop DROP CONSTRAINT IF EXISTS featureposprop_featurepos_id_fkey;
ALTER TABLE ONLY featureposprop
    ADD CONSTRAINT featureposprop_featurepos_id_fkey FOREIGN KEY (featurepos_id) REFERENCES featurepos(featurepos_id) ON DELETE CASCADE;


--
-- Name: featureposprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE featureposprop DROP CONSTRAINT IF EXISTS featureposprop_type_id_fkey;
ALTER TABLE ONLY featureposprop
    ADD CONSTRAINT featureposprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: library_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_contact DROP CONSTRAINT IF EXISTS library_contact_contact_id_fkey;
ALTER TABLE ONLY library_contact
    ADD CONSTRAINT library_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE;


--
-- Name: library_contact_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_contact DROP CONSTRAINT IF EXISTS library_contact_library_id_fkey;
ALTER TABLE ONLY library_contact
    ADD CONSTRAINT library_contact_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE;

--
-- Name: library_expression_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_expression DROP CONSTRAINT IF EXISTS library_expression_expression_id_fkey;
ALTER TABLE ONLY library_expression
    ADD CONSTRAINT library_expression_expression_id_fkey FOREIGN KEY (expression_id) REFERENCES expression(expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_expression_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_expression DROP CONSTRAINT IF EXISTS library_expression_library_id_fkey;
ALTER TABLE ONLY library_expression
    ADD CONSTRAINT library_expression_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_expression_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_expression DROP CONSTRAINT IF EXISTS library_expression_pub_id_fkey;
ALTER TABLE ONLY library_expression
    ADD CONSTRAINT library_expression_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id);


--
-- Name: library_expressionprop_library_expression_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_expressionprop DROP CONSTRAINT IF EXISTS library_expressionprop_library_expression_id_fkey;
ALTER TABLE ONLY library_expressionprop
    ADD CONSTRAINT library_expressionprop_library_expression_id_fkey FOREIGN KEY (library_expression_id) REFERENCES library_expression(library_expression_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_expressionprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_expressionprop DROP CONSTRAINT IF EXISTS library_expressionprop_type_id_fkey;
ALTER TABLE ONLY library_expressionprop
    ADD CONSTRAINT library_expressionprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: library_featureprop_library_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_featureprop DROP CONSTRAINT IF EXISTS library_featureprop_library_feature_id_fkey;
ALTER TABLE ONLY library_featureprop
    ADD CONSTRAINT library_featureprop_library_feature_id_fkey FOREIGN KEY (library_feature_id) REFERENCES library_feature(library_feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_featureprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_featureprop DROP CONSTRAINT IF EXISTS library_featureprop_type_id_fkey;
ALTER TABLE ONLY library_featureprop
    ADD CONSTRAINT library_featureprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);


--
-- Name: library_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_relationship DROP CONSTRAINT IF EXISTS library_relationship_object_id_fkey;
ALTER TABLE ONLY library_relationship
    ADD CONSTRAINT library_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_relationship_pub_library_relationship_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_relationship_pub DROP CONSTRAINT IF EXISTS library_relationship_pub_library_relationship_id_fkey;
ALTER TABLE ONLY library_relationship_pub
    ADD CONSTRAINT library_relationship_pub_library_relationship_id_fkey FOREIGN KEY (library_relationship_id) REFERENCES library_relationship(library_relationship_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_relationship_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_relationship_pub DROP CONSTRAINT IF EXISTS library_relationship_pub_pub_id_fkey;
ALTER TABLE ONLY library_relationship_pub
    ADD CONSTRAINT library_relationship_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id);


--
-- Name: library_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_relationship DROP CONSTRAINT IF EXISTS library_relationship_subject_id_fkey;
ALTER TABLE ONLY library_relationship
    ADD CONSTRAINT library_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES library(library_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: library_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE library_relationship DROP CONSTRAINT IF EXISTS library_relationship_type_id_fkey;
ALTER TABLE ONLY library_relationship
    ADD CONSTRAINT library_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id);

--
-- Name: nd_experiment_analysis_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE nd_experiment_analysis DROP CONSTRAINT IF EXISTS nd_experiment_analysis_analysis_id_fkey;
ALTER TABLE ONLY nd_experiment_analysis
    ADD CONSTRAINT nd_experiment_analysis_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_analysis_nd_experiment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE nd_experiment_analysis DROP CONSTRAINT IF EXISTS nd_experiment_analysis_nd_experiment_id_fkey;
ALTER TABLE ONLY nd_experiment_analysis
    ADD CONSTRAINT nd_experiment_analysis_nd_experiment_id_fkey FOREIGN KEY (nd_experiment_id) REFERENCES nd_experiment(nd_experiment_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_experiment_analysis_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE nd_experiment_analysis DROP CONSTRAINT IF EXISTS nd_experiment_analysis_type_id_fkey;
ALTER TABLE ONLY nd_experiment_analysis
    ADD CONSTRAINT nd_experiment_analysis_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: nd_reagent_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE nd_reagent DROP CONSTRAINT IF EXISTS nd_reagent_feature_id_fkey;
ALTER TABLE ONLY nd_reagent
    ADD CONSTRAINT nd_reagent_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_cvterm_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_cvterm DROP CONSTRAINT IF EXISTS organism_cvterm_cvterm_id_fkey;
ALTER TABLE ONLY organism_cvterm
    ADD CONSTRAINT organism_cvterm_cvterm_id_fkey FOREIGN KEY (cvterm_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_cvterm_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_cvterm DROP CONSTRAINT IF EXISTS organism_cvterm_organism_id_fkey;
ALTER TABLE ONLY organism_cvterm
    ADD CONSTRAINT organism_cvterm_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_cvterm_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_cvterm DROP CONSTRAINT IF EXISTS organism_cvterm_pub_id_fkey;
ALTER TABLE ONLY organism_cvterm
    ADD CONSTRAINT organism_cvterm_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_cvtermprop_organism_cvterm_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_cvtermprop DROP CONSTRAINT IF EXISTS organism_cvtermprop_organism_cvterm_id_fkey;
ALTER TABLE ONLY organism_cvtermprop
    ADD CONSTRAINT organism_cvtermprop_organism_cvterm_id_fkey FOREIGN KEY (organism_cvterm_id) REFERENCES organism_cvterm(organism_cvterm_id) ON DELETE CASCADE;


--
-- Name: organism_cvtermprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_cvtermprop DROP CONSTRAINT IF EXISTS organism_cvtermprop_type_id_fkey;
ALTER TABLE ONLY organism_cvtermprop
    ADD CONSTRAINT organism_cvtermprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_pub_organism_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_pub DROP CONSTRAINT IF EXISTS organism_pub_organism_id_fkey;
ALTER TABLE ONLY organism_pub
    ADD CONSTRAINT organism_pub_organism_id_fkey FOREIGN KEY (organism_id) REFERENCES organism(organism_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_pub DROP CONSTRAINT IF EXISTS organism_pub_pub_id_fkey;
ALTER TABLE ONLY organism_pub
    ADD CONSTRAINT organism_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organism_relationship_object_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_relationship DROP CONSTRAINT IF EXISTS organism_relationship_object_id_fkey;
ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_object_id_fkey FOREIGN KEY (object_id) REFERENCES organism(organism_id) ON DELETE CASCADE;


--
-- Name: organism_relationship_subject_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_relationship DROP CONSTRAINT IF EXISTS organism_relationship_subject_id_fkey;
ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES organism(organism_id) ON DELETE CASCADE;


--
-- Name: organism_relationship_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism_relationship DROP CONSTRAINT IF EXISTS organism_relationship_type_id_fkey;
ALTER TABLE ONLY organism_relationship
    ADD CONSTRAINT organism_relationship_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;


--
-- Name: organism_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organism DROP CONSTRAINT IF EXISTS organism_type_id_fkey;
ALTER TABLE ONLY organism
    ADD CONSTRAINT organism_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE;

--
-- Name: organismprop_pub_organismprop_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organismprop_pub DROP CONSTRAINT IF EXISTS organismprop_pub_organismprop_id_fkey;
ALTER TABLE ONLY organismprop_pub
    ADD CONSTRAINT organismprop_pub_organismprop_id_fkey FOREIGN KEY (organismprop_id) REFERENCES organismprop(organismprop_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: organismprop_pub_pub_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE organismprop_pub DROP CONSTRAINT IF EXISTS organismprop_pub_pub_id_fkey;
ALTER TABLE ONLY organismprop_pub
    ADD CONSTRAINT organismprop_pub_pub_id_fkey FOREIGN KEY (pub_id) REFERENCES pub(pub_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phenotypeprop_phenotype_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE phenotypeprop DROP CONSTRAINT IF EXISTS phenotypeprop_phenotype_id_fkey;
ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_phenotype_id_fkey FOREIGN KEY (phenotype_id) REFERENCES phenotype(phenotype_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phenotypeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE phenotypeprop DROP CONSTRAINT IF EXISTS phenotypeprop_type_id_fkey;
ALTER TABLE ONLY phenotypeprop
    ADD CONSTRAINT phenotypeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phylotreeprop_phylotree_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE phylotreeprop DROP CONSTRAINT IF EXISTS phylotreeprop_phylotree_id_fkey;
ALTER TABLE ONLY phylotreeprop
    ADD CONSTRAINT phylotreeprop_phylotree_id_fkey FOREIGN KEY (phylotree_id) REFERENCES phylotree(phylotree_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: phylotreeprop_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE phylotreeprop DROP CONSTRAINT IF EXISTS phylotreeprop_type_id_fkey;
ALTER TABLE ONLY phylotreeprop
    ADD CONSTRAINT phylotreeprop_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_analysis_analysis_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_analysis DROP CONSTRAINT IF EXISTS project_analysis_analysis_id_fkey;
ALTER TABLE ONLY project_analysis
    ADD CONSTRAINT project_analysis_analysis_id_fkey FOREIGN KEY (analysis_id) REFERENCES analysis(analysis_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_analysis_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_analysis DROP CONSTRAINT IF EXISTS project_analysis_project_id_fkey;
ALTER TABLE ONLY project_analysis
    ADD CONSTRAINT project_analysis_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;

--
-- Name: project_dbxref_dbxref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_dbxref DROP CONSTRAINT IF EXISTS project_dbxref_dbxref_id_fkey;
ALTER TABLE ONLY project_dbxref
    ADD CONSTRAINT project_dbxref_dbxref_id_fkey FOREIGN KEY (dbxref_id) REFERENCES dbxref(dbxref_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_dbxref_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_dbxref DROP CONSTRAINT IF EXISTS project_dbxref_project_id_fkey;
ALTER TABLE ONLY project_dbxref
    ADD CONSTRAINT project_dbxref_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: project_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_feature DROP CONSTRAINT IF EXISTS project_feature_feature_id_fkey;
ALTER TABLE ONLY project_feature
    ADD CONSTRAINT project_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE;


--
-- Name: project_feature_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_feature DROP CONSTRAINT IF EXISTS project_feature_project_id_fkey;
ALTER TABLE ONLY project_feature
    ADD CONSTRAINT project_feature_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: project_stock_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_stock DROP CONSTRAINT IF EXISTS project_stock_project_id_fkey;
ALTER TABLE ONLY project_stock
    ADD CONSTRAINT project_stock_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(project_id) ON DELETE CASCADE;


--
-- Name: project_stock_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE project_stock DROP CONSTRAINT IF EXISTS project_stock_stock_id_fkey;
ALTER TABLE ONLY project_stock
    ADD CONSTRAINT project_stock_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE;


--
-- Name: pubauthor_contact_contact_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE pubauthor_contact DROP CONSTRAINT IF EXISTS pubauthor_contact_contact_id_fkey;
ALTER TABLE ONLY pubauthor_contact
    ADD CONSTRAINT pubauthor_contact_contact_id_fkey FOREIGN KEY (contact_id) REFERENCES contact(contact_id) ON DELETE CASCADE;


--
-- Name: pubauthor_contact_pubauthor_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE pubauthor_contact DROP CONSTRAINT IF EXISTS pubauthor_contact_pubauthor_id_fkey;
ALTER TABLE ONLY pubauthor_contact
    ADD CONSTRAINT pubauthor_contact_pubauthor_id_fkey FOREIGN KEY (pubauthor_id) REFERENCES pubauthor(pubauthor_id) ON DELETE CASCADE;


--
-- Name: stock_feature_feature_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_feature DROP CONSTRAINT IF EXISTS stock_feature_feature_id_fkey;
ALTER TABLE ONLY stock_feature
    ADD CONSTRAINT stock_feature_feature_id_fkey FOREIGN KEY (feature_id) REFERENCES feature(feature_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_feature_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_feature DROP CONSTRAINT IF EXISTS stock_feature_stock_id_fkey;
ALTER TABLE ONLY stock_feature
    ADD CONSTRAINT stock_feature_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_feature_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_feature DROP CONSTRAINT IF EXISTS stock_feature_type_id_fkey;
ALTER TABLE ONLY stock_feature
    ADD CONSTRAINT stock_feature_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_featuremap_featuremap_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_featuremap DROP CONSTRAINT IF EXISTS stock_featuremap_featuremap_id_fkey;
ALTER TABLE ONLY stock_featuremap
    ADD CONSTRAINT stock_featuremap_featuremap_id_fkey FOREIGN KEY (featuremap_id) REFERENCES featuremap(featuremap_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_featuremap_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_featuremap DROP CONSTRAINT IF EXISTS stock_featuremap_stock_id_fkey;
ALTER TABLE ONLY stock_featuremap
    ADD CONSTRAINT stock_featuremap_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;


--
-- Name: stock_featuremap_type_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_featuremap DROP CONSTRAINT IF EXISTS stock_featuremap_type_id_fkey;
ALTER TABLE ONLY stock_featuremap
    ADD CONSTRAINT stock_featuremap_type_id_fkey FOREIGN KEY (type_id) REFERENCES cvterm(cvterm_id) ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED;

--
-- Name: stock_library_library_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_library DROP CONSTRAINT IF EXISTS stock_library_library_id_fkey;
ALTER TABLE ONLY stock_library
    ADD CONSTRAINT stock_library_library_id_fkey FOREIGN KEY (library_id) REFERENCES library(library_id) ON DELETE CASCADE;


--
-- Name: stock_library_stock_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stock_library DROP CONSTRAINT IF EXISTS stock_library_stock_id_fkey;
ALTER TABLE ONLY stock_library
    ADD CONSTRAINT stock_library_stock_id_fkey FOREIGN KEY (stock_id) REFERENCES stock(stock_id) ON DELETE CASCADE;

--
-- Name: stockcollection_db_db_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stockcollection_db DROP CONSTRAINT IF EXISTS stockcollection_db_db_id_fkey;
ALTER TABLE ONLY stockcollection_db
    ADD CONSTRAINT stockcollection_db_db_id_fkey FOREIGN KEY (db_id) REFERENCES db(db_id) ON DELETE CASCADE;


--
-- Name: stockcollection_db_stockcollection_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: chado
--
ALTER TABLE stockcollection_db DROP CONSTRAINT IF EXISTS stockcollection_db_stockcollection_id_fkey;
ALTER TABLE ONLY stockcollection_db
    ADD CONSTRAINT stockcollection_db_stockcollection_id_fkey FOREIGN KEY (stockcollection_id) REFERENCES stockcollection(stockcollection_id) ON DELETE CASCADE;


--
-- Name: binloc_boxrange; Type: INDEX; Schema: public; Owner: chado; Tablespace: 
--
DROP INDEX IF EXISTS binloc_boxrange;
CREATE INDEX binloc_boxrange ON featureloc USING gist (boxrange(fmin, fmax));

SET search_path = so,public,pg_catalog;

--
-- Name: mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna AS
 SELECT feature.feature_id AS mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((cvterm.name)::text = 'mRNA_with_frameshift'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'mRNA'::text));


--
-- Name: a_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_box AS
 SELECT feature.feature_id AS a_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'A_box_type_1'::text) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'A_box'::text));


--
-- Name: a_box_type_1; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_box_type_1 AS
 SELECT feature.feature_id AS a_box_type_1_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_box_type_1'::text);


--
-- Name: a_box_type_2; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_box_type_2 AS
 SELECT feature.feature_id AS a_box_type_2_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_box_type_2'::text);


--
-- Name: a_minor_rna_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_minor_rna_motif AS
 SELECT feature.feature_id AS a_minor_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_minor_RNA_motif'::text);


--
-- Name: a_to_c_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_to_c_transversion AS
 SELECT feature.feature_id AS a_to_c_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_C_transversion'::text);


--
-- Name: a_to_g_transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_to_g_transition AS
 SELECT feature.feature_id AS a_to_g_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_G_transition'::text);


--
-- Name: a_to_t_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW a_to_t_transversion AS
 SELECT feature.feature_id AS a_to_t_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'A_to_T_transversion'::text);


--
-- Name: aberrant_processed_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aberrant_processed_transcript AS
 SELECT feature.feature_id AS aberrant_processed_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aberrant_processed_transcript'::text);


--
-- Name: active_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW active_peptide AS
 SELECT feature.feature_id AS active_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'active_peptide'::text);


--
-- Name: adaptive_island; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW adaptive_island AS
 SELECT feature.feature_id AS adaptive_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'adaptive_island'::text);


--
-- Name: alanine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alanine AS
 SELECT feature.feature_id AS alanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanine'::text);


--
-- Name: alanine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alanine_trna_primary_transcript AS
 SELECT feature.feature_id AS alanine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text);


--
-- Name: alanyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alanyl_trna AS
 SELECT feature.feature_id AS alanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alanyl_tRNA'::text);


--
-- Name: allele; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW allele AS
 SELECT feature.feature_id AS allele_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polymorphic_sequence_variant'::text) OR ((cvterm.name)::text = 'allele'::text));


--
-- Name: allelically_excluded; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW allelically_excluded AS
 SELECT feature.feature_id AS allelically_excluded_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allelically_excluded'::text);


--
-- Name: allelically_excluded_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW allelically_excluded_gene AS
 SELECT feature.feature_id AS allelically_excluded_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allelically_excluded_gene'::text);


--
-- Name: allopolyploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW allopolyploid AS
 SELECT feature.feature_id AS allopolyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'allopolyploid'::text);


--
-- Name: alpha_beta_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alpha_beta_motif AS
 SELECT feature.feature_id AS alpha_beta_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alpha_beta_motif'::text);


--
-- Name: alpha_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alpha_helix AS
 SELECT feature.feature_id AS alpha_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alpha_helix'::text);


--
-- Name: alteration_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alteration_attribute AS
 SELECT feature.feature_id AS alteration_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'chromosomal_variation_attribute'::text) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text));


--
-- Name: alternate_sequence_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alternate_sequence_site AS
 SELECT feature.feature_id AS alternate_sequence_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternate_sequence_site'::text);


--
-- Name: alternatively_spliced; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alternatively_spliced AS
 SELECT feature.feature_id AS alternatively_spliced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternatively_spliced'::text);


--
-- Name: alternatively_spliced_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW alternatively_spliced_transcript AS
 SELECT feature.feature_id AS alternatively_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'alternatively_spliced_transcript'::text);


--
-- Name: ambisense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ambisense_ssrna_viral_sequence AS
 SELECT feature.feature_id AS ambisense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text);


--
-- Name: amino_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW amino_acid AS
 SELECT feature.feature_id AS amino_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'catalytic_residue'::text) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'amino_acid'::text));


--
-- Name: amino_acid_deletion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW amino_acid_deletion AS
 SELECT feature.feature_id AS amino_acid_deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amino_acid_deletion'::text);


--
-- Name: amino_acid_insertion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW amino_acid_insertion AS
 SELECT feature.feature_id AS amino_acid_insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amino_acid_insertion'::text);


--
-- Name: amino_acid_substitution; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW amino_acid_substitution AS
 SELECT feature.feature_id AS amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'conservative_amino_acid_substitution'::text) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text));


--
-- Name: amplification_origin; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW amplification_origin AS
 SELECT feature.feature_id AS amplification_origin_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'amplification_origin'::text);


--
-- Name: anchor_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW anchor_binding_site AS
 SELECT feature.feature_id AS anchor_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anchor_binding_site'::text);


--
-- Name: anchor_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW anchor_region AS
 SELECT feature.feature_id AS anchor_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anchor_region'::text);


--
-- Name: aneuploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aneuploid AS
 SELECT feature.feature_id AS aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'hyperploid'::text) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text));


--
-- Name: aneuploid_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aneuploid_chromosome AS
 SELECT feature.feature_id AS aneuploid_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text));


--
-- Name: annotation_directed_improved_draft; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW annotation_directed_improved_draft AS
 SELECT feature.feature_id AS annotation_directed_improved_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'annotation_directed_improved_draft'::text);


--
-- Name: anticodon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW anticodon AS
 SELECT feature.feature_id AS anticodon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anticodon'::text);


--
-- Name: anticodon_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW anticodon_loop AS
 SELECT feature.feature_id AS anticodon_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'anticodon_loop'::text);


--
-- Name: antiparallel_beta_strand; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW antiparallel_beta_strand AS
 SELECT feature.feature_id AS antiparallel_beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antiparallel_beta_strand'::text);


--
-- Name: antisense; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW antisense AS
 SELECT feature.feature_id AS antisense_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antisense'::text);


--
-- Name: antisense_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW antisense_primary_transcript AS
 SELECT feature.feature_id AS antisense_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'antisense_primary_transcript'::text);


--
-- Name: antisense_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW antisense_rna AS
 SELECT feature.feature_id AS antisense_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'MicF_RNA'::text) OR ((cvterm.name)::text = 'antisense_RNA'::text));


--
-- Name: apicoplast_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW apicoplast_chromosome AS
 SELECT feature.feature_id AS apicoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_chromosome'::text);


--
-- Name: apicoplast_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW apicoplast_gene AS
 SELECT feature.feature_id AS apicoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_gene'::text);


--
-- Name: apicoplast_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW apicoplast_sequence AS
 SELECT feature.feature_id AS apicoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'apicoplast_sequence'::text);


--
-- Name: aptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aptamer AS
 SELECT feature.feature_id AS aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'DNA_aptamer'::text) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'aptamer'::text));


--
-- Name: archaeal_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW archaeal_intron AS
 SELECT feature.feature_id AS archaeal_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'archaeal_intron'::text);


--
-- Name: archaeosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW archaeosine AS
 SELECT feature.feature_id AS archaeosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'archaeosine'::text);


--
-- Name: arg_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW arg_trna_primary_transcript AS
 SELECT feature.feature_id AS arg_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text);


--
-- Name: arginine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW arginine AS
 SELECT feature.feature_id AS arginine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginine'::text);


--
-- Name: arginyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW arginyl_trna AS
 SELECT feature.feature_id AS arginyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'arginyl_tRNA'::text);


--
-- Name: ars; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ars AS
 SELECT feature.feature_id AS ars_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ARS'::text);


--
-- Name: asparagine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asparagine AS
 SELECT feature.feature_id AS asparagine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparagine'::text);


--
-- Name: asparagine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asparagine_trna_primary_transcript AS
 SELECT feature.feature_id AS asparagine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text);


--
-- Name: asparaginyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asparaginyl_trna AS
 SELECT feature.feature_id AS asparaginyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asparaginyl_tRNA'::text);


--
-- Name: aspartic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aspartic_acid AS
 SELECT feature.feature_id AS aspartic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartic_acid'::text);


--
-- Name: aspartic_acid_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aspartic_acid_trna_primary_transcript AS
 SELECT feature.feature_id AS aspartic_acid_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text);


--
-- Name: aspartyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aspartyl_trna AS
 SELECT feature.feature_id AS aspartyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'aspartyl_tRNA'::text);


--
-- Name: aspe_primer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW aspe_primer AS
 SELECT feature.feature_id AS aspe_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ASPE_primer'::text);


--
-- Name: assembly; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assembly AS
 SELECT feature.feature_id AS assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'sequence_assembly'::text) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'assembly'::text));


--
-- Name: assembly_component; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assembly_component AS
 SELECT feature.feature_id AS assembly_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'contig'::text) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'assembly_component'::text));


--
-- Name: assembly_error_correction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assembly_error_correction AS
 SELECT feature.feature_id AS assembly_error_correction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assembly_error_correction'::text);


--
-- Name: assortment_derived_aneuploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assortment_derived_aneuploid AS
 SELECT feature.feature_id AS assortment_derived_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_aneuploid'::text);


--
-- Name: assortment_derived_deficiency; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assortment_derived_deficiency AS
 SELECT feature.feature_id AS assortment_derived_deficiency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_deficiency'::text);


--
-- Name: assortment_derived_deficiency_plus_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assortment_derived_deficiency_plus_duplication AS
 SELECT feature.feature_id AS assortment_derived_deficiency_plus_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text);


--
-- Name: assortment_derived_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assortment_derived_duplication AS
 SELECT feature.feature_id AS assortment_derived_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'assortment_derived_duplication'::text);


--
-- Name: assortment_derived_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW assortment_derived_variation AS
 SELECT feature.feature_id AS assortment_derived_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'assortment_derived_duplication'::text) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text));


--
-- Name: asx_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asx_motif AS
 SELECT feature.feature_id AS asx_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_motif'::text);


--
-- Name: asx_turn; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asx_turn AS
 SELECT feature.feature_id AS asx_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn'::text));


--
-- Name: asx_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asx_turn_left_handed_type_one AS
 SELECT feature.feature_id AS asx_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text);


--
-- Name: asx_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asx_turn_left_handed_type_two AS
 SELECT feature.feature_id AS asx_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text);


--
-- Name: asx_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asx_turn_right_handed_type_one AS
 SELECT feature.feature_id AS asx_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text);


--
-- Name: asx_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asx_turn_right_handed_type_two AS
 SELECT feature.feature_id AS asx_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text);


--
-- Name: asymmetric_rna_internal_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW asymmetric_rna_internal_loop AS
 SELECT feature.feature_id AS asymmetric_rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'K_turn_RNA_motif'::text) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text));


--
-- Name: attb_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attb_site AS
 SELECT feature.feature_id AS attb_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attB_site'::text);


--
-- Name: attc_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attc_site AS
 SELECT feature.feature_id AS attc_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attC_site'::text);


--
-- Name: attctn_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attctn_site AS
 SELECT feature.feature_id AS attctn_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attCtn_site'::text);


--
-- Name: attenuator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attenuator AS
 SELECT feature.feature_id AS attenuator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attenuator'::text);


--
-- Name: atti_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW atti_site AS
 SELECT feature.feature_id AS atti_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attI_site'::text);


--
-- Name: attl_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attl_site AS
 SELECT feature.feature_id AS attl_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attL_site'::text);


--
-- Name: attp_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attp_site AS
 SELECT feature.feature_id AS attp_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attP_site'::text);


--
-- Name: attr_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW attr_site AS
 SELECT feature.feature_id AS attr_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'attR_site'::text);


--
-- Name: au_rich_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW au_rich_element AS
 SELECT feature.feature_id AS au_rich_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'AU_rich_element'::text);


--
-- Name: autocatalytically_spliced_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW autocatalytically_spliced_intron AS
 SELECT feature.feature_id AS autocatalytically_spliced_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'group_I_intron'::text) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text));


--
-- Name: autopolyploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW autopolyploid AS
 SELECT feature.feature_id AS autopolyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'autopolyploid'::text);


--
-- Name: autoregulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW autoregulated AS
 SELECT feature.feature_id AS autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'autoregulated'::text));


--
-- Name: autosynaptic_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW autosynaptic_chromosome AS
 SELECT feature.feature_id AS autosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text));


--
-- Name: b_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW b_box AS
 SELECT feature.feature_id AS b_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'B_box'::text);


--
-- Name: bac; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bac AS
 SELECT feature.feature_id AS bac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC'::text);


--
-- Name: bac_cloned_genomic_insert; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bac_cloned_genomic_insert AS
 SELECT feature.feature_id AS bac_cloned_genomic_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text);


--
-- Name: bac_end; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bac_end AS
 SELECT feature.feature_id AS bac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BAC_end'::text);


--
-- Name: bacterial_rnapol_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bacterial_rnapol_promoter AS
 SELECT feature.feature_id AS bacterial_rnapol_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text));


--
-- Name: bacterial_rnapol_promoter_sigma54; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bacterial_rnapol_promoter_sigma54 AS
 SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma54_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text);


--
-- Name: bacterial_rnapol_promoter_sigma_70; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bacterial_rnapol_promoter_sigma_70 AS
 SELECT feature.feature_id AS bacterial_rnapol_promoter_sigma_70_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text);


--
-- Name: bacterial_terminator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bacterial_terminator AS
 SELECT feature.feature_id AS bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text));


--
-- Name: base; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW base AS
 SELECT feature.feature_id AS base_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'modified_RNA_base_feature'::text) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'base'::text));


--
-- Name: base_call_error_correction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW base_call_error_correction AS
 SELECT feature.feature_id AS base_call_error_correction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'base_call_error_correction'::text);


--
-- Name: base_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW base_pair AS
 SELECT feature.feature_id AS base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'WC_base_pair'::text) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'base_pair'::text));


--
-- Name: benign_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW benign_variant AS
 SELECT feature.feature_id AS benign_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'benign_variant'::text);


--
-- Name: beta_bulge; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_bulge AS
 SELECT feature.feature_id AS beta_bulge_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge'::text);


--
-- Name: beta_bulge_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_bulge_loop AS
 SELECT feature.feature_id AS beta_bulge_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'beta_bulge_loop_five'::text) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text));


--
-- Name: beta_bulge_loop_five; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_bulge_loop_five AS
 SELECT feature.feature_id AS beta_bulge_loop_five_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge_loop_five'::text);


--
-- Name: beta_bulge_loop_six; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_bulge_loop_six AS
 SELECT feature.feature_id AS beta_bulge_loop_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_bulge_loop_six'::text);


--
-- Name: beta_strand; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_strand AS
 SELECT feature.feature_id AS beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'antiparallel_beta_strand'::text) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'beta_strand'::text));


--
-- Name: beta_turn; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn AS
 SELECT feature.feature_id AS beta_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn'::text));


--
-- Name: beta_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_left_handed_type_one AS
 SELECT feature.feature_id AS beta_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text);


--
-- Name: beta_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_left_handed_type_two AS
 SELECT feature.feature_id AS beta_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text);


--
-- Name: beta_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_right_handed_type_one AS
 SELECT feature.feature_id AS beta_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text);


--
-- Name: beta_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_right_handed_type_two AS
 SELECT feature.feature_id AS beta_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text);


--
-- Name: beta_turn_type_eight; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_type_eight AS
 SELECT feature.feature_id AS beta_turn_type_eight_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_eight'::text);


--
-- Name: beta_turn_type_six; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_type_six AS
 SELECT feature.feature_id AS beta_turn_type_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'beta_turn_type_six_a'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text));


--
-- Name: beta_turn_type_six_a; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_type_six_a AS
 SELECT feature.feature_id AS beta_turn_type_six_a_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'beta_turn_type_six_a_one'::text) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text));


--
-- Name: beta_turn_type_six_a_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_type_six_a_one AS
 SELECT feature.feature_id AS beta_turn_type_six_a_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text);


--
-- Name: beta_turn_type_six_a_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_type_six_a_two AS
 SELECT feature.feature_id AS beta_turn_type_six_a_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text);


--
-- Name: beta_turn_type_six_b; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW beta_turn_type_six_b AS
 SELECT feature.feature_id AS beta_turn_type_six_b_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'beta_turn_type_six_b'::text);


--
-- Name: bidirectional_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bidirectional_promoter AS
 SELECT feature.feature_id AS bidirectional_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bidirectional_promoter'::text);


--
-- Name: binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW binding_site AS
 SELECT feature.feature_id AS binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_binding_site'::text) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'binding_site'::text));


--
-- Name: biochemical_region_of_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW biochemical_region_of_peptide AS
 SELECT feature.feature_id AS biochemical_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'post_translationally_modified_region'::text) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text));


--
-- Name: biological_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW biological_region AS
 SELECT feature.feature_id AS biological_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
cvterm.name)::text = 'sequence_secondary_structure'::text) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'biological_region'::text));


--
-- Name: biomaterial_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW biomaterial_region AS
 SELECT feature.feature_id AS biomaterial_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'reagent'::text) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'biomaterial_region'::text));


--
-- Name: bipartite_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bipartite_duplication AS
 SELECT feature.feature_id AS bipartite_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bipartite_duplication'::text);


--
-- Name: bipartite_inversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bipartite_inversion AS
 SELECT feature.feature_id AS bipartite_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bipartite_inversion'::text);


--
-- Name: blocked_reading_frame; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW blocked_reading_frame AS
 SELECT feature.feature_id AS blocked_reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blocked_reading_frame'::text);


--
-- Name: blunt_end_restriction_enzyme_cleavage_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW blunt_end_restriction_enzyme_cleavage_junction AS
 SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text);


--
-- Name: blunt_end_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW blunt_end_restriction_enzyme_cleavage_site AS
 SELECT feature.feature_id AS blunt_end_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text);


--
-- Name: bound_by_factor; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bound_by_factor AS
 SELECT feature.feature_id AS bound_by_factor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'bound_by_protein'::text) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'bound_by_factor'::text));


--
-- Name: bound_by_nucleic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bound_by_nucleic_acid AS
 SELECT feature.feature_id AS bound_by_nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bound_by_nucleic_acid'::text);


--
-- Name: bound_by_protein; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bound_by_protein AS
 SELECT feature.feature_id AS bound_by_protein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'bound_by_protein'::text);


--
-- Name: branch_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW branch_site AS
 SELECT feature.feature_id AS branch_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'branch_site'::text);


--
-- Name: bred_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bred_motif AS
 SELECT feature.feature_id AS bred_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BREd_motif'::text);


--
-- Name: breu_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW breu_motif AS
 SELECT feature.feature_id AS breu_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'BREu_motif'::text);


--
-- Name: bruno_response_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW bruno_response_element AS
 SELECT feature.feature_id AS bruno_response_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Bruno_response_element'::text);


--
-- Name: c_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_box AS
 SELECT feature.feature_id AS c_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_box'::text);


--
-- Name: c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_cluster AS
 SELECT feature.feature_id AS c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_cluster'::text);


--
-- Name: c_d_box_snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_d_box_snorna AS
 SELECT feature.feature_id AS c_d_box_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'U14_snoRNA'::text) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text));


--
-- Name: c_d_box_snorna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_d_box_snorna_encoding AS
 SELECT feature.feature_id AS c_d_box_snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text);


--
-- Name: c_d_box_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_d_box_snorna_primary_transcript AS
 SELECT feature.feature_id AS c_d_box_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text);


--
-- Name: c_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_gene AS
 SELECT feature.feature_id AS c_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_gene'::text);


--
-- Name: c_terminal_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_terminal_region AS
 SELECT feature.feature_id AS c_terminal_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'c_terminal_region'::text);


--
-- Name: c_to_a_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_to_a_transversion AS
 SELECT feature.feature_id AS c_to_a_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_A_transversion'::text);


--
-- Name: c_to_g_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_to_g_transversion AS
 SELECT feature.feature_id AS c_to_g_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_G_transversion'::text);


--
-- Name: c_to_t_transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_to_t_transition AS
 SELECT feature.feature_id AS c_to_t_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text) OR ((cvterm.name)::text = 'C_to_T_transition'::text));


--
-- Name: c_to_t_transition_at_pcpg_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW c_to_t_transition_at_pcpg_site AS
 SELECT feature.feature_id AS c_to_t_transition_at_pcpg_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text);


--
-- Name: caat_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW caat_signal AS
 SELECT feature.feature_id AS caat_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CAAT_signal'::text);


--
-- Name: canonical_five_prime_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW canonical_five_prime_splice_site AS
 SELECT feature.feature_id AS canonical_five_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text);


--
-- Name: canonical_three_prime_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW canonical_three_prime_splice_site AS
 SELECT feature.feature_id AS canonical_three_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text);


--
-- Name: cap; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cap AS
 SELECT feature.feature_id AS cap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cap'::text);


--
-- Name: capped; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW capped AS
 SELECT feature.feature_id AS capped_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped'::text);


--
-- Name: capped_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW capped_mrna AS
 SELECT feature.feature_id AS capped_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped_mRNA'::text);


--
-- Name: capped_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW capped_primary_transcript AS
 SELECT feature.feature_id AS capped_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'capped_primary_transcript'::text);


--
-- Name: cassette_array_member; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cassette_array_member AS
 SELECT feature.feature_id AS cassette_array_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cassette_array_member'::text);


--
-- Name: cassette_pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cassette_pseudogene AS
 SELECT feature.feature_id AS cassette_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cassette_pseudogene'::text);


--
-- Name: catalytic_residue; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW catalytic_residue AS
 SELECT feature.feature_id AS catalytic_residue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catalytic_residue'::text);


--
-- Name: catmat_left_handed_four; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW catmat_left_handed_four AS
 SELECT feature.feature_id AS catmat_left_handed_four_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_left_handed_four'::text);


--
-- Name: catmat_left_handed_three; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW catmat_left_handed_three AS
 SELECT feature.feature_id AS catmat_left_handed_three_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_left_handed_three'::text);


--
-- Name: catmat_right_handed_four; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW catmat_right_handed_four AS
 SELECT feature.feature_id AS catmat_right_handed_four_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_right_handed_four'::text);


--
-- Name: catmat_right_handed_three; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW catmat_right_handed_three AS
 SELECT feature.feature_id AS catmat_right_handed_three_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'catmat_right_handed_three'::text);


--
-- Name: cca_tail; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cca_tail AS
 SELECT feature.feature_id AS cca_tail_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CCA_tail'::text);


--
-- Name: cdna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cdna AS
 SELECT feature.feature_id AS cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'single_stranded_cDNA'::text) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text));


--
-- Name: cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cdna_clone AS
 SELECT feature.feature_id AS cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'validated_cDNA_clone'::text) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text));


--
-- Name: cdna_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cdna_match AS
 SELECT feature.feature_id AS cdna_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cDNA_match'::text);


--
-- Name: cds; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds AS
 SELECT feature.feature_id AS cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'edited_CDS'::text) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS'::text));


--
-- Name: cds_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_fragment AS
 SELECT feature.feature_id AS cds_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_fragment'::text);


--
-- Name: cds_independently_known; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_independently_known AS
 SELECT feature.feature_id AS cds_independently_known_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_independently_known'::text);


--
-- Name: cds_predicted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_predicted AS
 SELECT feature.feature_id AS cds_predicted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'orphan_CDS'::text) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text));


--
-- Name: cds_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_region AS
 SELECT feature.feature_id AS cds_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'coding_start'::text) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'CDS_region'::text));


--
-- Name: cds_supported_by_domain_match_data; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_supported_by_domain_match_data AS
 SELECT feature.feature_id AS cds_supported_by_domain_match_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text);


--
-- Name: cds_supported_by_est_or_cdna_data; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_supported_by_est_or_cdna_data AS
 SELECT feature.feature_id AS cds_supported_by_est_or_cdna_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text);


--
-- Name: cds_supported_by_sequence_similarity_data; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cds_supported_by_sequence_similarity_data AS
 SELECT feature.feature_id AS cds_supported_by_sequence_similarity_data_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text));


--
-- Name: central_hydrophobic_region_of_signal_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW central_hydrophobic_region_of_signal_peptide AS
 SELECT feature.feature_id AS central_hydrophobic_region_of_signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text);


--
-- Name: centromere; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW centromere AS
 SELECT feature.feature_id AS centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'point_centromere'::text) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'centromere'::text));


--
-- Name: centromere_dna_element_i; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW centromere_dna_element_i AS
 SELECT feature.feature_id AS centromere_dna_element_i_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_I'::text);


--
-- Name: centromere_dna_element_ii; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW centromere_dna_element_ii AS
 SELECT feature.feature_id AS centromere_dna_element_ii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_II'::text);


--
-- Name: centromere_dna_element_iii; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW centromere_dna_element_iii AS
 SELECT feature.feature_id AS centromere_dna_element_iii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'centromere_DNA_Element_III'::text);


--
-- Name: centromeric_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW centromeric_repeat AS
 SELECT feature.feature_id AS centromeric_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text));


--
-- Name: chimeric_cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chimeric_cdna_clone AS
 SELECT feature.feature_id AS chimeric_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chimeric_cDNA_clone'::text);


--
-- Name: chip_seq_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chip_seq_region AS
 SELECT feature.feature_id AS chip_seq_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CHiP_seq_region'::text);


--
-- Name: chloroplast_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chloroplast_chromosome AS
 SELECT feature.feature_id AS chloroplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chloroplast_chromosome'::text);


--
-- Name: chloroplast_dna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chloroplast_dna AS
 SELECT feature.feature_id AS chloroplast_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chloroplast_DNA'::text);


--
-- Name: chloroplast_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chloroplast_sequence AS
 SELECT feature.feature_id AS chloroplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chloroplast_DNA'::text) OR ((cvterm.name)::text = 'chloroplast_sequence'::text));


--
-- Name: chromoplast_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromoplast_chromosome AS
 SELECT feature.feature_id AS chromoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_chromosome'::text);


--
-- Name: chromoplast_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromoplast_gene AS
 SELECT feature.feature_id AS chromoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_gene'::text);


--
-- Name: chromoplast_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromoplast_sequence AS
 SELECT feature.feature_id AS chromoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromoplast_sequence'::text);


--
-- Name: chromosomal_deletion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_deletion AS
 SELECT feature.feature_id AS chromosomal_deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text));


--
-- Name: chromosomal_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_duplication AS
 SELECT feature.feature_id AS chromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((cvterm.name)::text = 'interchromosomal_duplication'::text) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text));


--
-- Name: chromosomal_inversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_inversion AS
 SELECT feature.feature_id AS chromosomal_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text));


--
-- Name: chromosomal_regulatory_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_regulatory_element AS
 SELECT feature.feature_id AS chromosomal_regulatory_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'matrix_attachment_site'::text) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text));


--
-- Name: chromosomal_structural_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_structural_element AS
 SELECT feature.feature_id AS chromosomal_structural_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'centromere'::text) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text));


--
-- Name: chromosomal_translocation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_translocation AS
 SELECT feature.feature_id AS chromosomal_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'translocation_element'::text) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text));


--
-- Name: chromosomal_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_transposition AS
 SELECT feature.feature_id AS chromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text));


--
-- Name: chromosomal_variation_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomal_variation_attribute AS
 SELECT feature.feature_id AS chromosomal_variation_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'intrachromosomal'::text) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text));


--
-- Name: chromosomally_aberrant_genome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosomally_aberrant_genome AS
 SELECT feature.feature_id AS chromosomally_aberrant_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text);


--
-- Name: chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome AS
 SELECT feature.feature_id AS chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'mitochondrial_chromosome'::text) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome'::text));


--
-- Name: chromosome_arm; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_arm AS
 SELECT feature.feature_id AS chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_arm'::text);


--
-- Name: chromosome_band; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_band AS
 SELECT feature.feature_id AS chromosome_band_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_band'::text);


--
-- Name: chromosome_breakage_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_breakage_sequence AS
 SELECT feature.feature_id AS chromosome_breakage_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_breakage_sequence'::text);


--
-- Name: chromosome_breakpoint; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_breakpoint AS
 SELECT feature.feature_id AS chromosome_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'inversion_breakpoint'::text) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text));


--
-- Name: chromosome_fission; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_fission AS
 SELECT feature.feature_id AS chromosome_fission_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'chromosome_fission'::text);


--
-- Name: chromosome_number_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_number_variation AS
 SELECT feature.feature_id AS chromosome_number_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'aneuploid'::text) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text));


--
-- Name: chromosome_part; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_part AS
 SELECT feature.feature_id AS chromosome_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text));


--
-- Name: chromosome_structure_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_structure_variation AS
 SELECT feature.feature_id AS chromosome_structure_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'free_chromosome_arm'::text) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text));


--
-- Name: chromosome_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW chromosome_variation AS
 SELECT feature.feature_id AS chromosome_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'assortment_derived_variation'::text) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosome_variation'::text));


--
-- Name: circular; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW circular AS
 SELECT feature.feature_id AS circular_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular'::text);


--
-- Name: circular_double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW circular_double_stranded_dna_chromosome AS
 SELECT feature.feature_id AS circular_double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text);


--
-- Name: circular_double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW circular_double_stranded_rna_chromosome AS
 SELECT feature.feature_id AS circular_double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text);


--
-- Name: circular_single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW circular_single_stranded_dna_chromosome AS
 SELECT feature.feature_id AS circular_single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text);


--
-- Name: circular_single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW circular_single_stranded_rna_chromosome AS
 SELECT feature.feature_id AS circular_single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text);


--
-- Name: cis_regulatory_frameshift_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cis_regulatory_frameshift_element AS
 SELECT feature.feature_id AS cis_regulatory_frameshift_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text);


--
-- Name: cis_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cis_splice_site AS
 SELECT feature.feature_id AS cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'five_prime_cis_splice_site'::text) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text));


--
-- Name: class_i_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW class_i_rna AS
 SELECT feature.feature_id AS class_i_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'class_I_RNA'::text);


--
-- Name: class_ii_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW class_ii_rna AS
 SELECT feature.feature_id AS class_ii_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'class_II_RNA'::text);


--
-- Name: cleaved_for_gpi_anchor_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cleaved_for_gpi_anchor_region AS
 SELECT feature.feature_id AS cleaved_for_gpi_anchor_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text);


--
-- Name: cleaved_initiator_methionine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cleaved_initiator_methionine AS
 SELECT feature.feature_id AS cleaved_initiator_methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cleaved_initiator_methionine'::text);


--
-- Name: cleaved_peptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cleaved_peptide_region AS
 SELECT feature.feature_id AS cleaved_peptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'cleaved_initiator_methionine'::text) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text));


--
-- Name: clip; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW clip AS
 SELECT feature.feature_id AS clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_clip'::text) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'clip'::text));


--
-- Name: clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW clone AS
 SELECT feature.feature_id AS clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'genomic_clone'::text) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'clone'::text));


--
-- Name: clone_end; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW clone_end AS
 SELECT feature.feature_id AS clone_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_end'::text);


--
-- Name: clone_insert; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW clone_insert AS
 SELECT feature.feature_id AS clone_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'cloned_cDNA_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'clone_insert'::text));


--
-- Name: clone_insert_end; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW clone_insert_end AS
 SELECT feature.feature_id AS clone_insert_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_insert_end'::text);


--
-- Name: clone_insert_start; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW clone_insert_start AS
 SELECT feature.feature_id AS clone_insert_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'clone_insert_start'::text);


--
-- Name: cloned_cdna_insert; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cloned_cdna_insert AS
 SELECT feature.feature_id AS cloned_cdna_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cloned_cDNA_insert'::text);


--
-- Name: cloned_genomic_insert; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cloned_genomic_insert AS
 SELECT feature.feature_id AS cloned_genomic_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text));


--
-- Name: cloned_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cloned_region AS
 SELECT feature.feature_id AS cloned_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cloned_region'::text);


--
-- Name: coding_conserved_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coding_conserved_region AS
 SELECT feature.feature_id AS coding_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_conserved_region'::text);


--
-- Name: coding_end; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coding_end AS
 SELECT feature.feature_id AS coding_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_end'::text);


--
-- Name: coding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coding_exon AS
 SELECT feature.feature_id AS coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'interior_coding_exon'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'coding_exon'::text));


--
-- Name: coding_region_of_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coding_region_of_exon AS
 SELECT feature.feature_id AS coding_region_of_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text));


--
-- Name: coding_sequence_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coding_sequence_variant AS
 SELECT feature.feature_id AS coding_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'codon_variant'::text) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text));


--
-- Name: coding_start; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coding_start AS
 SELECT feature.feature_id AS coding_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coding_start'::text);


--
-- Name: codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW codon AS
 SELECT feature.feature_id AS codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'recoded_codon'::text) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'codon'::text));


--
-- Name: codon_redefined; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW codon_redefined AS
 SELECT feature.feature_id AS codon_redefined_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'codon_redefined'::text);


--
-- Name: codon_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW codon_variant AS
 SELECT feature.feature_id AS codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'initiator_codon_change'::text) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'codon_variant'::text));


--
-- Name: coiled_coil; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW coiled_coil AS
 SELECT feature.feature_id AS coiled_coil_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'coiled_coil'::text);


--
-- Name: cointegrated_plasmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cointegrated_plasmid AS
 SELECT feature.feature_id AS cointegrated_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cointegrated_plasmid'::text);


--
-- Name: common_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW common_variant AS
 SELECT feature.feature_id AS common_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'common_variant'::text);


--
-- Name: compensatory_transcript_secondary_structure_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW compensatory_transcript_secondary_structure_variant AS
 SELECT feature.feature_id AS compensatory_transcript_secondary_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text);


--
-- Name: complex_3d_structural_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW complex_3d_structural_variant AS
 SELECT feature.feature_id AS complex_3d_structural_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_3D_structural_variant'::text);


--
-- Name: complex_change_in_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW complex_change_in_transcript AS
 SELECT feature.feature_id AS complex_change_in_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_change_in_transcript'::text);


--
-- Name: complex_change_of_translational_product_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW complex_change_of_translational_product_variant AS
 SELECT feature.feature_id AS complex_change_of_translational_product_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text);


--
-- Name: complex_chromosomal_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW complex_chromosomal_mutation AS
 SELECT feature.feature_id AS complex_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_chromosomal_mutation'::text);


--
-- Name: complex_structural_alteration; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW complex_structural_alteration AS
 SELECT feature.feature_id AS complex_structural_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_structural_alteration'::text);


--
-- Name: complex_substitution; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW complex_substitution AS
 SELECT feature.feature_id AS complex_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'complex_substitution'::text);


--
-- Name: compositionally_biased_region_of_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW compositionally_biased_region_of_peptide AS
 SELECT feature.feature_id AS compositionally_biased_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text);


--
-- Name: compound_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW compound_chromosome AS
 SELECT feature.feature_id AS compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'compound_chromosome_arm'::text) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text));


--
-- Name: compound_chromosome_arm; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW compound_chromosome_arm AS
 SELECT feature.feature_id AS compound_chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'compound_chromosome_arm'::text);


--
-- Name: conformational_change_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conformational_change_variant AS
 SELECT feature.feature_id AS conformational_change_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conformational_change_variant'::text);


--
-- Name: conformational_switch; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conformational_switch AS
 SELECT feature.feature_id AS conformational_switch_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conformational_switch'::text);


--
-- Name: conjugative_transposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conjugative_transposon AS
 SELECT feature.feature_id AS conjugative_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conjugative_transposon'::text);


--
-- Name: consensus; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW consensus AS
 SELECT feature.feature_id AS consensus_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'consensus'::text);


--
-- Name: consensus_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW consensus_mrna AS
 SELECT feature.feature_id AS consensus_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'consensus_mRNA'::text);


--
-- Name: consensus_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW consensus_region AS
 SELECT feature.feature_id AS consensus_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'consensus_mRNA'::text) OR ((cvterm.name)::text = 'consensus_region'::text));


--
-- Name: conservative_amino_acid_substitution; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conservative_amino_acid_substitution AS
 SELECT feature.feature_id AS conservative_amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text);


--
-- Name: conservative_missense_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conservative_missense_codon AS
 SELECT feature.feature_id AS conservative_missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'conservative_missense_codon'::text);


--
-- Name: conserved; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conserved AS
 SELECT feature.feature_id AS conserved_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'homologous'::text) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'conserved'::text));


--
-- Name: conserved_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW conserved_region AS
 SELECT feature.feature_id AS conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'coding_conserved_region'::text) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'conserved_region'::text));


--
-- Name: contig; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW contig AS
 SELECT feature.feature_id AS contig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig'::text);


--
-- Name: contig_collection; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW contig_collection AS
 SELECT feature.feature_id AS contig_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig_collection'::text);


--
-- Name: contig_read; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW contig_read AS
 SELECT feature.feature_id AS contig_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'contig_read'::text);


--
-- Name: copy_number_change; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW copy_number_change AS
 SELECT feature.feature_id AS copy_number_change_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_change'::text);


--
-- Name: copy_number_gain; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW copy_number_gain AS
 SELECT feature.feature_id AS copy_number_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_gain'::text);


--
-- Name: copy_number_loss; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW copy_number_loss AS
 SELECT feature.feature_id AS copy_number_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'copy_number_loss'::text);


--
-- Name: copy_number_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW copy_number_variation AS
 SELECT feature.feature_id AS copy_number_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'copy_number_gain'::text) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text));


--
-- Name: core_promoter_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW core_promoter_element AS
 SELECT feature.feature_id AS core_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'INR_motif'::text) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text));


--
-- Name: cosmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cosmid AS
 SELECT feature.feature_id AS cosmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cosmid'::text);


--
-- Name: cpg_island; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cpg_island AS
 SELECT feature.feature_id AS cpg_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CpG_island'::text);


--
-- Name: crispr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW crispr AS
 SELECT feature.feature_id AS crispr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CRISPR'::text);


--
-- Name: crm; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW crm AS
 SELECT feature.feature_id AS crm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'locus_control_region'::text) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'CRM'::text));


--
-- Name: cross_genome_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cross_genome_match AS
 SELECT feature.feature_id AS cross_genome_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cross_genome_match'::text);


--
-- Name: cryptic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic AS
 SELECT feature.feature_id AS cryptic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic'::text);


--
-- Name: cryptic_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic_gene AS
 SELECT feature.feature_id AS cryptic_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'cryptic_gene'::text));


--
-- Name: cryptic_prophage; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic_prophage AS
 SELECT feature.feature_id AS cryptic_prophage_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_prophage'::text);


--
-- Name: cryptic_splice_acceptor; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic_splice_acceptor AS
 SELECT feature.feature_id AS cryptic_splice_acceptor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_acceptor'::text);


--
-- Name: cryptic_splice_donor; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic_splice_donor AS
 SELECT feature.feature_id AS cryptic_splice_donor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_donor'::text);


--
-- Name: cryptic_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic_splice_site AS
 SELECT feature.feature_id AS cryptic_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptic_splice_site'::text);


--
-- Name: cryptic_splice_site_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptic_splice_site_variant AS
 SELECT feature.feature_id AS cryptic_splice_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'cryptic_splice_acceptor'::text) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text));


--
-- Name: cryptogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cryptogene AS
 SELECT feature.feature_id AS cryptogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cryptogene'::text);


--
-- Name: csrb_rsmb_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW csrb_rsmb_rna AS
 SELECT feature.feature_id AS csrb_rsmb_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text);


--
-- Name: ct_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ct_gene AS
 SELECT feature.feature_id AS ct_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ct_gene'::text);


--
-- Name: ctg_start_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ctg_start_codon AS
 SELECT feature.feature_id AS ctg_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'CTG_start_codon'::text);


--
-- Name: cyanelle_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cyanelle_chromosome AS
 SELECT feature.feature_id AS cyanelle_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_chromosome'::text);


--
-- Name: cyanelle_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cyanelle_gene AS
 SELECT feature.feature_id AS cyanelle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_gene'::text);


--
-- Name: cyanelle_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cyanelle_sequence AS
 SELECT feature.feature_id AS cyanelle_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyanelle_sequence'::text);


--
-- Name: cyclic_translocation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cyclic_translocation AS
 SELECT feature.feature_id AS cyclic_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cyclic_translocation'::text);


--
-- Name: cysteine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cysteine AS
 SELECT feature.feature_id AS cysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteine'::text);


--
-- Name: cysteine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cysteine_trna_primary_transcript AS
 SELECT feature.feature_id AS cysteine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text);


--
-- Name: cysteinyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cysteinyl_trna AS
 SELECT feature.feature_id AS cysteinyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cysteinyl_tRNA'::text);


--
-- Name: cytoplasmic_polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW cytoplasmic_polypeptide_region AS
 SELECT feature.feature_id AS cytoplasmic_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text);


--
-- Name: d_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_cluster AS
 SELECT feature.feature_id AS d_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_cluster'::text);


--
-- Name: d_dj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_dj_c_cluster AS
 SELECT feature.feature_id AS d_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_C_cluster'::text);


--
-- Name: d_dj_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_dj_cluster AS
 SELECT feature.feature_id AS d_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_cluster'::text);


--
-- Name: d_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_dj_j_c_cluster AS
 SELECT feature.feature_id AS d_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text);


--
-- Name: d_dj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_dj_j_cluster AS
 SELECT feature.feature_id AS d_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_DJ_J_cluster'::text);


--
-- Name: d_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_gene AS
 SELECT feature.feature_id AS d_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_gene'::text);


--
-- Name: d_gene_recombination_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_gene_recombination_feature AS
 SELECT feature.feature_id AS d_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text));


--
-- Name: d_interchr_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_interchr_transposition AS
 SELECT feature.feature_id AS d_interchr_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text);


--
-- Name: d_intrachr_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_intrachr_transposition AS
 SELECT feature.feature_id AS d_intrachr_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text);


--
-- Name: d_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_j_c_cluster AS
 SELECT feature.feature_id AS d_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_J_C_cluster'::text);


--
-- Name: d_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_j_cluster AS
 SELECT feature.feature_id AS d_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_J_cluster'::text);


--
-- Name: d_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW d_loop AS
 SELECT feature.feature_id AS d_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'D_loop'::text);


--
-- Name: dart_marker; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dart_marker AS
 SELECT feature.feature_id AS dart_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DArT_marker'::text);


--
-- Name: databank_entry; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW databank_entry AS
 SELECT feature.feature_id AS databank_entry_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'databank_entry'::text);


--
-- Name: dcaps_primer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dcaps_primer AS
 SELECT feature.feature_id AS dcaps_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dCAPS_primer'::text);


--
-- Name: dce; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dce AS
 SELECT feature.feature_id AS dce_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE'::text);


--
-- Name: dce_si; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dce_si AS
 SELECT feature.feature_id AS dce_si_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SI'::text);


--
-- Name: dce_sii; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dce_sii AS
 SELECT feature.feature_id AS dce_sii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SII'::text);


--
-- Name: dce_siii; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dce_siii AS
 SELECT feature.feature_id AS dce_siii_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DCE_SIII'::text);


--
-- Name: de_novo_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW de_novo_variant AS
 SELECT feature.feature_id AS de_novo_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'de_novo_variant'::text);


--
-- Name: decayed_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW decayed_exon AS
 SELECT feature.feature_id AS decayed_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decayed_exon'::text);


--
-- Name: decreased_polyadenylation_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW decreased_polyadenylation_variant AS
 SELECT feature.feature_id AS decreased_polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text);


--
-- Name: decreased_transcript_level_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW decreased_transcript_level_variant AS
 SELECT feature.feature_id AS decreased_transcript_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcript_level_variant'::text);


--
-- Name: decreased_transcript_stability_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW decreased_transcript_stability_variant AS
 SELECT feature.feature_id AS decreased_transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text);


--
-- Name: decreased_transcription_rate_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW decreased_transcription_rate_variant AS
 SELECT feature.feature_id AS decreased_transcription_rate_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text);


--
-- Name: decreased_translational_product_level; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW decreased_translational_product_level AS
 SELECT feature.feature_id AS decreased_translational_product_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'decreased_translational_product_level'::text);


--
-- Name: defective_conjugative_transposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW defective_conjugative_transposon AS
 SELECT feature.feature_id AS defective_conjugative_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'defective_conjugative_transposon'::text);


--
-- Name: deficient_inversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW deficient_inversion AS
 SELECT feature.feature_id AS deficient_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_inversion'::text);


--
-- Name: deficient_translocation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW deficient_translocation AS
 SELECT feature.feature_id AS deficient_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deficient_translocation'::text);


--
-- Name: deletion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW deletion AS
 SELECT feature.feature_id AS deletion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion'::text);


--
-- Name: deletion_breakpoint; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW deletion_breakpoint AS
 SELECT feature.feature_id AS deletion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion_breakpoint'::text);


--
-- Name: deletion_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW deletion_junction AS
 SELECT feature.feature_id AS deletion_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'deletion_junction'::text);


--
-- Name: designed_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW designed_sequence AS
 SELECT feature.feature_id AS designed_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'designed_sequence'::text);


--
-- Name: dexstrosynaptic_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dexstrosynaptic_chromosome AS
 SELECT feature.feature_id AS dexstrosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text);


--
-- Name: dhu_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dhu_loop AS
 SELECT feature.feature_id AS dhu_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DHU_loop'::text);


--
-- Name: dicistronic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dicistronic AS
 SELECT feature.feature_id AS dicistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic'::text);


--
-- Name: dicistronic_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dicistronic_mrna AS
 SELECT feature.feature_id AS dicistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic_mRNA'::text);


--
-- Name: dicistronic_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dicistronic_primary_transcript AS
 SELECT feature.feature_id AS dicistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dicistronic_primary_transcript'::text);


--
-- Name: dicistronic_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dicistronic_transcript AS
 SELECT feature.feature_id AS dicistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text));


--
-- Name: dif_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dif_site AS
 SELECT feature.feature_id AS dif_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dif_site'::text);


--
-- Name: dihydrouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dihydrouridine AS
 SELECT feature.feature_id AS dihydrouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dihydrouridine'::text);


--
-- Name: dinucleotide_repeat_microsatellite_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dinucleotide_repeat_microsatellite_feature AS
 SELECT feature.feature_id AS dinucleotide_repeat_microsatellite_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text);


--
-- Name: diplotype; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW diplotype AS
 SELECT feature.feature_id AS diplotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'diplotype'::text);


--
-- Name: direct; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW direct AS
 SELECT feature.feature_id AS direct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'direct'::text);


--
-- Name: direct_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW direct_repeat AS
 SELECT feature.feature_id AS direct_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'target_site_duplication'::text) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text));


--
-- Name: direct_tandem_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW direct_tandem_duplication AS
 SELECT feature.feature_id AS direct_tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'direct_tandem_duplication'::text);


--
-- Name: direction_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW direction_attribute AS
 SELECT feature.feature_id AS direction_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'forward'::text) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text));


--
-- Name: disease_associated_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW disease_associated_variant AS
 SELECT feature.feature_id AS disease_associated_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'disease_associated_variant'::text);


--
-- Name: disease_causing_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW disease_causing_variant AS
 SELECT feature.feature_id AS disease_causing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'disease_causing_variant'::text);


--
-- Name: dispersed_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dispersed_repeat AS
 SELECT feature.feature_id AS dispersed_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dispersed_repeat'::text);


--
-- Name: distal_promoter_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW distal_promoter_element AS
 SELECT feature.feature_id AS distal_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'distal_promoter_element'::text);


--
-- Name: distant_three_prime_recoding_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW distant_three_prime_recoding_signal AS
 SELECT feature.feature_id AS distant_three_prime_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text);


--
-- Name: dj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dj_c_cluster AS
 SELECT feature.feature_id AS dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_C_cluster'::text);


--
-- Name: dj_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dj_gene AS
 SELECT feature.feature_id AS dj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_gene'::text);


--
-- Name: dj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dj_j_c_cluster AS
 SELECT feature.feature_id AS dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_J_C_cluster'::text);


--
-- Name: dj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dj_j_cluster AS
 SELECT feature.feature_id AS dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DJ_J_cluster'::text);


--
-- Name: dmv1_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dmv1_motif AS
 SELECT feature.feature_id AS dmv1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv1_motif'::text);


--
-- Name: dmv2_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dmv2_motif AS
 SELECT feature.feature_id AS dmv2_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv2_motif'::text);


--
-- Name: dmv3_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dmv3_motif AS
 SELECT feature.feature_id AS dmv3_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv3_motif'::text);


--
-- Name: dmv4_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dmv4_motif AS
 SELECT feature.feature_id AS dmv4_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv4_motif'::text);


--
-- Name: dmv5_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dmv5_motif AS
 SELECT feature.feature_id AS dmv5_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DMv5_motif'::text);


--
-- Name: dna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna AS
 SELECT feature.feature_id AS dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'cDNA'::text) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'DNA'::text));


--
-- Name: dna_aptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_aptamer AS
 SELECT feature.feature_id AS dna_aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNA_aptamer'::text);


--
-- Name: dna_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_binding_site AS
 SELECT feature.feature_id AS dna_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_DNA_contact'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text));


--
-- Name: dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_chromosome AS
 SELECT feature.feature_id AS dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text));


--
-- Name: dna_constraint_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_constraint_sequence AS
 SELECT feature.feature_id AS dna_constraint_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNA_constraint_sequence'::text);


--
-- Name: dna_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_motif AS
 SELECT feature.feature_id AS dna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'PSE_motif'::text) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text));


--
-- Name: dna_sequence_secondary_structure; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_sequence_secondary_structure AS
 SELECT feature.feature_id AS dna_sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'i_motif'::text) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text));


--
-- Name: dna_transposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dna_transposon AS
 SELECT feature.feature_id AS dna_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'terminal_inverted_repeat_element'::text) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text));


--
-- Name: dnasei_hypersensitive_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dnasei_hypersensitive_site AS
 SELECT feature.feature_id AS dnasei_hypersensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text);


--
-- Name: dnazyme; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dnazyme AS
 SELECT feature.feature_id AS dnazyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DNAzyme'::text);


--
-- Name: double; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW double AS
 SELECT feature.feature_id AS double_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'double'::text);


--
-- Name: double_stranded_cdna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW double_stranded_cdna AS
 SELECT feature.feature_id AS double_stranded_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'double_stranded_cDNA'::text);


--
-- Name: double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW double_stranded_dna_chromosome AS
 SELECT feature.feature_id AS double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text));


--
-- Name: double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW double_stranded_rna_chromosome AS
 SELECT feature.feature_id AS double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text));


--
-- Name: downstream_gene_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW downstream_gene_variant AS
 SELECT feature.feature_id AS downstream_gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = '5KB_downstream_variant'::text) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text));


--
-- Name: dpe1_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dpe1_motif AS
 SELECT feature.feature_id AS dpe1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DPE1_motif'::text);


--
-- Name: dpe_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dpe_motif AS
 SELECT feature.feature_id AS dpe_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DPE_motif'::text);


--
-- Name: dre_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dre_motif AS
 SELECT feature.feature_id AS dre_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'DRE_motif'::text);


--
-- Name: ds_dna_viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ds_dna_viral_sequence AS
 SELECT feature.feature_id AS ds_dna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text);


--
-- Name: ds_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ds_oligo AS
 SELECT feature.feature_id AS ds_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'RNAi_reagent'::text) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text));


--
-- Name: ds_rna_viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ds_rna_viral_sequence AS
 SELECT feature.feature_id AS ds_rna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text);


--
-- Name: dsra_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dsra_rna AS
 SELECT feature.feature_id AS dsra_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'GcvB_RNA'::text) OR ((cvterm.name)::text = 'DsrA_RNA'::text));


--
-- Name: duplicated_pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW duplicated_pseudogene AS
 SELECT feature.feature_id AS duplicated_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'duplicated_pseudogene'::text);


--
-- Name: duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW duplication AS
 SELECT feature.feature_id AS duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'tandem_duplication'::text) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'duplication'::text));


--
-- Name: duplication_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW duplication_attribute AS
 SELECT feature.feature_id AS duplication_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free'::text) OR ((cvterm.name)::text = 'duplication_attribute'::text));


--
-- Name: dye_terminator_read; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW dye_terminator_read AS
 SELECT feature.feature_id AS dye_terminator_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'dye_terminator_read'::text);


--
-- Name: e_box_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW e_box_motif AS
 SELECT feature.feature_id AS e_box_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'E_box_motif'::text);


--
-- Name: edited; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW edited AS
 SELECT feature.feature_id AS edited_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited'::text);


--
-- Name: edited_cds; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW edited_cds AS
 SELECT feature.feature_id AS edited_cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_CDS'::text);


--
-- Name: edited_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW edited_mrna AS
 SELECT feature.feature_id AS edited_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_mRNA'::text);


--
-- Name: edited_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW edited_transcript AS
 SELECT feature.feature_id AS edited_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text));


--
-- Name: edited_transcript_by_a_to_i_substitution; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW edited_transcript_by_a_to_i_substitution AS
 SELECT feature.feature_id AS edited_transcript_by_a_to_i_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text);


--
-- Name: edited_transcript_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW edited_transcript_feature AS
 SELECT feature.feature_id AS edited_transcript_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'pre_edited_region'::text) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text));


--
-- Name: editing_block; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW editing_block AS
 SELECT feature.feature_id AS editing_block_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_block'::text);


--
-- Name: editing_domain; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW editing_domain AS
 SELECT feature.feature_id AS editing_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_domain'::text);


--
-- Name: editing_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW editing_variant AS
 SELECT feature.feature_id AS editing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'editing_variant'::text);


--
-- Name: elongated_in_frame_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_in_frame_polypeptide_c_terminal AS
 SELECT feature.feature_id AS elongated_in_frame_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text);


--
-- Name: elongated_in_frame_polypeptide_n_terminal_elongation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_in_frame_polypeptide_n_terminal_elongation AS
 SELECT feature.feature_id AS elongated_in_frame_polypeptide_n_terminal_elongation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text);


--
-- Name: elongated_out_of_frame_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_out_of_frame_polypeptide_c_terminal AS
 SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text);


--
-- Name: elongated_out_of_frame_polypeptide_n_terminal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_out_of_frame_polypeptide_n_terminal AS
 SELECT feature.feature_id AS elongated_out_of_frame_polypeptide_n_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text);


--
-- Name: elongated_polypeptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_polypeptide AS
 SELECT feature.feature_id AS elongated_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text));


--
-- Name: elongated_polypeptide_c_terminal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_polypeptide_c_terminal AS
 SELECT feature.feature_id AS elongated_polypeptide_c_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text));


--
-- Name: elongated_polypeptide_n_terminal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW elongated_polypeptide_n_terminal AS
 SELECT feature.feature_id AS elongated_polypeptide_n_terminal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text));


--
-- Name: encodes_1_polypeptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_1_polypeptide AS
 SELECT feature.feature_id AS encodes_1_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_1_polypeptide'::text);


--
-- Name: encodes_alternate_transcription_start_sites; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_alternate_transcription_start_sites AS
 SELECT feature.feature_id AS encodes_alternate_transcription_start_sites_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text);


--
-- Name: encodes_alternately_spliced_transcripts; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_alternately_spliced_transcripts AS
 SELECT feature.feature_id AS encodes_alternately_spliced_transcripts_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'encodes_1_polypeptide'::text) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text));


--
-- Name: encodes_different_polypeptides_different_stop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_different_polypeptides_different_stop AS
 SELECT feature.feature_id AS encodes_different_polypeptides_different_stop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text);


--
-- Name: encodes_disjoint_polypeptides; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_disjoint_polypeptides AS
 SELECT feature.feature_id AS encodes_disjoint_polypeptides_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text);


--
-- Name: encodes_greater_than_1_polypeptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_greater_than_1_polypeptide AS
 SELECT feature.feature_id AS encodes_greater_than_1_polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text));


--
-- Name: encodes_overlapping_peptides; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_overlapping_peptides AS
 SELECT feature.feature_id AS encodes_overlapping_peptides_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text));


--
-- Name: encodes_overlapping_peptides_different_start; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_overlapping_peptides_different_start AS
 SELECT feature.feature_id AS encodes_overlapping_peptides_different_start_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text);


--
-- Name: encodes_overlapping_polypeptides_different_start_and_stop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW encodes_overlapping_polypeptides_different_start_and_stop AS
 SELECT feature.feature_id AS encodes_overlapping_polypeptides_different_start_and_stop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text);


--
-- Name: endogenous_retroviral_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW endogenous_retroviral_gene AS
 SELECT feature.feature_id AS endogenous_retroviral_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endogenous_retroviral_gene'::text);


--
-- Name: endogenous_retroviral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW endogenous_retroviral_sequence AS
 SELECT feature.feature_id AS endogenous_retroviral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text);


--
-- Name: endonuclease_spliced_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW endonuclease_spliced_intron AS
 SELECT feature.feature_id AS endonuclease_spliced_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'archaeal_intron'::text) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text));


--
-- Name: endosomal_localization_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW endosomal_localization_signal AS
 SELECT feature.feature_id AS endosomal_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'endosomal_localization_signal'::text);


--
-- Name: engineered; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered AS
 SELECT feature.feature_id AS engineered_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered'::text);


--
-- Name: engineered_episome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_episome AS
 SELECT feature.feature_id AS engineered_episome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_episome'::text);


--
-- Name: engineered_foreign_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_foreign_gene AS
 SELECT feature.feature_id AS engineered_foreign_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text));


--
-- Name: engineered_foreign_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_foreign_region AS
 SELECT feature.feature_id AS engineered_foreign_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text));


--
-- Name: engineered_foreign_repetitive_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_foreign_repetitive_element AS
 SELECT feature.feature_id AS engineered_foreign_repetitive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text);


--
-- Name: engineered_foreign_transposable_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_foreign_transposable_element AS
 SELECT feature.feature_id AS engineered_foreign_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text);


--
-- Name: engineered_foreign_transposable_element_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_foreign_transposable_element_gene AS
 SELECT feature.feature_id AS engineered_foreign_transposable_element_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text);


--
-- Name: engineered_fusion_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_fusion_gene AS
 SELECT feature.feature_id AS engineered_fusion_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_fusion_gene'::text);


--
-- Name: engineered_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_gene AS
 SELECT feature.feature_id AS engineered_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text));


--
-- Name: engineered_insert; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_insert AS
 SELECT feature.feature_id AS engineered_insert_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_insert'::text);


--
-- Name: engineered_plasmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_plasmid AS
 SELECT feature.feature_id AS engineered_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text));


--
-- Name: engineered_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_region AS
 SELECT feature.feature_id AS engineered_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'engineered_gene'::text) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_region'::text));


--
-- Name: engineered_rescue_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_rescue_region AS
 SELECT feature.feature_id AS engineered_rescue_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_rescue_region'::text);


--
-- Name: engineered_tag; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_tag AS
 SELECT feature.feature_id AS engineered_tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'engineered_tag'::text);


--
-- Name: engineered_transposable_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW engineered_transposable_element AS
 SELECT feature.feature_id AS engineered_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'engineered_transposable_element'::text));


--
-- Name: enhancer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW enhancer AS
 SELECT feature.feature_id AS enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'enhancer_bound_by_factor'::text) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'enhancer'::text));


--
-- Name: enhancer_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW enhancer_binding_site AS
 SELECT feature.feature_id AS enhancer_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_binding_site'::text);


--
-- Name: enhancer_bound_by_factor; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW enhancer_bound_by_factor AS
 SELECT feature.feature_id AS enhancer_bound_by_factor_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_bound_by_factor'::text);


--
-- Name: enhancer_trap_construct; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW enhancer_trap_construct AS
 SELECT feature.feature_id AS enhancer_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'enhancer_trap_construct'::text);


--
-- Name: enzymatic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW enzymatic AS
 SELECT feature.feature_id AS enzymatic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ribozymic'::text) OR ((cvterm.name)::text = 'enzymatic'::text));


--
-- Name: enzymatic_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW enzymatic_rna AS
 SELECT feature.feature_id AS enzymatic_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'ribozyme'::text) OR ((cvterm.name)::text = 'enzymatic_RNA'::text));


--
-- Name: epigenetically_modified; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW epigenetically_modified AS
 SELECT feature.feature_id AS epigenetically_modified_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'imprinted'::text) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text));


--
-- Name: epigenetically_modified_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW epigenetically_modified_gene AS
 SELECT feature.feature_id AS epigenetically_modified_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text));


--
-- Name: epigenetically_modified_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW epigenetically_modified_region AS
 SELECT feature.feature_id AS epigenetically_modified_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'modified_base'::text) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text));


--
-- Name: episome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW episome AS
 SELECT feature.feature_id AS episome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_episome'::text) OR ((cvterm.name)::text = 'episome'::text));


--
-- Name: epitope; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW epitope AS
 SELECT feature.feature_id AS epitope_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'epitope'::text);


--
-- Name: epoxyqueuosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW epoxyqueuosine AS
 SELECT feature.feature_id AS epoxyqueuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'epoxyqueuosine'::text);


--
-- Name: est; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW est AS
 SELECT feature.feature_id AS est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'five_prime_EST'::text) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'EST'::text));


--
-- Name: est_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW est_match AS
 SELECT feature.feature_id AS est_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'EST_match'::text);


--
-- Name: eukaryotic_terminator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW eukaryotic_terminator AS
 SELECT feature.feature_id AS eukaryotic_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text));


--
-- Name: exemplar; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exemplar AS
 SELECT feature.feature_id AS exemplar_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exemplar'::text);


--
-- Name: exemplar_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exemplar_mrna AS
 SELECT feature.feature_id AS exemplar_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exemplar_mRNA'::text);


--
-- Name: exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exon AS
 SELECT feature.feature_id AS exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'coding_exon'::text) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'exon'::text));


--
-- Name: exon_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exon_junction AS
 SELECT feature.feature_id AS exon_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_junction'::text);


--
-- Name: exon_loss; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exon_loss AS
 SELECT feature.feature_id AS exon_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_loss'::text);


--
-- Name: exon_of_single_exon_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exon_of_single_exon_gene AS
 SELECT feature.feature_id AS exon_of_single_exon_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exon_of_single_exon_gene'::text);


--
-- Name: exon_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exon_region AS
 SELECT feature.feature_id AS exon_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'noncoding_region_of_exon'::text) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text));


--
-- Name: exon_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exon_variant AS
 SELECT feature.feature_id AS exon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'coding_sequence_variant'::text) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'exon_variant'::text));


--
-- Name: exonic_splice_enhancer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW exonic_splice_enhancer AS
 SELECT feature.feature_id AS exonic_splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'exonic_splice_enhancer'::text);


--
-- Name: experimental_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW experimental_feature AS
 SELECT feature.feature_id AS experimental_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'match_part'::text) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'experimental_feature'::text));


--
-- Name: experimental_feature_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW experimental_feature_attribute AS
 SELECT feature.feature_id AS experimental_feature_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'score'::text) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text));


--
-- Name: experimental_result_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW experimental_result_region AS
 SELECT feature.feature_id AS experimental_result_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'overlapping_feature_set'::text) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text));


--
-- Name: experimentally_defined_binding_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW experimentally_defined_binding_region AS
 SELECT feature.feature_id AS experimentally_defined_binding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'CHiP_seq_region'::text) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text));


--
-- Name: experimentally_determined; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW experimentally_determined AS
 SELECT feature.feature_id AS experimentally_determined_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'experimentally_determined'::text);


--
-- Name: expressed_sequence_assembly; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW expressed_sequence_assembly AS
 SELECT feature.feature_id AS expressed_sequence_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'expressed_sequence_assembly'::text);


--
-- Name: expressed_sequence_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW expressed_sequence_match AS
 SELECT feature.feature_id AS expressed_sequence_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'EST_match'::text) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text));


--
-- Name: external_transcribed_spacer_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW external_transcribed_spacer_region AS
 SELECT feature.feature_id AS external_transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'external_transcribed_spacer_region'::text);


--
-- Name: extrachromosomal_mobile_genetic_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW extrachromosomal_mobile_genetic_element AS
 SELECT feature.feature_id AS extrachromosomal_mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'natural_transposable_element'::text) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text));


--
-- Name: extramembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW extramembrane_polypeptide_region AS
 SELECT feature.feature_id AS extramembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text));


--
-- Name: feature_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW feature_attribute AS
 SELECT feature.feature_id AS feature_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript_attribute'::text) OR ((cvterm.name)::text = 'bound_by_factor'::text)) OR ((cvterm.name)::text = 'flanked'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text)) OR ((cvterm.name)::text = 'retrotransposed'::text)) OR ((cvterm.name)::text = 'transgenic'::text)) OR ((cvterm.name)::text = 'natural'::text)) OR ((cvterm.name)::text = 'engineered'::text)) OR ((cvterm.name)::text = 'foreign'::text)) OR ((cvterm.name)::text = 'fusion'::text)) OR ((cvterm.name)::text = 'rescue'::text)) OR ((cvterm.name)::text = 'wild_type'::text)) OR ((cvterm.name)::text = 'conserved'::text)) OR ((cvterm.name)::text = 'status'::text)) OR ((cvterm.name)::text = 'intermediate'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text)) OR ((cvterm.name)::text = 'cryptic'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text)) OR ((cvterm.name)::text = 'enzymatic'::text)) OR ((cvterm.name)::text = 'mobile'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text)) OR ((cvterm.name)::text = 'edited'::text)) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'bound_by_protein'::text)) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'floxed'::text)) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'protein_coding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'homologous'::text)) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'fragmentary'::text)) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'single'::text)) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'forward'::text)) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'ribozymic'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'score'::text)) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'feature_attribute'::text));


--
-- Name: fingerprint_map; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fingerprint_map AS
 SELECT feature.feature_id AS fingerprint_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fingerprint_map'::text);


--
-- Name: finished_genome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW finished_genome AS
 SELECT feature.feature_id AS finished_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'finished_genome'::text);


--
-- Name: five_aminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_aminomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_aminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text);


--
-- Name: five_carbamoylmethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carbamoylmethyluridine AS
 SELECT feature.feature_id AS five_carbamoylmethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text);


--
-- Name: five_carboxyhydroxymethyl_uridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carboxyhydroxymethyl_uridine AS
 SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text);


--
-- Name: five_carboxyhydroxymethyl_uridine_methyl_ester; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carboxyhydroxymethyl_uridine_methyl_ester AS
 SELECT feature.feature_id AS five_carboxyhydroxymethyl_uridine_methyl_ester_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text);


--
-- Name: five_carboxymethylaminomethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carboxymethylaminomethyl_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text);


--
-- Name: five_carboxymethylaminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carboxymethylaminomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_carboxymethylaminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text);


--
-- Name: five_carboxymethylaminomethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carboxymethylaminomethyluridine AS
 SELECT feature.feature_id AS five_carboxymethylaminomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text);


--
-- Name: five_carboxymethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_carboxymethyluridine AS
 SELECT feature.feature_id AS five_carboxymethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carboxymethyluridine'::text);


--
-- Name: five_cm_2_prime_o_methu; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_cm_2_prime_o_methu AS
 SELECT feature.feature_id AS five_cm_2_prime_o_methu_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text);


--
-- Name: five_formyl_two_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_formyl_two_prime_o_methylcytidine AS
 SELECT feature.feature_id AS five_formyl_two_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text);


--
-- Name: five_formylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_formylcytidine AS
 SELECT feature.feature_id AS five_formylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_formylcytidine'::text);


--
-- Name: five_hydroxymethylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_hydroxymethylcytidine AS
 SELECT feature.feature_id AS five_hydroxymethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text);


--
-- Name: five_hydroxyuridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_hydroxyuridine AS
 SELECT feature.feature_id AS five_hydroxyuridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_hydroxyuridine'::text);


--
-- Name: five_isopentenylaminomethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_isopentenylaminomethyl_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS five_isopentenylaminomethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text);


--
-- Name: five_isopentenylaminomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_isopentenylaminomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_isopentenylaminomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text);


--
-- Name: five_isopentenylaminomethyl_uridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_isopentenylaminomethyl_uridine AS
 SELECT feature.feature_id AS five_isopentenylaminomethyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text);


--
-- Name: five_mam_2_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_mam_2_thiouridine AS
 SELECT feature.feature_id AS five_mam_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text);


--
-- Name: five_mcm_2_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_mcm_2_thiouridine AS
 SELECT feature.feature_id AS five_mcm_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text);


--
-- Name: five_methoxycarbonylmethyl_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methoxycarbonylmethyl_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS five_methoxycarbonylmethyl_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text);


--
-- Name: five_methoxycarbonylmethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methoxycarbonylmethyluridine AS
 SELECT feature.feature_id AS five_methoxycarbonylmethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text);


--
-- Name: five_methoxyuridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methoxyuridine AS
 SELECT feature.feature_id AS five_methoxyuridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methoxyuridine'::text);


--
-- Name: five_methyl_2_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methyl_2_thiouridine AS
 SELECT feature.feature_id AS five_methyl_2_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text);


--
-- Name: five_methylaminomethyl_two_selenouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methylaminomethyl_two_selenouridine AS
 SELECT feature.feature_id AS five_methylaminomethyl_two_selenouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text);


--
-- Name: five_methylaminomethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methylaminomethyluridine AS
 SELECT feature.feature_id AS five_methylaminomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylaminomethyluridine'::text);


--
-- Name: five_methylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methylcytidine AS
 SELECT feature.feature_id AS five_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methylcytidine'::text);


--
-- Name: five_methyldihydrouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methyldihydrouridine AS
 SELECT feature.feature_id AS five_methyldihydrouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyldihydrouridine'::text);


--
-- Name: five_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_methyluridine AS
 SELECT feature.feature_id AS five_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_methyluridine'::text);


--
-- Name: five_prime_cis_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_cis_splice_site AS
 SELECT feature.feature_id AS five_prime_cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'canonical_five_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text));


--
-- Name: five_prime_clip; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_clip AS
 SELECT feature.feature_id AS five_prime_clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_clip'::text);


--
-- Name: five_prime_coding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_coding_exon AS
 SELECT feature.feature_id AS five_prime_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon'::text);


--
-- Name: five_prime_coding_exon_coding_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_coding_exon_coding_region AS
 SELECT feature.feature_id AS five_prime_coding_exon_coding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text);


--
-- Name: five_prime_coding_exon_noncoding_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_coding_exon_noncoding_region AS
 SELECT feature.feature_id AS five_prime_coding_exon_noncoding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text);


--
-- Name: five_prime_d_heptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_d_heptamer AS
 SELECT feature.feature_id AS five_prime_d_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_heptamer'::text);


--
-- Name: five_prime_d_nonamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_d_nonamer AS
 SELECT feature.feature_id AS five_prime_d_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_nonamer'::text);


--
-- Name: five_prime_d_recombination_signal_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_d_recombination_signal_sequence AS
 SELECT feature.feature_id AS five_prime_d_recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text);


--
-- Name: five_prime_d_spacer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_d_spacer AS
 SELECT feature.feature_id AS five_prime_d_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_D_spacer'::text);


--
-- Name: five_prime_est; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_est AS
 SELECT feature.feature_id AS five_prime_est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_EST'::text);


--
-- Name: five_prime_five_prime_overlap; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_five_prime_overlap AS
 SELECT feature.feature_id AS five_prime_five_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text);


--
-- Name: five_prime_flanking_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_flanking_region AS
 SELECT feature.feature_id AS five_prime_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_flanking_region'::text);


--
-- Name: five_prime_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_intron AS
 SELECT feature.feature_id AS five_prime_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_intron'::text);


--
-- Name: five_prime_ltr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_ltr AS
 SELECT feature.feature_id AS five_prime_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_LTR'::text);


--
-- Name: five_prime_ltr_component; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_ltr_component AS
 SELECT feature.feature_id AS five_prime_ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text));


--
-- Name: five_prime_noncoding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_noncoding_exon AS
 SELECT feature.feature_id AS five_prime_noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_noncoding_exon'::text);


--
-- Name: five_prime_open_reading_frame; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_open_reading_frame AS
 SELECT feature.feature_id AS five_prime_open_reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_open_reading_frame'::text);


--
-- Name: five_prime_recoding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_recoding_site AS
 SELECT feature.feature_id AS five_prime_recoding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_recoding_site'::text);


--
-- Name: five_prime_restriction_enzyme_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_restriction_enzyme_junction AS
 SELECT feature.feature_id AS five_prime_restriction_enzyme_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text);


--
-- Name: five_prime_rst; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_rst AS
 SELECT feature.feature_id AS five_prime_rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_RST'::text);


--
-- Name: five_prime_terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_terminal_inverted_repeat AS
 SELECT feature.feature_id AS five_prime_terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text);


--
-- Name: five_prime_three_prime_overlap; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_three_prime_overlap AS
 SELECT feature.feature_id AS five_prime_three_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text);


--
-- Name: five_prime_ust; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_ust AS
 SELECT feature.feature_id AS five_prime_ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UST'::text);


--
-- Name: five_prime_utr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_utr AS
 SELECT feature.feature_id AS five_prime_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UTR'::text);


--
-- Name: five_prime_utr_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_utr_intron AS
 SELECT feature.feature_id AS five_prime_utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_prime_UTR_intron'::text);


--
-- Name: five_prime_utr_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_prime_utr_variant AS
 SELECT feature.feature_id AS five_prime_utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '5_prime_UTR_variant'::text);


--
-- Name: five_taurinomethyl_two_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_taurinomethyl_two_thiouridine AS
 SELECT feature.feature_id AS five_taurinomethyl_two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text);


--
-- Name: five_taurinomethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_taurinomethyluridine AS
 SELECT feature.feature_id AS five_taurinomethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_taurinomethyluridine'::text);


--
-- Name: five_two_prime_o_dimethylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_two_prime_o_dimethylcytidine AS
 SELECT feature.feature_id AS five_two_prime_o_dimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text);


--
-- Name: five_two_prime_o_dimethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW five_two_prime_o_dimethyluridine AS
 SELECT feature.feature_id AS five_two_prime_o_dimethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text);


--
-- Name: fivehundred_b_downstream_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fivehundred_b_downstream_variant AS
 SELECT feature.feature_id AS fivehundred_b_downstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '500B_downstream_variant'::text);


--
-- Name: fivekb_downstream_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fivekb_downstream_variant AS
 SELECT feature.feature_id AS fivekb_downstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '500B_downstream_variant'::text) OR ((cvterm.name)::text = '5KB_downstream_variant'::text));


--
-- Name: fivekb_upstream_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fivekb_upstream_variant AS
 SELECT feature.feature_id AS fivekb_upstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = '2KB_upstream_variant'::text) OR ((cvterm.name)::text = '5KB_upstream_variant'::text));


--
-- Name: fixed_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fixed_variant AS
 SELECT feature.feature_id AS fixed_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fixed_variant'::text);


--
-- Name: flanked; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW flanked AS
 SELECT feature.feature_id AS flanked_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'floxed'::text) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'flanked'::text));


--
-- Name: flanking_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW flanking_region AS
 SELECT feature.feature_id AS flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'transposable_element_flanking_region'::text) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'flanking_region'::text));


--
-- Name: flanking_three_prime_quadruplet_recoding_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW flanking_three_prime_quadruplet_recoding_signal AS
 SELECT feature.feature_id AS flanking_three_prime_quadruplet_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text);


--
-- Name: floxed; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW floxed AS
 SELECT feature.feature_id AS floxed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'floxed'::text);


--
-- Name: floxed_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW floxed_gene AS
 SELECT feature.feature_id AS floxed_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'floxed_gene'::text);


--
-- Name: foldback_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW foldback_element AS
 SELECT feature.feature_id AS foldback_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'foldback_element'::text);


--
-- Name: foreign_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW foreign_gene AS
 SELECT feature.feature_id AS foreign_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'engineered_foreign_gene'::text) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text));


--
-- Name: foreign_transposable_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW foreign_transposable_element AS
 SELECT feature.feature_id AS foreign_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element'::text) OR ((cvterm.name)::text = 'foreign_transposable_element'::text));


--
-- Name: forward; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW forward AS
 SELECT feature.feature_id AS forward_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'forward'::text);


--
-- Name: forward_primer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW forward_primer AS
 SELECT feature.feature_id AS forward_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'forward_primer'::text);


--
-- Name: fosmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fosmid AS
 SELECT feature.feature_id AS fosmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fosmid'::text);


--
-- Name: four_bp_start_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW four_bp_start_codon AS
 SELECT feature.feature_id AS four_bp_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_bp_start_codon'::text);


--
-- Name: four_demethylwyosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW four_demethylwyosine AS
 SELECT feature.feature_id AS four_demethylwyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_demethylwyosine'::text);


--
-- Name: four_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW four_thiouridine AS
 SELECT feature.feature_id AS four_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'four_thiouridine'::text);


--
-- Name: fragment_assembly; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fragment_assembly AS
 SELECT feature.feature_id AS fragment_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'fingerprint_map'::text) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text));


--
-- Name: fragmentary; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fragmentary AS
 SELECT feature.feature_id AS fragmentary_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fragmentary'::text);


--
-- Name: frame_restoring_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW frame_restoring_variant AS
 SELECT feature.feature_id AS frame_restoring_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'frame_restoring_variant'::text);


--
-- Name: frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW frameshift AS
 SELECT feature.feature_id AS frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'minus_1_frameshift'::text) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'frameshift'::text));


--
-- Name: frameshift_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW frameshift_variant AS
 SELECT feature.feature_id AS frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'frame_restoring_variant'::text) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text));


--
-- Name: free; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW free AS
 SELECT feature.feature_id AS free_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free'::text);


--
-- Name: free_chromosome_arm; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW free_chromosome_arm AS
 SELECT feature.feature_id AS free_chromosome_arm_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free_chromosome_arm'::text);


--
-- Name: free_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW free_duplication AS
 SELECT feature.feature_id AS free_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'free_ring_duplication'::text) OR ((cvterm.name)::text = 'free_duplication'::text));


--
-- Name: free_ring_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW free_ring_duplication AS
 SELECT feature.feature_id AS free_ring_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'free_ring_duplication'::text);


--
-- Name: frt_flanked; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW frt_flanked AS
 SELECT feature.feature_id AS frt_flanked_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'FRT_flanked'::text);


--
-- Name: frt_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW frt_site AS
 SELECT feature.feature_id AS frt_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'FRT_site'::text);


--
-- Name: functional_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW functional_variant AS
 SELECT feature.feature_id AS functional_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript_function_variant'::text) OR ((cvterm.name)::text = 'translational_product_function_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'functional_variant'::text));


--
-- Name: fusion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fusion AS
 SELECT feature.feature_id AS fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'fusion'::text);


--
-- Name: fusion_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW fusion_gene AS
 SELECT feature.feature_id AS fusion_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_fusion_gene'::text) OR ((cvterm.name)::text = 'fusion_gene'::text));


--
-- Name: g_quartet; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW g_quartet AS
 SELECT feature.feature_id AS g_quartet_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_quartet'::text);


--
-- Name: g_to_a_transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW g_to_a_transition AS
 SELECT feature.feature_id AS g_to_a_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_A_transition'::text);


--
-- Name: g_to_c_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW g_to_c_transversion AS
 SELECT feature.feature_id AS g_to_c_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_C_transversion'::text);


--
-- Name: g_to_t_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW g_to_t_transversion AS
 SELECT feature.feature_id AS g_to_t_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'G_to_T_transversion'::text);


--
-- Name: gaga_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gaga_motif AS
 SELECT feature.feature_id AS gaga_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GAGA_motif'::text);


--
-- Name: galactosyl_queuosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW galactosyl_queuosine AS
 SELECT feature.feature_id AS galactosyl_queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'galactosyl_queuosine'::text);


--
-- Name: gamma_turn; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gamma_turn AS
 SELECT feature.feature_id AS gamma_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gamma_turn_classic'::text) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text));


--
-- Name: gamma_turn_classic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gamma_turn_classic AS
 SELECT feature.feature_id AS gamma_turn_classic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gamma_turn_classic'::text);


--
-- Name: gamma_turn_inverse; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gamma_turn_inverse AS
 SELECT feature.feature_id AS gamma_turn_inverse_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gamma_turn_inverse'::text);


--
-- Name: gap; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gap AS
 SELECT feature.feature_id AS gap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gap'::text);


--
-- Name: gc_rich_promoter_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gc_rich_promoter_region AS
 SELECT feature.feature_id AS gc_rich_promoter_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GC_rich_promoter_region'::text);


--
-- Name: gcvb_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gcvb_rna AS
 SELECT feature.feature_id AS gcvb_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'GcvB_RNA'::text);


--
-- Name: gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene AS
 SELECT feature.feature_id AS gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'nuclear_gene'::text) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'gene'::text));


--
-- Name: gene_array; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_array AS
 SELECT feature.feature_id AS gene_array_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_array'::text);


--
-- Name: gene_array_member; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_array_member AS
 SELECT feature.feature_id AS gene_array_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'operon_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text));


--
-- Name: gene_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_attribute AS
 SELECT feature.feature_id AS gene_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_coding'::text) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text));


--
-- Name: gene_cassette; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_cassette AS
 SELECT feature.feature_id AS gene_cassette_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_cassette'::text);


--
-- Name: gene_cassette_array; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_cassette_array AS
 SELECT feature.feature_id AS gene_cassette_array_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_cassette_array'::text);


--
-- Name: gene_cassette_member; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_cassette_member AS
 SELECT feature.feature_id AS gene_cassette_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cassette_array_member'::text) OR ((cvterm.name)::text = 'gene_cassette_member'::text));


--
-- Name: gene_component_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_component_region AS
 SELECT feature.feature_id AS gene_component_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'non_transcribed_region'::text) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text));


--
-- Name: gene_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_fragment AS
 SELECT feature.feature_id AS gene_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_fragment'::text);


--
-- Name: gene_fusion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_fusion AS
 SELECT feature.feature_id AS gene_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_fusion'::text);


--
-- Name: gene_group; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_group AS
 SELECT feature.feature_id AS gene_group_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'operon'::text) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'gene_group'::text));


--
-- Name: gene_group_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_group_regulatory_region AS
 SELECT feature.feature_id AS gene_group_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'operator'::text) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text));


--
-- Name: gene_member_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_member_region AS
 SELECT feature.feature_id AS gene_member_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcript'::text) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text));


--
-- Name: gene_rearranged_at_dna_level; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_rearranged_at_dna_level AS
 SELECT feature.feature_id AS gene_rearranged_at_dna_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text);


--
-- Name: gene_segment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_segment AS
 SELECT feature.feature_id AS gene_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudogenic_gene_segment'::text) OR ((cvterm.name)::text = 'gene_segment'::text));


--
-- Name: gene_silenced_by_dna_methylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_silenced_by_dna_methylation AS
 SELECT feature.feature_id AS gene_silenced_by_dna_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text);


--
-- Name: gene_silenced_by_dna_modification; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_silenced_by_dna_modification AS
 SELECT feature.feature_id AS gene_silenced_by_dna_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text));


--
-- Name: gene_silenced_by_histone_deacetylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_silenced_by_histone_deacetylation AS
 SELECT feature.feature_id AS gene_silenced_by_histone_deacetylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text);


--
-- Name: gene_silenced_by_histone_methylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_silenced_by_histone_methylation AS
 SELECT feature.feature_id AS gene_silenced_by_histone_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text);


--
-- Name: gene_silenced_by_histone_modification; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_silenced_by_histone_modification AS
 SELECT feature.feature_id AS gene_silenced_by_histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text));


--
-- Name: gene_silenced_by_rna_interference; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_silenced_by_rna_interference AS
 SELECT feature.feature_id AS gene_silenced_by_rna_interference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text);


--
-- Name: gene_subarray; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_subarray AS
 SELECT feature.feature_id AS gene_subarray_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_subarray'::text);


--
-- Name: gene_subarray_member; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_subarray_member AS
 SELECT feature.feature_id AS gene_subarray_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_subarray_member'::text);


--
-- Name: gene_to_gene_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_to_gene_feature AS
 SELECT feature.feature_id AS gene_to_gene_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'overlapping'::text) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text));


--
-- Name: gene_trap_construct; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_trap_construct AS
 SELECT feature.feature_id AS gene_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_trap_construct'::text);


--
-- Name: gene_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_variant AS
 SELECT feature.feature_id AS gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'gene_fusion'::text) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'gene_variant'::text));


--
-- Name: gene_with_dicistronic_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_dicistronic_mrna AS
 SELECT feature.feature_id AS gene_with_dicistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text);


--
-- Name: gene_with_dicistronic_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_dicistronic_primary_transcript AS
 SELECT feature.feature_id AS gene_with_dicistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text);


--
-- Name: gene_with_dicistronic_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_dicistronic_transcript AS
 SELECT feature.feature_id AS gene_with_dicistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text));


--
-- Name: gene_with_edited_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_edited_transcript AS
 SELECT feature.feature_id AS gene_with_edited_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_edited_transcript'::text);


--
-- Name: gene_with_mrna_recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_mrna_recoded_by_translational_bypass AS
 SELECT feature.feature_id AS gene_with_mrna_recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text);


--
-- Name: gene_with_mrna_with_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_mrna_with_frameshift AS
 SELECT feature.feature_id AS gene_with_mrna_with_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text);


--
-- Name: gene_with_non_canonical_start_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_non_canonical_start_codon AS
 SELECT feature.feature_id AS gene_with_non_canonical_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'gene_with_start_codon_CUG'::text) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text));


--
-- Name: gene_with_polyadenylated_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_polyadenylated_mrna AS
 SELECT feature.feature_id AS gene_with_polyadenylated_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text);


--
-- Name: gene_with_polycistronic_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_polycistronic_transcript AS
 SELECT feature.feature_id AS gene_with_polycistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text));


--
-- Name: gene_with_recoded_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_recoded_mrna AS
 SELECT feature.feature_id AS gene_with_recoded_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text));


--
-- Name: gene_with_start_codon_cug; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_start_codon_cug AS
 SELECT feature.feature_id AS gene_with_start_codon_cug_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text);


--
-- Name: gene_with_stop_codon_read_through; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_stop_codon_read_through AS
 SELECT feature.feature_id AS gene_with_stop_codon_read_through_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text));


--
-- Name: gene_with_stop_codon_redefined_as_pyrrolysine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_stop_codon_redefined_as_pyrrolysine AS
 SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text);


--
-- Name: gene_with_stop_codon_redefined_as_selenocysteine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_stop_codon_redefined_as_selenocysteine AS
 SELECT feature.feature_id AS gene_with_stop_codon_redefined_as_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text);


--
-- Name: gene_with_trans_spliced_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_trans_spliced_transcript AS
 SELECT feature.feature_id AS gene_with_trans_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text);


--
-- Name: gene_with_transcript_with_translational_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gene_with_transcript_with_translational_frameshift AS
 SELECT feature.feature_id AS gene_with_transcript_with_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text);


--
-- Name: genetic_marker; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW genetic_marker AS
 SELECT feature.feature_id AS genetic_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'heritable_phenotypic_marker'::text) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text));


--
-- Name: genome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW genome AS
 SELECT feature.feature_id AS genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'reference_genome'::text)) OR ((cvterm.name)::text = 'variant_genome'::text)) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text)) OR ((cvterm.name)::text = 'genome'::text));


--
-- Name: genomic_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW genomic_clone AS
 SELECT feature.feature_id AS genomic_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomic_clone'::text);


--
-- Name: genomic_dna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW genomic_dna AS
 SELECT feature.feature_id AS genomic_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomic_DNA'::text);


--
-- Name: genomic_island; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW genomic_island AS
 SELECT feature.feature_id AS genomic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'pathogenic_island'::text) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'genomic_island'::text));


--
-- Name: genomically_contaminated_cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW genomically_contaminated_cdna_clone AS
 SELECT feature.feature_id AS genomically_contaminated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text);


--
-- Name: germline_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW germline_variant AS
 SELECT feature.feature_id AS germline_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'germline_variant'::text);


--
-- Name: glutamic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glutamic_acid AS
 SELECT feature.feature_id AS glutamic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamic_acid'::text);


--
-- Name: glutamic_acid_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glutamic_acid_trna_primary_transcript AS
 SELECT feature.feature_id AS glutamic_acid_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text);


--
-- Name: glutamine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glutamine AS
 SELECT feature.feature_id AS glutamine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamine'::text);


--
-- Name: glutamine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glutamine_trna_primary_transcript AS
 SELECT feature.feature_id AS glutamine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text);


--
-- Name: glutaminyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glutaminyl_trna AS
 SELECT feature.feature_id AS glutaminyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutaminyl_tRNA'::text);


--
-- Name: glutamyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glutamyl_trna AS
 SELECT feature.feature_id AS glutamyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glutamyl_tRNA'::text);


--
-- Name: glycine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glycine AS
 SELECT feature.feature_id AS glycine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycine'::text);


--
-- Name: glycine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glycine_trna_primary_transcript AS
 SELECT feature.feature_id AS glycine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text);


--
-- Name: glycyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW glycyl_trna AS
 SELECT feature.feature_id AS glycyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'glycyl_tRNA'::text);


--
-- Name: gna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gna AS
 SELECT feature.feature_id AS gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'R_GNA'::text) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'GNA'::text));


--
-- Name: gna_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW gna_oligo AS
 SELECT feature.feature_id AS gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'R_GNA_oligo'::text) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text));


--
-- Name: golden_path; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW golden_path AS
 SELECT feature.feature_id AS golden_path_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'golden_path'::text);


--
-- Name: golden_path_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW golden_path_fragment AS
 SELECT feature.feature_id AS golden_path_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'golden_path_fragment'::text);


--
-- Name: grna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW grna_encoding AS
 SELECT feature.feature_id AS grna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gRNA_encoding'::text);


--
-- Name: grna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW grna_gene AS
 SELECT feature.feature_id AS grna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'gRNA_gene'::text);


--
-- Name: group_1_intron_homing_endonuclease_target_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW group_1_intron_homing_endonuclease_target_region AS
 SELECT feature.feature_id AS group_1_intron_homing_endonuclease_target_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text);


--
-- Name: group_i_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW group_i_intron AS
 SELECT feature.feature_id AS group_i_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_I_intron'::text);


--
-- Name: group_ii_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW group_ii_intron AS
 SELECT feature.feature_id AS group_ii_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'group_IIA_intron'::text) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text));


--
-- Name: group_iia_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW group_iia_intron AS
 SELECT feature.feature_id AS group_iia_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_IIA_intron'::text);


--
-- Name: group_iib_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW group_iib_intron AS
 SELECT feature.feature_id AS group_iib_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_IIB_intron'::text);


--
-- Name: group_iii_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW group_iii_intron AS
 SELECT feature.feature_id AS group_iii_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'group_III_intron'::text);


--
-- Name: guide_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW guide_rna AS
 SELECT feature.feature_id AS guide_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'guide_RNA'::text);


--
-- Name: guide_rna_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW guide_rna_region AS
 SELECT feature.feature_id AS guide_rna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'anchor_region'::text) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text));


--
-- Name: h2b_ubiquitination_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h2b_ubiquitination_site AS
 SELECT feature.feature_id AS h2b_ubiquitination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H2B_ubiquitination_site'::text);


--
-- Name: h2bk5_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h2bk5_monomethylation_site AS
 SELECT feature.feature_id AS h2bk5_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text);


--
-- Name: h3k14_acetylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k14_acetylation_site AS
 SELECT feature.feature_id AS h3k14_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K14_acetylation_site'::text);


--
-- Name: h3k18_acetylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k18_acetylation_site AS
 SELECT feature.feature_id AS h3k18_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K18_acetylation_site'::text);


--
-- Name: h3k23_acylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k23_acylation_site AS
 SELECT feature.feature_id AS h3k23_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K23_acylation site'::text);


--
-- Name: h3k27_acylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k27_acylation_site AS
 SELECT feature.feature_id AS h3k27_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_acylation_site'::text);


--
-- Name: h3k27_dimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k27_dimethylation_site AS
 SELECT feature.feature_id AS h3k27_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_dimethylation_site'::text);


--
-- Name: h3k27_methylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k27_methylation_site AS
 SELECT feature.feature_id AS h3k27_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K27_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text));


--
-- Name: h3k27_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k27_monomethylation_site AS
 SELECT feature.feature_id AS h3k27_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_monomethylation_site'::text);


--
-- Name: h3k27_trimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k27_trimethylation_site AS
 SELECT feature.feature_id AS h3k27_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K27_trimethylation_site'::text);


--
-- Name: h3k36_dimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k36_dimethylation_site AS
 SELECT feature.feature_id AS h3k36_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_dimethylation_site'::text);


--
-- Name: h3k36_methylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k36_methylation_site AS
 SELECT feature.feature_id AS h3k36_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K36_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text));


--
-- Name: h3k36_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k36_monomethylation_site AS
 SELECT feature.feature_id AS h3k36_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_monomethylation_site'::text);


--
-- Name: h3k36_trimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k36_trimethylation_site AS
 SELECT feature.feature_id AS h3k36_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K36_trimethylation_site'::text);


--
-- Name: h3k4_dimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k4_dimethylation_site AS
 SELECT feature.feature_id AS h3k4_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_dimethylation_site'::text);


--
-- Name: h3k4_methylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k4_methylation_site AS
 SELECT feature.feature_id AS h3k4_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K4_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text));


--
-- Name: h3k4_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k4_monomethylation_site AS
 SELECT feature.feature_id AS h3k4_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_monomethylation_site'::text);


--
-- Name: h3k4_trimethylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k4_trimethylation AS
 SELECT feature.feature_id AS h3k4_trimethylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K4_trimethylation'::text);


--
-- Name: h3k79_dimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k79_dimethylation_site AS
 SELECT feature.feature_id AS h3k79_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_dimethylation_site'::text);


--
-- Name: h3k79_methylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k79_methylation_site AS
 SELECT feature.feature_id AS h3k79_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K79_monomethylation_site'::text) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text));


--
-- Name: h3k79_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k79_monomethylation_site AS
 SELECT feature.feature_id AS h3k79_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_monomethylation_site'::text);


--
-- Name: h3k79_trimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k79_trimethylation_site AS
 SELECT feature.feature_id AS h3k79_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K79_trimethylation_site'::text);


--
-- Name: h3k9_acetylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k9_acetylation_site AS
 SELECT feature.feature_id AS h3k9_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_acetylation_site'::text);


--
-- Name: h3k9_dimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k9_dimethylation_site AS
 SELECT feature.feature_id AS h3k9_dimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_dimethylation_site'::text);


--
-- Name: h3k9_methylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k9_methylation_site AS
 SELECT feature.feature_id AS h3k9_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'H3K9_trimethylation_site'::text) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text));


--
-- Name: h3k9_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k9_monomethylation_site AS
 SELECT feature.feature_id AS h3k9_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_monomethylation_site'::text);


--
-- Name: h3k9_trimethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h3k9_trimethylation_site AS
 SELECT feature.feature_id AS h3k9_trimethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H3K9_trimethylation_site'::text);


--
-- Name: h4k16_acylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h4k16_acylation_site AS
 SELECT feature.feature_id AS h4k16_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K16_acylation_site'::text);


--
-- Name: h4k20_monomethylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h4k20_monomethylation_site AS
 SELECT feature.feature_id AS h4k20_monomethylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K20_monomethylation_site'::text);


--
-- Name: h4k5_acylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h4k5_acylation_site AS
 SELECT feature.feature_id AS h4k5_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K5_acylation_site'::text);


--
-- Name: h4k8_acylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h4k8_acylation_site AS
 SELECT feature.feature_id AS h4k8_acylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K8_acylation site'::text);


--
-- Name: h4k_acylation_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h4k_acylation_region AS
 SELECT feature.feature_id AS h4k_acylation_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H4K_acylation_region'::text);


--
-- Name: h_aca_box_snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h_aca_box_snorna AS
 SELECT feature.feature_id AS h_aca_box_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text));


--
-- Name: h_aca_box_snorna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h_aca_box_snorna_encoding AS
 SELECT feature.feature_id AS h_aca_box_snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text);


--
-- Name: h_aca_box_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h_aca_box_snorna_primary_transcript AS
 SELECT feature.feature_id AS h_aca_box_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text);


--
-- Name: h_pseudoknot; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW h_pseudoknot AS
 SELECT feature.feature_id AS h_pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'H_pseudoknot'::text);


--
-- Name: hammerhead_ribozyme; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hammerhead_ribozyme AS
 SELECT feature.feature_id AS hammerhead_ribozyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hammerhead_ribozyme'::text);


--
-- Name: haplotype; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW haplotype AS
 SELECT feature.feature_id AS haplotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'haplotype'::text);


--
-- Name: haplotype_block; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW haplotype_block AS
 SELECT feature.feature_id AS haplotype_block_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'haplotype_block'::text);


--
-- Name: helitron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW helitron AS
 SELECT feature.feature_id AS helitron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'helitron'::text);


--
-- Name: helix_turn_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW helix_turn_helix AS
 SELECT feature.feature_id AS helix_turn_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'helix_turn_helix'::text);


--
-- Name: heptamer_of_recombination_feature_of_vertebrate_im_sys_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW heptamer_of_recombination_feature_of_vertebrate_im_sys_gene AS
 SELECT feature.feature_id AS heptamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_D_heptamer'::text) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));


--
-- Name: heritable_phenotypic_marker; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW heritable_phenotypic_marker AS
 SELECT feature.feature_id AS heritable_phenotypic_marker_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'heritable_phenotypic_marker'::text);


--
-- Name: hetero_compound_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hetero_compound_chromosome AS
 SELECT feature.feature_id AS hetero_compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hetero_compound_chromosome'::text);


--
-- Name: high_identity_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW high_identity_region AS
 SELECT feature.feature_id AS high_identity_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'high_identity_region'::text);


--
-- Name: high_quality_draft; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW high_quality_draft AS
 SELECT feature.feature_id AS high_quality_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'high_quality_draft'::text);


--
-- Name: histidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histidine AS
 SELECT feature.feature_id AS histidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidine'::text);


--
-- Name: histidine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histidine_trna_primary_transcript AS
 SELECT feature.feature_id AS histidine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text);


--
-- Name: histidyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histidyl_trna AS
 SELECT feature.feature_id AS histidyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histidyl_tRNA'::text);


--
-- Name: histone_acetylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histone_acetylation_site AS
 SELECT feature.feature_id AS histone_acetylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'H3K9_acetylation_site'::text) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text));


--
-- Name: histone_acylation_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histone_acylation_region AS
 SELECT feature.feature_id AS histone_acylation_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H4K_acylation_region'::text) OR ((cvterm.name)::text = 'histone_acylation_region'::text));


--
-- Name: histone_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histone_binding_site AS
 SELECT feature.feature_id AS histone_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'histone_binding_site'::text);


--
-- Name: histone_methylation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histone_methylation_site AS
 SELECT feature.feature_id AS histone_methylation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'H4K20_monomethylation_site'::text) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text));


--
-- Name: histone_modification; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histone_modification AS
 SELECT feature.feature_id AS histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'histone_methylation_site'::text) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'histone_modification'::text));


--
-- Name: histone_ubiqitination_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW histone_ubiqitination_site AS
 SELECT feature.feature_id AS histone_ubiqitination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'H2B_ubiquitination_site'::text) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text));


--
-- Name: homing_endonuclease_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW homing_endonuclease_binding_site AS
 SELECT feature.feature_id AS homing_endonuclease_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text);


--
-- Name: homo_compound_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW homo_compound_chromosome AS
 SELECT feature.feature_id AS homo_compound_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'homo_compound_chromosome'::text);


--
-- Name: homologous; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW homologous AS
 SELECT feature.feature_id AS homologous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'orthologous'::text) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'homologous'::text));


--
-- Name: homologous_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW homologous_region AS
 SELECT feature.feature_id AS homologous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'paralogous_region'::text) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'homologous_region'::text));


--
-- Name: hoogsteen_base_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hoogsteen_base_pair AS
 SELECT feature.feature_id AS hoogsteen_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Hoogsteen_base_pair'::text);


--
-- Name: hydrophobic_region_of_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hydrophobic_region_of_peptide AS
 SELECT feature.feature_id AS hydrophobic_region_of_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text);


--
-- Name: hydroxywybutosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hydroxywybutosine AS
 SELECT feature.feature_id AS hydroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hydroxywybutosine'::text);


--
-- Name: hyperploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hyperploid AS
 SELECT feature.feature_id AS hyperploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hyperploid'::text);


--
-- Name: hypoploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW hypoploid AS
 SELECT feature.feature_id AS hypoploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'hypoploid'::text);


--
-- Name: i_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW i_motif AS
 SELECT feature.feature_id AS i_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'i_motif'::text);


--
-- Name: idna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW idna AS
 SELECT feature.feature_id AS idna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'iDNA'::text);


--
-- Name: immature_peptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW immature_peptide_region AS
 SELECT feature.feature_id AS immature_peptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'immature_peptide_region'::text);


--
-- Name: imprinted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW imprinted AS
 SELECT feature.feature_id AS imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'maternally_imprinted'::text) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text));


--
-- Name: improved_high_quality_draft; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW improved_high_quality_draft AS
 SELECT feature.feature_id AS improved_high_quality_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'improved_high_quality_draft'::text);


--
-- Name: inactive_catalytic_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inactive_catalytic_site AS
 SELECT feature.feature_id AS inactive_catalytic_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inactive_catalytic_site'::text);


--
-- Name: inactive_ligand_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inactive_ligand_binding_site AS
 SELECT feature.feature_id AS inactive_ligand_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inactive_catalytic_site'::text) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text));


--
-- Name: incomplete_terminal_codon_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW incomplete_terminal_codon_variant AS
 SELECT feature.feature_id AS incomplete_terminal_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text);


--
-- Name: increased_polyadenylation_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW increased_polyadenylation_variant AS
 SELECT feature.feature_id AS increased_polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_polyadenylation_variant'::text);


--
-- Name: increased_transcript_level_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW increased_transcript_level_variant AS
 SELECT feature.feature_id AS increased_transcript_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcript_level_variant'::text);


--
-- Name: increased_transcript_stability_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW increased_transcript_stability_variant AS
 SELECT feature.feature_id AS increased_transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcript_stability_variant'::text);


--
-- Name: increased_transcription_rate_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW increased_transcription_rate_variant AS
 SELECT feature.feature_id AS increased_transcription_rate_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_transcription_rate_variant'::text);


--
-- Name: increased_translational_product_level; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW increased_translational_product_level AS
 SELECT feature.feature_id AS increased_translational_product_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'increased_translational_product_level'::text);


--
-- Name: indel; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW indel AS
 SELECT feature.feature_id AS indel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'indel'::text);


--
-- Name: independently_known; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW independently_known AS
 SELECT feature.feature_id AS independently_known_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'independently_known'::text);


--
-- Name: inframe_codon_gain; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inframe_codon_gain AS
 SELECT feature.feature_id AS inframe_codon_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inframe_codon_gain'::text);


--
-- Name: inframe_codon_loss; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inframe_codon_loss AS
 SELECT feature.feature_id AS inframe_codon_loss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inframe_codon_loss'::text);


--
-- Name: inframe_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inframe_variant AS
 SELECT feature.feature_id AS inframe_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'inframe_codon_gain'::text) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text));


--
-- Name: initiator_codon_change; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW initiator_codon_change AS
 SELECT feature.feature_id AS initiator_codon_change_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'initiator_codon_change'::text);


--
-- Name: inosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inosine AS
 SELECT feature.feature_id AS inosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'modified_inosine'::text) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'inosine'::text));


--
-- Name: inr1_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inr1_motif AS
 SELECT feature.feature_id AS inr1_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'INR1_motif'::text);


--
-- Name: inr_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inr_motif AS
 SELECT feature.feature_id AS inr_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'INR_motif'::text);


--
-- Name: insertion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertion AS
 SELECT feature.feature_id AS insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'transgenic_insertion'::text) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'insertion'::text));


--
-- Name: insertion_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertion_attribute AS
 SELECT feature.feature_id AS insertion_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'tandem'::text) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text));


--
-- Name: insertion_breakpoint; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertion_breakpoint AS
 SELECT feature.feature_id AS insertion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertion_breakpoint'::text);


--
-- Name: insertion_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertion_sequence AS
 SELECT feature.feature_id AS insertion_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertion_sequence'::text);


--
-- Name: insertion_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertion_site AS
 SELECT feature.feature_id AS insertion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'transposable_element_insertion_site'::text) OR ((cvterm.name)::text = 'insertion_site'::text));


--
-- Name: insertional; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertional AS
 SELECT feature.feature_id AS insertional_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insertional'::text);


--
-- Name: insertional_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insertional_duplication AS
 SELECT feature.feature_id AS insertional_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'uninverted_insertional_duplication'::text) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text));


--
-- Name: inside_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inside_intron AS
 SELECT feature.feature_id AS inside_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'inside_intron_antiparallel'::text) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'inside_intron'::text));


--
-- Name: inside_intron_antiparallel; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inside_intron_antiparallel AS
 SELECT feature.feature_id AS inside_intron_antiparallel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inside_intron_antiparallel'::text);


--
-- Name: inside_intron_parallel; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inside_intron_parallel AS
 SELECT feature.feature_id AS inside_intron_parallel_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inside_intron_parallel'::text);


--
-- Name: insulator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insulator AS
 SELECT feature.feature_id AS insulator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insulator'::text);


--
-- Name: insulator_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW insulator_binding_site AS
 SELECT feature.feature_id AS insulator_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'insulator_binding_site'::text);


--
-- Name: integrated_mobile_genetic_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW integrated_mobile_genetic_element AS
 SELECT feature.feature_id AS integrated_mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transposable_element'::text) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text));


--
-- Name: integrated_plasmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW integrated_plasmid AS
 SELECT feature.feature_id AS integrated_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'integrated_plasmid'::text);


--
-- Name: integration_excision_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW integration_excision_site AS
 SELECT feature.feature_id AS integration_excision_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'attI_site'::text) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text));


--
-- Name: integron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW integron AS
 SELECT feature.feature_id AS integron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'integron'::text);


--
-- Name: intein; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intein AS
 SELECT feature.feature_id AS intein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intein'::text);


--
-- Name: intein_containing; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intein_containing AS
 SELECT feature.feature_id AS intein_containing_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intein_containing'::text);


--
-- Name: interband; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interband AS
 SELECT feature.feature_id AS interband_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interband'::text);


--
-- Name: interchromosomal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interchromosomal AS
 SELECT feature.feature_id AS interchromosomal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interchromosomal'::text);


--
-- Name: interchromosomal_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interchromosomal_duplication AS
 SELECT feature.feature_id AS interchromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interchromosomal_duplication'::text);


--
-- Name: interchromosomal_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interchromosomal_mutation AS
 SELECT feature.feature_id AS interchromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'chromosomal_translocation'::text) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text));


--
-- Name: interchromosomal_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interchromosomal_transposition AS
 SELECT feature.feature_id AS interchromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text));


--
-- Name: intergenic_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intergenic_region AS
 SELECT feature.feature_id AS intergenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intergenic_region'::text);


--
-- Name: intergenic_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intergenic_variant AS
 SELECT feature.feature_id AS intergenic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intergenic_variant'::text);


--
-- Name: interior_coding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interior_coding_exon AS
 SELECT feature.feature_id AS interior_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_coding_exon'::text);


--
-- Name: interior_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interior_exon AS
 SELECT feature.feature_id AS interior_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_exon'::text);


--
-- Name: interior_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW interior_intron AS
 SELECT feature.feature_id AS interior_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'interior_intron'::text);


--
-- Name: intermediate; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intermediate AS
 SELECT feature.feature_id AS intermediate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intermediate'::text);


--
-- Name: intermediate_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intermediate_element AS
 SELECT feature.feature_id AS intermediate_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intermediate_element'::text);


--
-- Name: internal_eliminated_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW internal_eliminated_sequence AS
 SELECT feature.feature_id AS internal_eliminated_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_eliminated_sequence'::text);


--
-- Name: internal_guide_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW internal_guide_sequence AS
 SELECT feature.feature_id AS internal_guide_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_guide_sequence'::text);


--
-- Name: internal_ribosome_entry_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW internal_ribosome_entry_site AS
 SELECT feature.feature_id AS internal_ribosome_entry_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text));


--
-- Name: internal_shine_dalgarno_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW internal_shine_dalgarno_sequence AS
 SELECT feature.feature_id AS internal_shine_dalgarno_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text);


--
-- Name: internal_transcribed_spacer_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW internal_transcribed_spacer_region AS
 SELECT feature.feature_id AS internal_transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text);


--
-- Name: internal_utr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW internal_utr AS
 SELECT feature.feature_id AS internal_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'internal_UTR'::text);


--
-- Name: intrachromosomal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intrachromosomal AS
 SELECT feature.feature_id AS intrachromosomal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intrachromosomal'::text);


--
-- Name: intrachromosomal_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intrachromosomal_duplication AS
 SELECT feature.feature_id AS intrachromosomal_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text));


--
-- Name: intrachromosomal_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intrachromosomal_mutation AS
 SELECT feature.feature_id AS intrachromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((cvterm.name)::text = 'chromosomal_deletion'::text) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text));


--
-- Name: intrachromosomal_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intrachromosomal_transposition AS
 SELECT feature.feature_id AS intrachromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text));


--
-- Name: intramembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intramembrane_polypeptide_region AS
 SELECT feature.feature_id AS intramembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'membrane_peptide_loop'::text) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text));


--
-- Name: intrinsically_unstructured_polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intrinsically_unstructured_polypeptide_region AS
 SELECT feature.feature_id AS intrinsically_unstructured_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text);


--
-- Name: introgressed_chromosome_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW introgressed_chromosome_region AS
 SELECT feature.feature_id AS introgressed_chromosome_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'introgressed_chromosome_region'::text);


--
-- Name: intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intron AS
 SELECT feature.feature_id AS intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'five_prime_intron'::text) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'intron'::text));


--
-- Name: intron_domain; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intron_domain AS
 SELECT feature.feature_id AS intron_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'internal_guide_sequence'::text) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'intron_domain'::text));


--
-- Name: intron_gain; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intron_gain AS
 SELECT feature.feature_id AS intron_gain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intron_gain'::text);


--
-- Name: intron_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intron_variant AS
 SELECT feature.feature_id AS intron_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'splice_site_variant'::text) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text));


--
-- Name: intronic_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intronic_regulatory_region AS
 SELECT feature.feature_id AS intronic_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intronic_regulatory_region'::text);


--
-- Name: intronic_splice_enhancer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW intronic_splice_enhancer AS
 SELECT feature.feature_id AS intronic_splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'intronic_splice_enhancer'::text);


--
-- Name: invalidated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invalidated AS
 SELECT feature.feature_id AS invalidated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'invalidated'::text));


--
-- Name: invalidated_by_chimeric_cdna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invalidated_by_chimeric_cdna AS
 SELECT feature.feature_id AS invalidated_by_chimeric_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text);


--
-- Name: invalidated_by_genomic_contamination; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invalidated_by_genomic_contamination AS
 SELECT feature.feature_id AS invalidated_by_genomic_contamination_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text);


--
-- Name: invalidated_by_genomic_polya_primed_cdna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invalidated_by_genomic_polya_primed_cdna AS
 SELECT feature.feature_id AS invalidated_by_genomic_polya_primed_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text);


--
-- Name: invalidated_by_partial_processing; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invalidated_by_partial_processing AS
 SELECT feature.feature_id AS invalidated_by_partial_processing_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'invalidated_by_partial_processing'::text);


--
-- Name: invalidated_cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invalidated_cdna_clone AS
 SELECT feature.feature_id AS invalidated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'chimeric_cDNA_clone'::text) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text));


--
-- Name: inversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion AS
 SELECT feature.feature_id AS inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion'::text);


--
-- Name: inversion_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_attribute AS
 SELECT feature.feature_id AS inversion_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'pericentric'::text) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text));


--
-- Name: inversion_breakpoint; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_breakpoint AS
 SELECT feature.feature_id AS inversion_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_breakpoint'::text);


--
-- Name: inversion_cum_translocation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_cum_translocation AS
 SELECT feature.feature_id AS inversion_cum_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text));


--
-- Name: inversion_derived_aneuploid_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_derived_aneuploid_chromosome AS
 SELECT feature.feature_id AS inversion_derived_aneuploid_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text);


--
-- Name: inversion_derived_bipartite_deficiency; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_derived_bipartite_deficiency AS
 SELECT feature.feature_id AS inversion_derived_bipartite_deficiency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text);


--
-- Name: inversion_derived_bipartite_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_derived_bipartite_duplication AS
 SELECT feature.feature_id AS inversion_derived_bipartite_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text);


--
-- Name: inversion_derived_deficiency_plus_aneuploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_derived_deficiency_plus_aneuploid AS
 SELECT feature.feature_id AS inversion_derived_deficiency_plus_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text);


--
-- Name: inversion_derived_deficiency_plus_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_derived_deficiency_plus_duplication AS
 SELECT feature.feature_id AS inversion_derived_deficiency_plus_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text);


--
-- Name: inversion_derived_duplication_plus_aneuploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_derived_duplication_plus_aneuploid AS
 SELECT feature.feature_id AS inversion_derived_duplication_plus_aneuploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text);


--
-- Name: inversion_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_site AS
 SELECT feature.feature_id AS inversion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'FRT_site'::text) OR ((cvterm.name)::text = 'inversion_site'::text));


--
-- Name: inversion_site_part; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inversion_site_part AS
 SELECT feature.feature_id AS inversion_site_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'IRLinv_site'::text) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text));


--
-- Name: invert_inter_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invert_inter_transposition AS
 SELECT feature.feature_id AS invert_inter_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text);


--
-- Name: invert_intra_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW invert_intra_transposition AS
 SELECT feature.feature_id AS invert_intra_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text);


--
-- Name: inverted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inverted AS
 SELECT feature.feature_id AS inverted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted'::text);


--
-- Name: inverted_insertional_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inverted_insertional_duplication AS
 SELECT feature.feature_id AS inverted_insertional_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_insertional_duplication'::text);


--
-- Name: inverted_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inverted_repeat AS
 SELECT feature.feature_id AS inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text));


--
-- Name: inverted_ring_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inverted_ring_chromosome AS
 SELECT feature.feature_id AS inverted_ring_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_ring_chromosome'::text);


--
-- Name: inverted_tandem_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW inverted_tandem_duplication AS
 SELECT feature.feature_id AS inverted_tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'inverted_tandem_duplication'::text);


--
-- Name: irlinv_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW irlinv_site AS
 SELECT feature.feature_id AS irlinv_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'IRLinv_site'::text);


--
-- Name: iron_responsive_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW iron_responsive_element AS
 SELECT feature.feature_id AS iron_responsive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'iron_responsive_element'::text);


--
-- Name: irrinv_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW irrinv_site AS
 SELECT feature.feature_id AS irrinv_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'IRRinv_site'::text);


--
-- Name: isoleucine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW isoleucine AS
 SELECT feature.feature_id AS isoleucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucine'::text);


--
-- Name: isoleucine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW isoleucine_trna_primary_transcript AS
 SELECT feature.feature_id AS isoleucine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text);


--
-- Name: isoleucyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW isoleucyl_trna AS
 SELECT feature.feature_id AS isoleucyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isoleucyl_tRNA'::text);


--
-- Name: isowyosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW isowyosine AS
 SELECT feature.feature_id AS isowyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'isowyosine'::text);


--
-- Name: isre; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW isre AS
 SELECT feature.feature_id AS isre_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ISRE'::text);


--
-- Name: j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_c_cluster AS
 SELECT feature.feature_id AS j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_C_cluster'::text);


--
-- Name: j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_cluster AS
 SELECT feature.feature_id AS j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_cluster'::text);


--
-- Name: j_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_gene AS
 SELECT feature.feature_id AS j_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_gene'::text);


--
-- Name: j_gene_recombination_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_gene_recombination_feature AS
 SELECT feature.feature_id AS j_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_gene_recombination_feature'::text);


--
-- Name: j_heptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_heptamer AS
 SELECT feature.feature_id AS j_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_heptamer'::text);


--
-- Name: j_nonamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_nonamer AS
 SELECT feature.feature_id AS j_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_nonamer'::text);


--
-- Name: j_spacer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW j_spacer AS
 SELECT feature.feature_id AS j_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'J_spacer'::text);


--
-- Name: junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW junction AS
 SELECT feature.feature_id AS junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((cvterm.name)::text = 'clone_insert_end'::text) OR ((cvterm.name)::text = 'clone_insert_start'::text)) OR ((cvterm.name)::text = 'exon_junction'::text)) OR ((cvterm.name)::text = 'insertion_site'::text)) OR ((cvterm.name)::text = 'polyA_site'::text)) OR ((cvterm.name)::text = 'deletion_junction'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text)) OR ((cvterm.name)::text = 'splice_junction'::text)) OR ((cvterm.name)::text = 'trans_splice_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text)) OR ((cvterm.name)::text = 'inversion_breakpoint'::text)) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'junction'::text));


--
-- Name: k_turn_rna_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW k_turn_rna_motif AS
 SELECT feature.feature_id AS k_turn_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'K_turn_RNA_motif'::text);


--
-- Name: kinetoplast; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW kinetoplast AS
 SELECT feature.feature_id AS kinetoplast_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'kinetoplast'::text);


--
-- Name: kinetoplast_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW kinetoplast_gene AS
 SELECT feature.feature_id AS kinetoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'maxicircle_gene'::text) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text));


--
-- Name: kozak_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW kozak_sequence AS
 SELECT feature.feature_id AS kozak_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'kozak_sequence'::text);


--
-- Name: laevosynaptic_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW laevosynaptic_chromosome AS
 SELECT feature.feature_id AS laevosynaptic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'laevosynaptic_chromosome'::text);


--
-- Name: lambda_vector; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lambda_vector AS
 SELECT feature.feature_id AS lambda_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lambda_vector'::text);


--
-- Name: large_subunit_rrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW large_subunit_rrna AS
 SELECT feature.feature_id AS large_subunit_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'rRNA_5_8S'::text) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text));


--
-- Name: left_handed_peptide_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW left_handed_peptide_helix AS
 SELECT feature.feature_id AS left_handed_peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'left_handed_peptide_helix'::text);


--
-- Name: lethal_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lethal_variant AS
 SELECT feature.feature_id AS lethal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lethal_variant'::text);


--
-- Name: leucine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW leucine AS
 SELECT feature.feature_id AS leucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucine'::text);


--
-- Name: leucine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW leucine_trna_primary_transcript AS
 SELECT feature.feature_id AS leucine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text);


--
-- Name: leucoplast_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW leucoplast_chromosome AS
 SELECT feature.feature_id AS leucoplast_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_chromosome'::text);


--
-- Name: leucoplast_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW leucoplast_gene AS
 SELECT feature.feature_id AS leucoplast_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_gene'::text);


--
-- Name: leucoplast_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW leucoplast_sequence AS
 SELECT feature.feature_id AS leucoplast_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucoplast_sequence'::text);


--
-- Name: leucyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW leucyl_trna AS
 SELECT feature.feature_id AS leucyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'leucyl_tRNA'::text);


--
-- Name: level_of_transcript_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW level_of_transcript_variant AS
 SELECT feature.feature_id AS level_of_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'decreased_transcript_level_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text));


--
-- Name: ligand_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ligand_binding_site AS
 SELECT feature.feature_id AS ligand_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'polypeptide_ligand_contact'::text) OR ((cvterm.name)::text = 'ligand_binding_site'::text));


--
-- Name: ligation_based_read; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ligation_based_read AS
 SELECT feature.feature_id AS ligation_based_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ligation_based_read'::text);


--
-- Name: lincrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lincrna AS
 SELECT feature.feature_id AS lincrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lincRNA'::text);


--
-- Name: lincrna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lincrna_gene AS
 SELECT feature.feature_id AS lincrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lincRNA_gene'::text);


--
-- Name: line_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW line_element AS
 SELECT feature.feature_id AS line_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LINE_element'::text);


--
-- Name: linear; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW linear AS
 SELECT feature.feature_id AS linear_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear'::text);


--
-- Name: linear_double_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW linear_double_stranded_dna_chromosome AS
 SELECT feature.feature_id AS linear_double_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text);


--
-- Name: linear_double_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW linear_double_stranded_rna_chromosome AS
 SELECT feature.feature_id AS linear_double_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text);


--
-- Name: linear_single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW linear_single_stranded_dna_chromosome AS
 SELECT feature.feature_id AS linear_single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text);


--
-- Name: linear_single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW linear_single_stranded_rna_chromosome AS
 SELECT feature.feature_id AS linear_single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text);


--
-- Name: linkage_group; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW linkage_group AS
 SELECT feature.feature_id AS linkage_group_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'linkage_group'::text);


--
-- Name: lipoprotein_signal_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lipoprotein_signal_peptide AS
 SELECT feature.feature_id AS lipoprotein_signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text);


--
-- Name: lna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lna AS
 SELECT feature.feature_id AS lna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LNA'::text);


--
-- Name: lna_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lna_oligo AS
 SELECT feature.feature_id AS lna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LNA_oligo'::text);


--
-- Name: locus_control_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW locus_control_region AS
 SELECT feature.feature_id AS locus_control_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'locus_control_region'::text);


--
-- Name: long_terminal_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW long_terminal_repeat AS
 SELECT feature.feature_id AS long_terminal_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'five_prime_LTR'::text) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text));


--
-- Name: loss_of_heterozygosity; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW loss_of_heterozygosity AS
 SELECT feature.feature_id AS loss_of_heterozygosity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'loss_of_heterozygosity'::text);


--
-- Name: low_complexity; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW low_complexity AS
 SELECT feature.feature_id AS low_complexity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'low_complexity'::text);


--
-- Name: low_complexity_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW low_complexity_region AS
 SELECT feature.feature_id AS low_complexity_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'low_complexity_region'::text);


--
-- Name: loxp_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW loxp_site AS
 SELECT feature.feature_id AS loxp_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'loxP_site'::text);


--
-- Name: ltr_component; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ltr_component AS
 SELECT feature.feature_id AS ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'U5_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'LTR_component'::text));


--
-- Name: ltr_retrotransposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ltr_retrotransposon AS
 SELECT feature.feature_id AS ltr_retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'LTR_retrotransposon'::text);


--
-- Name: lysidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lysidine AS
 SELECT feature.feature_id AS lysidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysidine'::text);


--
-- Name: lysine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lysine AS
 SELECT feature.feature_id AS lysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysine'::text);


--
-- Name: lysine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lysine_trna_primary_transcript AS
 SELECT feature.feature_id AS lysine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text);


--
-- Name: lysosomal_localization_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lysosomal_localization_signal AS
 SELECT feature.feature_id AS lysosomal_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysosomal_localization_signal'::text);


--
-- Name: lysyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW lysyl_trna AS
 SELECT feature.feature_id AS lysyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'lysyl_tRNA'::text);


--
-- Name: macronuclear_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW macronuclear_chromosome AS
 SELECT feature.feature_id AS macronuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronuclear_chromosome'::text);


--
-- Name: macronuclear_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW macronuclear_sequence AS
 SELECT feature.feature_id AS macronuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronuclear_sequence'::text);


--
-- Name: macronucleus_destined_segment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW macronucleus_destined_segment AS
 SELECT feature.feature_id AS macronucleus_destined_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'macronucleus_destined_segment'::text);


--
-- Name: major_tss; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW major_tss AS
 SELECT feature.feature_id AS major_tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'major_TSS'::text);


--
-- Name: mannosyl_queuosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mannosyl_queuosine AS
 SELECT feature.feature_id AS mannosyl_queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mannosyl_queuosine'::text);


--
-- Name: match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW match AS
 SELECT feature.feature_id AS match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'nucleotide_match'::text) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'match'::text));


--
-- Name: match_part; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW match_part AS
 SELECT feature.feature_id AS match_part_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'match_part'::text);


--
-- Name: maternal_uniparental_disomy; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW maternal_uniparental_disomy AS
 SELECT feature.feature_id AS maternal_uniparental_disomy_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternal_uniparental_disomy'::text);


--
-- Name: maternal_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW maternal_variant AS
 SELECT feature.feature_id AS maternal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternal_variant'::text);


--
-- Name: maternally_imprinted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW maternally_imprinted AS
 SELECT feature.feature_id AS maternally_imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternally_imprinted'::text);


--
-- Name: maternally_imprinted_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW maternally_imprinted_gene AS
 SELECT feature.feature_id AS maternally_imprinted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maternally_imprinted_gene'::text);


--
-- Name: mathematically_defined_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mathematically_defined_repeat AS
 SELECT feature.feature_id AS mathematically_defined_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mathematically_defined_repeat'::text);


--
-- Name: mating_type_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mating_type_region AS
 SELECT feature.feature_id AS mating_type_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mating_type_region'::text);


--
-- Name: matrix_attachment_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW matrix_attachment_site AS
 SELECT feature.feature_id AS matrix_attachment_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'matrix_attachment_site'::text);


--
-- Name: mature_mirna_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mature_mirna_variant AS
 SELECT feature.feature_id AS mature_mirna_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mature_miRNA_variant'::text);


--
-- Name: mature_protein_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mature_protein_region AS
 SELECT feature.feature_id AS mature_protein_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'active_peptide'::text) OR ((cvterm.name)::text = 'mature_protein_region'::text));


--
-- Name: mature_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mature_transcript AS
 SELECT feature.feature_id AS mature_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mRNA'::text) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text));


--
-- Name: mature_transcript_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mature_transcript_region AS
 SELECT feature.feature_id AS mature_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mRNA_region'::text) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text));


--
-- Name: maxicircle; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW maxicircle AS
 SELECT feature.feature_id AS maxicircle_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'maxicircle'::text);


--
-- Name: maxicircle_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW maxicircle_gene AS
 SELECT feature.feature_id AS maxicircle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'cryptogene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text));


--
-- Name: member_of_regulon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW member_of_regulon AS
 SELECT feature.feature_id AS member_of_regulon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'member_of_regulon'::text);


--
-- Name: membrane_peptide_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW membrane_peptide_loop AS
 SELECT feature.feature_id AS membrane_peptide_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'membrane_peptide_loop'::text);


--
-- Name: membrane_structure; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW membrane_structure AS
 SELECT feature.feature_id AS membrane_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'membrane_structure'::text);


--
-- Name: metabolic_island; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW metabolic_island AS
 SELECT feature.feature_id AS metabolic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'metabolic_island'::text);


--
-- Name: metal_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW metal_binding_site AS
 SELECT feature.feature_id AS metal_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text));


--
-- Name: methionine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methionine AS
 SELECT feature.feature_id AS methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionine'::text);


--
-- Name: methionine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methionine_trna_primary_transcript AS
 SELECT feature.feature_id AS methionine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text);


--
-- Name: methionyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methionyl_trna AS
 SELECT feature.feature_id AS methionyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methionyl_tRNA'::text);


--
-- Name: methylated_a; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylated_a AS
 SELECT feature.feature_id AS methylated_a_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylated_A'::text);


--
-- Name: methylated_base_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylated_base_feature AS
 SELECT feature.feature_id AS methylated_base_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'methylated_C'::text) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text));


--
-- Name: methylated_c; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylated_c AS
 SELECT feature.feature_id AS methylated_c_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylated_C'::text);


--
-- Name: methylation_guide_snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylation_guide_snorna AS
 SELECT feature.feature_id AS methylation_guide_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA'::text);


--
-- Name: methylation_guide_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylation_guide_snorna_primary_transcript AS
 SELECT feature.feature_id AS methylation_guide_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text);


--
-- Name: methylinosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylinosine AS
 SELECT feature.feature_id AS methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylinosine'::text);


--
-- Name: methylwyosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW methylwyosine AS
 SELECT feature.feature_id AS methylwyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'methylwyosine'::text);


--
-- Name: micf_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW micf_rna AS
 SELECT feature.feature_id AS micf_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MicF_RNA'::text);


--
-- Name: microarray_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW microarray_oligo AS
 SELECT feature.feature_id AS microarray_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'microarray_oligo'::text);


--
-- Name: micronuclear_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW micronuclear_chromosome AS
 SELECT feature.feature_id AS micronuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'micronuclear_chromosome'::text);


--
-- Name: micronuclear_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW micronuclear_sequence AS
 SELECT feature.feature_id AS micronuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'micronuclear_sequence'::text);


--
-- Name: microsatellite; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW microsatellite AS
 SELECT feature.feature_id AS microsatellite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'microsatellite'::text));


--
-- Name: mini_exon_donor_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mini_exon_donor_rna AS
 SELECT feature.feature_id AS mini_exon_donor_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mini_exon_donor_RNA'::text);


--
-- Name: mini_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mini_gene AS
 SELECT feature.feature_id AS mini_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'rescue_mini_gene'::text) OR ((cvterm.name)::text = 'mini_gene'::text));


--
-- Name: minicircle; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minicircle AS
 SELECT feature.feature_id AS minicircle_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minicircle'::text);


--
-- Name: minicircle_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minicircle_gene AS
 SELECT feature.feature_id AS minicircle_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minicircle_gene'::text);


--
-- Name: minisatellite; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minisatellite AS
 SELECT feature.feature_id AS minisatellite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minisatellite'::text);


--
-- Name: minor_tss; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minor_tss AS
 SELECT feature.feature_id AS minor_tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minor_TSS'::text);


--
-- Name: minus_10_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_10_signal AS
 SELECT feature.feature_id AS minus_10_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_10_signal'::text);


--
-- Name: minus_12_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_12_signal AS
 SELECT feature.feature_id AS minus_12_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_12_signal'::text);


--
-- Name: minus_1_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_1_frameshift AS
 SELECT feature.feature_id AS minus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_frameshift'::text);


--
-- Name: minus_1_frameshift_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_1_frameshift_variant AS
 SELECT feature.feature_id AS minus_1_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_frameshift_variant'::text);


--
-- Name: minus_1_translationally_frameshifted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_1_translationally_frameshifted AS
 SELECT feature.feature_id AS minus_1_translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text);


--
-- Name: minus_24_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_24_signal AS
 SELECT feature.feature_id AS minus_24_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_24_signal'::text);


--
-- Name: minus_2_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_2_frameshift AS
 SELECT feature.feature_id AS minus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_2_frameshift'::text);


--
-- Name: minus_2_frameshift_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_2_frameshift_variant AS
 SELECT feature.feature_id AS minus_2_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_2_frameshift_variant'::text);


--
-- Name: minus_35_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW minus_35_signal AS
 SELECT feature.feature_id AS minus_35_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'minus_35_signal'::text);


--
-- Name: mirna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna AS
 SELECT feature.feature_id AS mirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA'::text);


--
-- Name: mirna_antiguide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_antiguide AS
 SELECT feature.feature_id AS mirna_antiguide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_antiguide'::text);


--
-- Name: mirna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_encoding AS
 SELECT feature.feature_id AS mirna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_encoding'::text);


--
-- Name: mirna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_gene AS
 SELECT feature.feature_id AS mirna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_gene'::text);


--
-- Name: mirna_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_loop AS
 SELECT feature.feature_id AS mirna_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_loop'::text);


--
-- Name: mirna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_primary_transcript AS
 SELECT feature.feature_id AS mirna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'stRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text));


--
-- Name: mirna_primary_transcript_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_primary_transcript_region AS
 SELECT feature.feature_id AS mirna_primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'pre_miRNA'::text) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text));


--
-- Name: mirna_stem; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_stem AS
 SELECT feature.feature_id AS mirna_stem_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_stem'::text);


--
-- Name: mirna_target_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirna_target_site AS
 SELECT feature.feature_id AS mirna_target_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'miRNA_target_site'::text);


--
-- Name: mirtron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mirtron AS
 SELECT feature.feature_id AS mirtron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mirtron'::text);


--
-- Name: missense_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW missense_codon AS
 SELECT feature.feature_id AS missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'conservative_missense_codon'::text) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'missense_codon'::text));


--
-- Name: mite; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mite AS
 SELECT feature.feature_id AS mite_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MITE'::text);


--
-- Name: mitochondrial_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mitochondrial_chromosome AS
 SELECT feature.feature_id AS mitochondrial_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mitochondrial_chromosome'::text);


--
-- Name: mitochondrial_dna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mitochondrial_dna AS
 SELECT feature.feature_id AS mitochondrial_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mitochondrial_DNA'::text);


--
-- Name: mitochondrial_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mitochondrial_sequence AS
 SELECT feature.feature_id AS mitochondrial_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mitochondrial_DNA'::text) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text));


--
-- Name: mnp; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mnp AS
 SELECT feature.feature_id AS mnp_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MNP'::text);


--
-- Name: mobile; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mobile AS
 SELECT feature.feature_id AS mobile_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mobile'::text);


--
-- Name: mobile_genetic_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mobile_genetic_element AS
 SELECT feature.feature_id AS mobile_genetic_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mobile_intron'::text) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text));


--
-- Name: mobile_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mobile_intron AS
 SELECT feature.feature_id AS mobile_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mobile_intron'::text);


--
-- Name: modified_adenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_adenosine AS
 SELECT feature.feature_id AS modified_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'one_methyladenosine'::text) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text));


--
-- Name: modified_amino_acid_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_amino_acid_feature AS
 SELECT feature.feature_id AS modified_amino_acid_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'modified_glycine'::text) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text));


--
-- Name: modified_base; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_base AS
 SELECT feature.feature_id AS modified_base_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'methylated_base_feature'::text) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'modified_base'::text));


--
-- Name: modified_cytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_cytidine AS
 SELECT feature.feature_id AS modified_cytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'three_methylcytidine'::text) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text));


--
-- Name: modified_glycine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_glycine AS
 SELECT feature.feature_id AS modified_glycine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_glycine'::text);


--
-- Name: modified_guanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_guanosine AS
 SELECT feature.feature_id AS modified_guanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'seven_deazaguanosine'::text) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text));


--
-- Name: modified_inosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_inosine AS
 SELECT feature.feature_id AS modified_inosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'methylinosine'::text) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text));


--
-- Name: modified_l_alanine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_alanine AS
 SELECT feature.feature_id AS modified_l_alanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_alanine'::text);


--
-- Name: modified_l_arginine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_arginine AS
 SELECT feature.feature_id AS modified_l_arginine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_arginine'::text);


--
-- Name: modified_l_asparagine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_asparagine AS
 SELECT feature.feature_id AS modified_l_asparagine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_asparagine'::text);


--
-- Name: modified_l_aspartic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_aspartic_acid AS
 SELECT feature.feature_id AS modified_l_aspartic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_aspartic_acid'::text);


--
-- Name: modified_l_cysteine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_cysteine AS
 SELECT feature.feature_id AS modified_l_cysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_cysteine'::text);


--
-- Name: modified_l_glutamic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_glutamic_acid AS
 SELECT feature.feature_id AS modified_l_glutamic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_glutamic_acid'::text);


--
-- Name: modified_l_glutamine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_glutamine AS
 SELECT feature.feature_id AS modified_l_glutamine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_glutamine'::text);


--
-- Name: modified_l_histidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_histidine AS
 SELECT feature.feature_id AS modified_l_histidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_histidine'::text);


--
-- Name: modified_l_isoleucine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_isoleucine AS
 SELECT feature.feature_id AS modified_l_isoleucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_isoleucine'::text);


--
-- Name: modified_l_leucine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_leucine AS
 SELECT feature.feature_id AS modified_l_leucine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_leucine'::text);


--
-- Name: modified_l_lysine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_lysine AS
 SELECT feature.feature_id AS modified_l_lysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_lysine'::text);


--
-- Name: modified_l_methionine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_methionine AS
 SELECT feature.feature_id AS modified_l_methionine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_methionine'::text);


--
-- Name: modified_l_phenylalanine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_phenylalanine AS
 SELECT feature.feature_id AS modified_l_phenylalanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_phenylalanine'::text);


--
-- Name: modified_l_proline; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_proline AS
 SELECT feature.feature_id AS modified_l_proline_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_proline'::text);


--
-- Name: modified_l_selenocysteine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_selenocysteine AS
 SELECT feature.feature_id AS modified_l_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_selenocysteine'::text);


--
-- Name: modified_l_serine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_serine AS
 SELECT feature.feature_id AS modified_l_serine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_serine'::text);


--
-- Name: modified_l_threonine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_threonine AS
 SELECT feature.feature_id AS modified_l_threonine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_threonine'::text);


--
-- Name: modified_l_tryptophan; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_tryptophan AS
 SELECT feature.feature_id AS modified_l_tryptophan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_tryptophan'::text);


--
-- Name: modified_l_tyrosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_tyrosine AS
 SELECT feature.feature_id AS modified_l_tyrosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_tyrosine'::text);


--
-- Name: modified_l_valine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_l_valine AS
 SELECT feature.feature_id AS modified_l_valine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'modified_L_valine'::text);


--
-- Name: modified_rna_base_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_rna_base_feature AS
 SELECT feature.feature_id AS modified_rna_base_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'inosine'::text) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text));


--
-- Name: modified_uridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW modified_uridine AS
 SELECT feature.feature_id AS modified_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'dihydrouridine'::text) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text));


--
-- Name: molecular_contact_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW molecular_contact_region AS
 SELECT feature.feature_id AS molecular_contact_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'polypeptide_metal_contact'::text) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text));


--
-- Name: monocistronic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW monocistronic AS
 SELECT feature.feature_id AS monocistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic'::text);


--
-- Name: monocistronic_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW monocistronic_mrna AS
 SELECT feature.feature_id AS monocistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic_mRNA'::text);


--
-- Name: monocistronic_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW monocistronic_primary_transcript AS
 SELECT feature.feature_id AS monocistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'monocistronic_primary_transcript'::text);


--
-- Name: monocistronic_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW monocistronic_transcript AS
 SELECT feature.feature_id AS monocistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'monocistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text));


--
-- Name: morpholino_backbone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW morpholino_backbone AS
 SELECT feature.feature_id AS morpholino_backbone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'morpholino_backbone'::text);


--
-- Name: morpholino_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW morpholino_oligo AS
 SELECT feature.feature_id AS morpholino_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'morpholino_oligo'::text);


--
-- Name: mrna_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_attribute AS
 SELECT feature.feature_id AS mrna_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'polyadenylated'::text) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text));


--
-- Name: mrna_recoded_by_codon_redefinition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_recoded_by_codon_redefinition AS
 SELECT feature.feature_id AS mrna_recoded_by_codon_redefinition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text);


--
-- Name: mrna_recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_recoded_by_translational_bypass AS
 SELECT feature.feature_id AS mrna_recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text);


--
-- Name: mrna_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_region AS
 SELECT feature.feature_id AS mrna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'riboswitch'::text) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text));


--
-- Name: mrna_with_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_with_frameshift AS
 SELECT feature.feature_id AS mrna_with_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text));


--
-- Name: mrna_with_minus_1_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_with_minus_1_frameshift AS
 SELECT feature.feature_id AS mrna_with_minus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text);


--
-- Name: mrna_with_minus_2_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_with_minus_2_frameshift AS
 SELECT feature.feature_id AS mrna_with_minus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text);


--
-- Name: mrna_with_plus_1_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_with_plus_1_frameshift AS
 SELECT feature.feature_id AS mrna_with_plus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text);


--
-- Name: mrna_with_plus_2_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mrna_with_plus_2_frameshift AS
 SELECT feature.feature_id AS mrna_with_plus_2_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text);


--
-- Name: mt_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mt_gene AS
 SELECT feature.feature_id AS mt_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'kinetoplast_gene'::text) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text));


--
-- Name: mte; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mte AS
 SELECT feature.feature_id AS mte_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'MTE'::text);


--
-- Name: mutated_variant_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW mutated_variant_site AS
 SELECT feature.feature_id AS mutated_variant_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'mutated_variant_site'::text);


--
-- Name: n2_2_prime_o_dimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_2_prime_o_dimethylguanosine AS
 SELECT feature.feature_id AS n2_2_prime_o_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text);


--
-- Name: n2_7_2prirme_o_trimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_7_2prirme_o_trimethylguanosine AS
 SELECT feature.feature_id AS n2_7_2prirme_o_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text);


--
-- Name: n2_7_dimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_7_dimethylguanosine AS
 SELECT feature.feature_id AS n2_7_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text);


--
-- Name: n2_methylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_methylguanosine AS
 SELECT feature.feature_id AS n2_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_methylguanosine'::text);


--
-- Name: n2_n2_2_prime_o_trimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_n2_2_prime_o_trimethylguanosine AS
 SELECT feature.feature_id AS n2_n2_2_prime_o_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text);


--
-- Name: n2_n2_7_trimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_n2_7_trimethylguanosine AS
 SELECT feature.feature_id AS n2_n2_7_trimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text);


--
-- Name: n2_n2_dimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n2_n2_dimethylguanosine AS
 SELECT feature.feature_id AS n2_n2_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text);


--
-- Name: n4_2_prime_o_dimethylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n4_2_prime_o_dimethylcytidine AS
 SELECT feature.feature_id AS n4_2_prime_o_dimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text);


--
-- Name: n4_acetyl_2_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n4_acetyl_2_prime_o_methylcytidine AS
 SELECT feature.feature_id AS n4_acetyl_2_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text);


--
-- Name: n4_acetylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n4_acetylcytidine AS
 SELECT feature.feature_id AS n4_acetylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_acetylcytidine'::text);


--
-- Name: n4_methylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n4_methylcytidine AS
 SELECT feature.feature_id AS n4_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_methylcytidine'::text);


--
-- Name: n4_n4_2_prime_o_trimethylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n4_n4_2_prime_o_trimethylcytidine AS
 SELECT feature.feature_id AS n4_n4_2_prime_o_trimethylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text);


--
-- Name: n6_2_prime_o_dimethyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_2_prime_o_dimethyladenosine AS
 SELECT feature.feature_id AS n6_2_prime_o_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text);


--
-- Name: n6_acetyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_acetyladenosine AS
 SELECT feature.feature_id AS n6_acetyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_acetyladenosine'::text);


--
-- Name: n6_cis_hydroxyisopentenyl_adenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_cis_hydroxyisopentenyl_adenosine AS
 SELECT feature.feature_id AS n6_cis_hydroxyisopentenyl_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text);


--
-- Name: n6_glycinylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_glycinylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_glycinylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text);


--
-- Name: n6_hydroxynorvalylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_hydroxynorvalylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_hydroxynorvalylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text);


--
-- Name: n6_isopentenyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_isopentenyladenosine AS
 SELECT feature.feature_id AS n6_isopentenyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_isopentenyladenosine'::text);


--
-- Name: n6_methyl_n6_threonylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_methyl_n6_threonylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_methyl_n6_threonylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text);


--
-- Name: n6_methyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_methyladenosine AS
 SELECT feature.feature_id AS n6_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_methyladenosine'::text);


--
-- Name: n6_n6_2_prime_o_trimethyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_n6_2_prime_o_trimethyladenosine AS
 SELECT feature.feature_id AS n6_n6_2_prime_o_trimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text);


--
-- Name: n6_n6_dimethyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_n6_dimethyladenosine AS
 SELECT feature.feature_id AS n6_n6_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text);


--
-- Name: n6_threonylcarbamoyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n6_threonylcarbamoyladenosine AS
 SELECT feature.feature_id AS n6_threonylcarbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text);


--
-- Name: n_terminal_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW n_terminal_region AS
 SELECT feature.feature_id AS n_terminal_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'n_terminal_region'::text);


--
-- Name: natural_plasmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW natural_plasmid AS
 SELECT feature.feature_id AS natural_plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_plasmid'::text);


--
-- Name: natural_transposable_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW natural_transposable_element AS
 SELECT feature.feature_id AS natural_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_transposable_element'::text);


--
-- Name: natural_variant_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW natural_variant_site AS
 SELECT feature.feature_id AS natural_variant_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural_variant_site'::text);


--
-- Name: nc_conserved_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nc_conserved_region AS
 SELECT feature.feature_id AS nc_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nc_conserved_region'::text);


--
-- Name: nc_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nc_primary_transcript AS
 SELECT feature.feature_id AS nc_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'scRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text));


--
-- Name: nc_transcript_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nc_transcript_variant AS
 SELECT feature.feature_id AS nc_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'mature_miRNA_variant'::text) OR ((cvterm.name)::text = 'nc_transcript_variant'::text));


--
-- Name: ncrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ncrna AS
 SELECT feature.feature_id AS ncrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'scRNA'::text) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text));


--
-- Name: ncrna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ncrna_gene AS
 SELECT feature.feature_id AS ncrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'gRNA_gene'::text) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text));


--
-- Name: ndm2_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ndm2_motif AS
 SELECT feature.feature_id AS ndm2_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NDM2_motif'::text);


--
-- Name: ndm3_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ndm3_motif AS
 SELECT feature.feature_id AS ndm3_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NDM3_motif'::text);


--
-- Name: negative_sense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW negative_sense_ssrna_viral_sequence AS
 SELECT feature.feature_id AS negative_sense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text);


--
-- Name: negatively_autoregulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW negatively_autoregulated AS
 SELECT feature.feature_id AS negatively_autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negatively_autoregulated'::text);


--
-- Name: negatively_autoregulated_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW negatively_autoregulated_gene AS
 SELECT feature.feature_id AS negatively_autoregulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'negatively_autoregulated_gene'::text);


--
-- Name: nested_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nested_repeat AS
 SELECT feature.feature_id AS nested_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'nested_tandem_repeat'::text) OR ((cvterm.name)::text = 'nested_repeat'::text));


--
-- Name: nested_tandem_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nested_tandem_repeat AS
 SELECT feature.feature_id AS nested_tandem_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nested_tandem_repeat'::text);


--
-- Name: nested_transposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nested_transposon AS
 SELECT feature.feature_id AS nested_transposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nested_transposon'::text);


--
-- Name: nmd_transcript_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nmd_transcript_variant AS
 SELECT feature.feature_id AS nmd_transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'NMD_transcript_variant'::text);


--
-- Name: no_output; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW no_output AS
 SELECT feature.feature_id AS no_output_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'no_output'::text);


--
-- Name: non_adjacent_residues; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_adjacent_residues AS
 SELECT feature.feature_id AS non_adjacent_residues_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_adjacent_residues'::text);


--
-- Name: non_canonical_five_prime_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_canonical_five_prime_splice_site AS
 SELECT feature.feature_id AS non_canonical_five_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text);


--
-- Name: non_canonical_start_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_canonical_start_codon AS
 SELECT feature.feature_id AS non_canonical_start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'four_bp_start_codon'::text) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text));


--
-- Name: non_canonical_three_prime_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_canonical_three_prime_splice_site AS
 SELECT feature.feature_id AS non_canonical_three_prime_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text);


--
-- Name: non_coding_exon_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_coding_exon_variant AS
 SELECT feature.feature_id AS non_coding_exon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_coding_exon_variant'::text);


--
-- Name: non_conservative_amino_acid_substitution; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_conservative_amino_acid_substitution AS
 SELECT feature.feature_id AS non_conservative_amino_acid_substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text);


--
-- Name: non_conservative_missense_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_conservative_missense_codon AS
 SELECT feature.feature_id AS non_conservative_missense_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_conservative_missense_codon'::text);


--
-- Name: non_cytoplasmic_polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_cytoplasmic_polypeptide_region AS
 SELECT feature.feature_id AS non_cytoplasmic_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text);


--
-- Name: non_ltr_retrotransposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_ltr_retrotransposon AS
 SELECT feature.feature_id AS non_ltr_retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'LINE_element'::text) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text));


--
-- Name: non_ltr_retrotransposon_polymeric_tract; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_ltr_retrotransposon_polymeric_tract AS
 SELECT feature.feature_id AS non_ltr_retrotransposon_polymeric_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text);


--
-- Name: non_processed_pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_processed_pseudogene AS
 SELECT feature.feature_id AS non_processed_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text));


--
-- Name: non_protein_coding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_protein_coding AS
 SELECT feature.feature_id AS non_protein_coding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'miRNA_encoding'::text) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text));


--
-- Name: non_synonymous_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_synonymous_codon AS
 SELECT feature.feature_id AS non_synonymous_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'stop_gained'::text) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text));


--
-- Name: non_terminal_residue; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_terminal_residue AS
 SELECT feature.feature_id AS non_terminal_residue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_terminal_residue'::text);


--
-- Name: non_transcribed_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW non_transcribed_region AS
 SELECT feature.feature_id AS non_transcribed_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'non_transcribed_region'::text);


--
-- Name: nonamer_of_recombination_feature_of_vertebrate_im_sys_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nonamer_of_recombination_feature_of_vertebrate_im_sys_gene AS
 SELECT feature.feature_id AS nonamer_of_recombination_feature_of_vertebrate_im_sys_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_D_nonamer'::text) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text));


--
-- Name: noncoding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW noncoding_exon AS
 SELECT feature.feature_id AS noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_noncoding_exon'::text) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text));


--
-- Name: noncoding_region_of_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW noncoding_region_of_exon AS
 SELECT feature.feature_id AS noncoding_region_of_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text));


--
-- Name: noncontiguous_finished; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW noncontiguous_finished AS
 SELECT feature.feature_id AS noncontiguous_finished_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'noncontiguous_finished'::text);


--
-- Name: nuclear_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_chromosome AS
 SELECT feature.feature_id AS nuclear_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_chromosome'::text);


--
-- Name: nuclear_export_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_export_signal AS
 SELECT feature.feature_id AS nuclear_export_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_export_signal'::text);


--
-- Name: nuclear_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_gene AS
 SELECT feature.feature_id AS nuclear_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_gene'::text);


--
-- Name: nuclear_localization_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_localization_signal AS
 SELECT feature.feature_id AS nuclear_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_localization_signal'::text);


--
-- Name: nuclear_mt_pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_mt_pseudogene AS
 SELECT feature.feature_id AS nuclear_mt_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text);


--
-- Name: nuclear_rim_localization_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_rim_localization_signal AS
 SELECT feature.feature_id AS nuclear_rim_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text);


--
-- Name: nuclear_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclear_sequence AS
 SELECT feature.feature_id AS nuclear_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nuclear_sequence'::text);


--
-- Name: nuclease_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclease_binding_site AS
 SELECT feature.feature_id AS nuclease_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'restriction_enzyme_binding_site'::text) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text));


--
-- Name: nuclease_hypersensitive_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclease_hypersensitive_site AS
 SELECT feature.feature_id AS nuclease_hypersensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text));


--
-- Name: nuclease_sensitive_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nuclease_sensitive_site AS
 SELECT feature.feature_id AS nuclease_sensitive_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'nuclease_hypersensitive_site'::text) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text));


--
-- Name: nucleic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleic_acid AS
 SELECT feature.feature_id AS nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'DNA'::text) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'nucleic_acid'::text));


--
-- Name: nucleomorph_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleomorph_gene AS
 SELECT feature.feature_id AS nucleomorph_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorph_gene'::text);


--
-- Name: nucleomorphic_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleomorphic_chromosome AS
 SELECT feature.feature_id AS nucleomorphic_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorphic_chromosome'::text);


--
-- Name: nucleomorphic_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleomorphic_sequence AS
 SELECT feature.feature_id AS nucleomorphic_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'nucleomorphic_sequence'::text);


--
-- Name: nucleotide_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleotide_binding_site AS
 SELECT feature.feature_id AS nucleotide_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'miRNA_target_site'::text) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text));


--
-- Name: nucleotide_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleotide_match AS
 SELECT feature.feature_id AS nucleotide_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'expressed_sequence_match'::text) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text));


--
-- Name: nucleotide_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleotide_motif AS
 SELECT feature.feature_id AS nucleotide_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'DNA_motif'::text) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text));


--
-- Name: nucleotide_to_protein_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW nucleotide_to_protein_binding_site AS
 SELECT feature.feature_id AS nucleotide_to_protein_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'nuclease_binding_site'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text));


--
-- Name: octamer_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW octamer_motif AS
 SELECT feature.feature_id AS octamer_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'octamer_motif'::text);


--
-- Name: oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW oligo AS
 SELECT feature.feature_id AS oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'aptamer'::text) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'oligo'::text));


--
-- Name: oligo_u_tail; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW oligo_u_tail AS
 SELECT feature.feature_id AS oligo_u_tail_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oligo_U_tail'::text);


--
-- Name: one_methyl_3_3_amino_three_carboxypropyl_pseudouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_methyl_3_3_amino_three_carboxypropyl_pseudouridine AS
 SELECT feature.feature_id AS one_methyl_3_3_amino_three_carboxypropyl_pseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text);


--
-- Name: one_methyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_methyladenosine AS
 SELECT feature.feature_id AS one_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methyladenosine'::text);


--
-- Name: one_methylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_methylguanosine AS
 SELECT feature.feature_id AS one_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylguanosine'::text);


--
-- Name: one_methylinosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_methylinosine AS
 SELECT feature.feature_id AS one_methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylinosine'::text);


--
-- Name: one_methylpseudouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_methylpseudouridine AS
 SELECT feature.feature_id AS one_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_methylpseudouridine'::text);


--
-- Name: one_two_prime_o_dimethyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_two_prime_o_dimethyladenosine AS
 SELECT feature.feature_id AS one_two_prime_o_dimethyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text);


--
-- Name: one_two_prime_o_dimethylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_two_prime_o_dimethylguanosine AS
 SELECT feature.feature_id AS one_two_prime_o_dimethylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text);


--
-- Name: one_two_prime_o_dimethylinosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW one_two_prime_o_dimethylinosine AS
 SELECT feature.feature_id AS one_two_prime_o_dimethylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text);


--
-- Name: open_chromatin_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW open_chromatin_region AS
 SELECT feature.feature_id AS open_chromatin_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'open_chromatin_region'::text);


--
-- Name: operator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW operator AS
 SELECT feature.feature_id AS operator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operator'::text);


--
-- Name: operon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW operon AS
 SELECT feature.feature_id AS operon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operon'::text);


--
-- Name: operon_member; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW operon_member AS
 SELECT feature.feature_id AS operon_member_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'operon_member'::text);


--
-- Name: orf; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW orf AS
 SELECT feature.feature_id AS orf_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'mini_gene'::text) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'ORF'::text));


--
-- Name: organelle_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW organelle_sequence AS
 SELECT feature.feature_id AS organelle_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'macronuclear_sequence'::text) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'organelle_sequence'::text));


--
-- Name: oric; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW oric AS
 SELECT feature.feature_id AS oric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriC'::text);


--
-- Name: origin_of_replication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW origin_of_replication AS
 SELECT feature.feature_id AS origin_of_replication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'D_loop'::text) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text));


--
-- Name: orit; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW orit AS
 SELECT feature.feature_id AS orit_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriT'::text);


--
-- Name: oriv; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW oriv AS
 SELECT feature.feature_id AS oriv_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'oriV'::text);


--
-- Name: orphan; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW orphan AS
 SELECT feature.feature_id AS orphan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orphan'::text);


--
-- Name: orphan_cds; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW orphan_cds AS
 SELECT feature.feature_id AS orphan_cds_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orphan_CDS'::text);


--
-- Name: orthologous; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW orthologous AS
 SELECT feature.feature_id AS orthologous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orthologous'::text);


--
-- Name: orthologous_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW orthologous_region AS
 SELECT feature.feature_id AS orthologous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'orthologous_region'::text);


--
-- Name: outron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW outron AS
 SELECT feature.feature_id AS outron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'outron'::text);


--
-- Name: overlapping; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW overlapping AS
 SELECT feature.feature_id AS overlapping_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'inside_intron'::text) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'overlapping'::text));


--
-- Name: overlapping_est_set; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW overlapping_est_set AS
 SELECT feature.feature_id AS overlapping_est_set_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'overlapping_EST_set'::text);


--
-- Name: overlapping_feature_set; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW overlapping_feature_set AS
 SELECT feature.feature_id AS overlapping_feature_set_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'overlapping_EST_set'::text) OR ((cvterm.name)::text = 'overlapping_feature_set'::text));


--
-- Name: oxys_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW oxys_rna AS
 SELECT feature.feature_id AS oxys_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'OxyS_RNA'::text);


--
-- Name: p_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW p_element AS
 SELECT feature.feature_id AS p_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'p_element'::text);


--
-- Name: pac; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pac AS
 SELECT feature.feature_id AS pac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PAC'::text);


--
-- Name: pac_end; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pac_end AS
 SELECT feature.feature_id AS pac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PAC_end'::text);


--
-- Name: paired_end_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paired_end_fragment AS
 SELECT feature.feature_id AS paired_end_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paired_end_fragment'::text);


--
-- Name: paracentric; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paracentric AS
 SELECT feature.feature_id AS paracentric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paracentric'::text);


--
-- Name: paracentric_inversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paracentric_inversion AS
 SELECT feature.feature_id AS paracentric_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paracentric_inversion'::text);


--
-- Name: parallel_beta_strand; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW parallel_beta_strand AS
 SELECT feature.feature_id AS parallel_beta_strand_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'parallel_beta_strand'::text);


--
-- Name: paralogous; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paralogous AS
 SELECT feature.feature_id AS paralogous_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paralogous'::text);


--
-- Name: paralogous_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paralogous_region AS
 SELECT feature.feature_id AS paralogous_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paralogous_region'::text);


--
-- Name: partially_characterised_chromosomal_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW partially_characterised_chromosomal_mutation AS
 SELECT feature.feature_id AS partially_characterised_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text);


--
-- Name: partially_processed_cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW partially_processed_cdna_clone AS
 SELECT feature.feature_id AS partially_processed_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text);


--
-- Name: paternal_uniparental_disomy; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paternal_uniparental_disomy AS
 SELECT feature.feature_id AS paternal_uniparental_disomy_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternal_uniparental_disomy'::text);


--
-- Name: paternal_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paternal_variant AS
 SELECT feature.feature_id AS paternal_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternal_variant'::text);


--
-- Name: paternally_imprinted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paternally_imprinted AS
 SELECT feature.feature_id AS paternally_imprinted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternally_imprinted'::text);


--
-- Name: paternally_imprinted_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW paternally_imprinted_gene AS
 SELECT feature.feature_id AS paternally_imprinted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'paternally_imprinted_gene'::text);


--
-- Name: pathogenic_island; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pathogenic_island AS
 SELECT feature.feature_id AS pathogenic_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pathogenic_island'::text);


--
-- Name: pcr_product; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pcr_product AS
 SELECT feature.feature_id AS pcr_product_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RAPD'::text) OR ((cvterm.name)::text = 'PCR_product'::text));


--
-- Name: pedigree_specific_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pedigree_specific_variant AS
 SELECT feature.feature_id AS pedigree_specific_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pedigree_specific_variant'::text);


--
-- Name: peptide_coil; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW peptide_coil AS
 SELECT feature.feature_id AS peptide_coil_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptide_coil'::text);


--
-- Name: peptide_collection; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW peptide_collection AS
 SELECT feature.feature_id AS peptide_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptide_collection'::text);


--
-- Name: peptide_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW peptide_helix AS
 SELECT feature.feature_id AS peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'left_handed_peptide_helix'::text) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text));


--
-- Name: peptide_localization_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW peptide_localization_signal AS
 SELECT feature.feature_id AS peptide_localization_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'signal_peptide'::text) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text));


--
-- Name: peptidyl; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW peptidyl AS
 SELECT feature.feature_id AS peptidyl_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peptidyl'::text);


--
-- Name: pericentric; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pericentric AS
 SELECT feature.feature_id AS pericentric_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pericentric'::text);


--
-- Name: pericentric_inversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pericentric_inversion AS
 SELECT feature.feature_id AS pericentric_inversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pericentric_inversion'::text);


--
-- Name: peroxywybutosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW peroxywybutosine AS
 SELECT feature.feature_id AS peroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'peroxywybutosine'::text);


--
-- Name: phage_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW phage_rna_polymerase_promoter AS
 SELECT feature.feature_id AS phage_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text));


--
-- Name: phage_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW phage_sequence AS
 SELECT feature.feature_id AS phage_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phage_sequence'::text);


--
-- Name: phagemid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW phagemid AS
 SELECT feature.feature_id AS phagemid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phagemid'::text);


--
-- Name: phe_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW phe_trna_primary_transcript AS
 SELECT feature.feature_id AS phe_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text);


--
-- Name: phenylalanine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW phenylalanine AS
 SELECT feature.feature_id AS phenylalanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanine'::text);


--
-- Name: phenylalanyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW phenylalanyl_trna AS
 SELECT feature.feature_id AS phenylalanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'phenylalanyl_tRNA'::text);


--
-- Name: pi_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pi_helix AS
 SELECT feature.feature_id AS pi_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pi_helix'::text);


--
-- Name: pirna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pirna AS
 SELECT feature.feature_id AS pirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'piRNA'::text);


--
-- Name: pirna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pirna_gene AS
 SELECT feature.feature_id AS pirna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'piRNA_gene'::text);


--
-- Name: plasmid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plasmid AS
 SELECT feature.feature_id AS plasmid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'engineered_plasmid'::text) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'plasmid'::text));


--
-- Name: plasmid_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plasmid_gene AS
 SELECT feature.feature_id AS plasmid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_gene'::text);


--
-- Name: plasmid_location; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plasmid_location AS
 SELECT feature.feature_id AS plasmid_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_location'::text);


--
-- Name: plasmid_vector; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plasmid_vector AS
 SELECT feature.feature_id AS plasmid_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plasmid_vector'::text);


--
-- Name: plastid_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plastid_gene AS
 SELECT feature.feature_id AS plastid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'apicoplast_gene'::text) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text));


--
-- Name: plastid_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plastid_sequence AS
 SELECT feature.feature_id AS plastid_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'apicoplast_sequence'::text) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text));


--
-- Name: plus_1_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_1_frameshift AS
 SELECT feature.feature_id AS plus_1_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_frameshift'::text);


--
-- Name: plus_1_frameshift_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_1_frameshift_variant AS
 SELECT feature.feature_id AS plus_1_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_frameshift_variant'::text);


--
-- Name: plus_1_translational_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_1_translational_frameshift AS
 SELECT feature.feature_id AS plus_1_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_translational_frameshift'::text);


--
-- Name: plus_1_translationally_frameshifted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_1_translationally_frameshifted AS
 SELECT feature.feature_id AS plus_1_translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text);


--
-- Name: plus_2_frameshift_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_2_frameshift_variant AS
 SELECT feature.feature_id AS plus_2_frameshift_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_frameshift variant'::text);


--
-- Name: plus_2_framshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_2_framshift AS
 SELECT feature.feature_id AS plus_2_framshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_framshift'::text);


--
-- Name: plus_2_translational_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW plus_2_translational_frameshift AS
 SELECT feature.feature_id AS plus_2_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'plus_2_translational_frameshift'::text);


--
-- Name: pna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pna AS
 SELECT feature.feature_id AS pna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PNA'::text);


--
-- Name: pna_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pna_oligo AS
 SELECT feature.feature_id AS pna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PNA_oligo'::text);


--
-- Name: point_centromere; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW point_centromere AS
 SELECT feature.feature_id AS point_centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'point_centromere'::text);


--
-- Name: point_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW point_mutation AS
 SELECT feature.feature_id AS point_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'point_mutation'::text);


--
-- Name: polinton; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polinton AS
 SELECT feature.feature_id AS polinton_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polinton'::text);


--
-- Name: polya_primed_cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polya_primed_cdna_clone AS
 SELECT feature.feature_id AS polya_primed_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text);


--
-- Name: polya_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polya_sequence AS
 SELECT feature.feature_id AS polya_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_sequence'::text);


--
-- Name: polya_signal_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polya_signal_sequence AS
 SELECT feature.feature_id AS polya_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_signal_sequence'::text);


--
-- Name: polya_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polya_site AS
 SELECT feature.feature_id AS polya_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyA_site'::text);


--
-- Name: polyadenylated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polyadenylated AS
 SELECT feature.feature_id AS polyadenylated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyadenylated'::text);


--
-- Name: polyadenylated_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polyadenylated_mrna AS
 SELECT feature.feature_id AS polyadenylated_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polyadenylated_mRNA'::text);


--
-- Name: polyadenylation_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polyadenylation_variant AS
 SELECT feature.feature_id AS polyadenylation_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'increased_polyadenylation_variant'::text) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text));


--
-- Name: polycistronic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polycistronic AS
 SELECT feature.feature_id AS polycistronic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic'::text) OR ((cvterm.name)::text = 'polycistronic'::text));


--
-- Name: polycistronic_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polycistronic_mrna AS
 SELECT feature.feature_id AS polycistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_mRNA'::text) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text));


--
-- Name: polycistronic_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polycistronic_primary_transcript AS
 SELECT feature.feature_id AS polycistronic_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'dicistronic_primary_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text));


--
-- Name: polycistronic_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polycistronic_transcript AS
 SELECT feature.feature_id AS polycistronic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'dicistronic_transcript'::text) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text));


--
-- Name: polymer_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polymer_attribute AS
 SELECT feature.feature_id AS polymer_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'nucleic_acid'::text) OR ((cvterm.name)::text = 'synthetic_sequence'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text)) OR ((cvterm.name)::text = 'peptidyl'::text)) OR ((cvterm.name)::text = 'DNA'::text)) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'random_sequence'::text)) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'linear'::text)) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'polymer_attribute'::text));


--
-- Name: polymerase_synthesis_read; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polymerase_synthesis_read AS
 SELECT feature.feature_id AS polymerase_synthesis_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymerase_synthesis_read'::text);


--
-- Name: polymorphic_sequence_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polymorphic_sequence_variant AS
 SELECT feature.feature_id AS polymorphic_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymorphic_sequence_variant'::text);


--
-- Name: polymorphic_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polymorphic_variant AS
 SELECT feature.feature_id AS polymorphic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polymorphic_variant'::text);


--
-- Name: polypeptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide AS
 SELECT feature.feature_id AS polypeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide'::text);


--
-- Name: polypeptide_binding_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_binding_motif AS
 SELECT feature.feature_id AS polypeptide_binding_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_binding_motif'::text);


--
-- Name: polypeptide_calcium_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_calcium_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_calcium_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text);


--
-- Name: polypeptide_catalytic_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_catalytic_motif AS
 SELECT feature.feature_id AS polypeptide_catalytic_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text);


--
-- Name: polypeptide_cobalt_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_cobalt_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_cobalt_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text);


--
-- Name: polypeptide_conserved_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_conserved_motif AS
 SELECT feature.feature_id AS polypeptide_conserved_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_conserved_motif'::text);


--
-- Name: polypeptide_conserved_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_conserved_region AS
 SELECT feature.feature_id AS polypeptide_conserved_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text));


--
-- Name: polypeptide_copper_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_copper_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_copper_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text);


--
-- Name: polypeptide_dna_contact; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_dna_contact AS
 SELECT feature.feature_id AS polypeptide_dna_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_DNA_contact'::text);


--
-- Name: polypeptide_domain; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_domain AS
 SELECT feature.feature_id AS polypeptide_domain_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_domain'::text);


--
-- Name: polypeptide_function_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_function_variant AS
 SELECT feature.feature_id AS polypeptide_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text));


--
-- Name: polypeptide_fusion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_fusion AS
 SELECT feature.feature_id AS polypeptide_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_fusion'::text);


--
-- Name: polypeptide_gain_of_function_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_gain_of_function_variant AS
 SELECT feature.feature_id AS polypeptide_gain_of_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text);


--
-- Name: polypeptide_iron_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_iron_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_iron_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text);


--
-- Name: polypeptide_ligand_contact; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_ligand_contact AS
 SELECT feature.feature_id AS polypeptide_ligand_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_ligand_contact'::text);


--
-- Name: polypeptide_localization_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_localization_variant AS
 SELECT feature.feature_id AS polypeptide_localization_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_localization_variant'::text);


--
-- Name: polypeptide_loss_of_function_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_loss_of_function_variant AS
 SELECT feature.feature_id AS polypeptide_loss_of_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'inactive_ligand_binding_site'::text) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text));


--
-- Name: polypeptide_magnesium_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_magnesium_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_magnesium_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text);


--
-- Name: polypeptide_manganese_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_manganese_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_manganese_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text);


--
-- Name: polypeptide_metal_contact; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_metal_contact AS
 SELECT feature.feature_id AS polypeptide_metal_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text));


--
-- Name: polypeptide_molybdenum_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_molybdenum_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_molybdenum_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text);


--
-- Name: polypeptide_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_motif AS
 SELECT feature.feature_id AS polypeptide_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'biochemical_region_of_peptide'::text) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text));


--
-- Name: polypeptide_nest_left_right_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_nest_left_right_motif AS
 SELECT feature.feature_id AS polypeptide_nest_left_right_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text);


--
-- Name: polypeptide_nest_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_nest_motif AS
 SELECT feature.feature_id AS polypeptide_nest_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text));


--
-- Name: polypeptide_nest_right_left_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_nest_right_left_motif AS
 SELECT feature.feature_id AS polypeptide_nest_right_left_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text);


--
-- Name: polypeptide_nickel_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_nickel_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_nickel_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text);


--
-- Name: polypeptide_partial_loss_of_function; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_partial_loss_of_function AS
 SELECT feature.feature_id AS polypeptide_partial_loss_of_function_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text);


--
-- Name: polypeptide_post_translational_processing_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_post_translational_processing_variant AS
 SELECT feature.feature_id AS polypeptide_post_translational_processing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text);


--
-- Name: polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_region AS
 SELECT feature.feature_id AS polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'mature_protein_region'::text) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text));


--
-- Name: polypeptide_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_repeat AS
 SELECT feature.feature_id AS polypeptide_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_repeat'::text);


--
-- Name: polypeptide_secondary_structure; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_secondary_structure AS
 SELECT feature.feature_id AS polypeptide_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'asx_motif'::text) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text));


--
-- Name: polypeptide_sequence_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_sequence_variant AS
 SELECT feature.feature_id AS polypeptide_sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'amino_acid_deletion'::text) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text));


--
-- Name: polypeptide_sequencing_information; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_sequencing_information AS
 SELECT feature.feature_id AS polypeptide_sequencing_information_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'non_adjacent_residues'::text) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text));


--
-- Name: polypeptide_structural_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_structural_motif AS
 SELECT feature.feature_id AS polypeptide_structural_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'coiled_coil'::text) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text));


--
-- Name: polypeptide_structural_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_structural_region AS
 SELECT feature.feature_id AS polypeptide_structural_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polypeptide_domain'::text) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text));


--
-- Name: polypeptide_truncation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_truncation AS
 SELECT feature.feature_id AS polypeptide_truncation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_truncation'::text);


--
-- Name: polypeptide_tungsten_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_tungsten_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_tungsten_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text);


--
-- Name: polypeptide_turn_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_turn_motif AS
 SELECT feature.feature_id AS polypeptide_turn_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'asx_turn'::text) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text));


--
-- Name: polypeptide_variation_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_variation_site AS
 SELECT feature.feature_id AS polypeptide_variation_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'natural_variant_site'::text) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text));


--
-- Name: polypeptide_zinc_ion_contact_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypeptide_zinc_ion_contact_site AS
 SELECT feature.feature_id AS polypeptide_zinc_ion_contact_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text);


--
-- Name: polyploid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polyploid AS
 SELECT feature.feature_id AS polyploid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'autopolyploid'::text) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text));


--
-- Name: polypyrimidine_tract; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW polypyrimidine_tract AS
 SELECT feature.feature_id AS polypyrimidine_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'polypyrimidine_tract'::text);


--
-- Name: population_specific_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW population_specific_variant AS
 SELECT feature.feature_id AS population_specific_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'population_specific_variant'::text);


--
-- Name: positive_sense_ssrna_viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW positive_sense_ssrna_viral_sequence AS
 SELECT feature.feature_id AS positive_sense_ssrna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text);


--
-- Name: positively_autoregulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW positively_autoregulated AS
 SELECT feature.feature_id AS positively_autoregulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positively_autoregulated'::text);


--
-- Name: positively_autoregulated_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW positively_autoregulated_gene AS
 SELECT feature.feature_id AS positively_autoregulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'positively_autoregulated_gene'::text);


--
-- Name: possible_assembly_error; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW possible_assembly_error AS
 SELECT feature.feature_id AS possible_assembly_error_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'possible_assembly_error'::text);


--
-- Name: possible_base_call_error; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW possible_base_call_error AS
 SELECT feature.feature_id AS possible_base_call_error_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'possible_base_call_error'::text);


--
-- Name: post_translationally_modified_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW post_translationally_modified_region AS
 SELECT feature.feature_id AS post_translationally_modified_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'histone_modification'::text) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text));


--
-- Name: post_translationally_regulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW post_translationally_regulated AS
 SELECT feature.feature_id AS post_translationally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text));


--
-- Name: post_translationally_regulated_by_protein_modification; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW post_translationally_regulated_by_protein_modification AS
 SELECT feature.feature_id AS post_translationally_regulated_by_protein_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text);


--
-- Name: post_translationally_regulated_by_protein_stability; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW post_translationally_regulated_by_protein_stability AS
 SELECT feature.feature_id AS post_translationally_regulated_by_protein_stability_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text);


--
-- Name: post_translationally_regulated_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW post_translationally_regulated_gene AS
 SELECT feature.feature_id AS post_translationally_regulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'post_translationally_regulated_gene'::text);


--
-- Name: pre_edited_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pre_edited_mrna AS
 SELECT feature.feature_id AS pre_edited_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_edited_mRNA'::text);


--
-- Name: pre_edited_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pre_edited_region AS
 SELECT feature.feature_id AS pre_edited_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_edited_region'::text);


--
-- Name: pre_mirna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pre_mirna AS
 SELECT feature.feature_id AS pre_mirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pre_miRNA'::text);


--
-- Name: predicted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW predicted AS
 SELECT feature.feature_id AS predicted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'supported_by_sequence_similarity'::text) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'predicted'::text));


--
-- Name: predicted_by_ab_initio_computation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW predicted_by_ab_initio_computation AS
 SELECT feature.feature_id AS predicted_by_ab_initio_computation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text);


--
-- Name: predicted_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW predicted_gene AS
 SELECT feature.feature_id AS predicted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'predicted_gene'::text);


--
-- Name: primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW primary_transcript AS
 SELECT feature.feature_id AS primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'protein_coding_primary_transcript'::text) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text));


--
-- Name: primary_transcript_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW primary_transcript_region AS
 SELECT feature.feature_id AS primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'splice_site'::text) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text));


--
-- Name: primer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW primer AS
 SELECT feature.feature_id AS primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'sequencing_primer'::text) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'primer'::text));


--
-- Name: primer_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW primer_binding_site AS
 SELECT feature.feature_id AS primer_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'primer_binding_site'::text);


--
-- Name: primer_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW primer_match AS
 SELECT feature.feature_id AS primer_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'primer_match'::text);


--
-- Name: probe; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW probe AS
 SELECT feature.feature_id AS probe_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'microarray_oligo'::text) OR ((cvterm.name)::text = 'probe'::text));


--
-- Name: processed_pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW processed_pseudogene AS
 SELECT feature.feature_id AS processed_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'processed_pseudogene'::text);


--
-- Name: processed_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW processed_transcript AS
 SELECT feature.feature_id AS processed_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'processed_transcript'::text);


--
-- Name: proline; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proline AS
 SELECT feature.feature_id AS proline_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proline'::text);


--
-- Name: proline_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proline_trna_primary_transcript AS
 SELECT feature.feature_id AS proline_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text);


--
-- Name: prolyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW prolyl_trna AS
 SELECT feature.feature_id AS prolyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'prolyl_tRNA'::text);


--
-- Name: promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW promoter AS
 SELECT feature.feature_id AS promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((cvterm.name)::text = 'bidirectional_promoter'::text) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'promoter'::text));


--
-- Name: promoter_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW promoter_element AS
 SELECT feature.feature_id AS promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((cvterm.name)::text = 'GC_rich_promoter_region'::text) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text));


--
-- Name: promoter_targeting_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW promoter_targeting_sequence AS
 SELECT feature.feature_id AS promoter_targeting_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'promoter_targeting_sequence'::text);


--
-- Name: promoter_trap_construct; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW promoter_trap_construct AS
 SELECT feature.feature_id AS promoter_trap_construct_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'promoter_trap_construct'::text);


--
-- Name: propeptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW propeptide AS
 SELECT feature.feature_id AS propeptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'propeptide'::text);


--
-- Name: propeptide_cleavage_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW propeptide_cleavage_site AS
 SELECT feature.feature_id AS propeptide_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'propeptide_cleavage_site'::text);


--
-- Name: prophage; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW prophage AS
 SELECT feature.feature_id AS prophage_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'prophage'::text);


--
-- Name: proplastid_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proplastid_gene AS
 SELECT feature.feature_id AS proplastid_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proplastid_gene'::text);


--
-- Name: proplastid_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proplastid_sequence AS
 SELECT feature.feature_id AS proplastid_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proplastid_sequence'::text);


--
-- Name: protein_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW protein_binding_site AS
 SELECT feature.feature_id AS protein_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((cvterm.name)::text = 'protein_protein_contact'::text) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text));


--
-- Name: protein_coding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW protein_coding AS
 SELECT feature.feature_id AS protein_coding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'intein_containing'::text) OR ((cvterm.name)::text = 'protein_coding'::text));

--
-- Name: protein_coding_gene; Type: VIEW; Schema: public; Owner: -
--

--
-- Name: protein_coding_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW protein_coding_gene AS
 SELECT feature.feature_id AS protein_coding_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text));

--
-- Name: protein_coding_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW protein_coding_primary_transcript AS
 SELECT feature.feature_id AS protein_coding_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'pre_edited_mRNA'::text) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text));


--
-- Name: protein_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW protein_match AS
 SELECT feature.feature_id AS protein_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'protein_match'::text);


--
-- Name: protein_protein_contact; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW protein_protein_contact AS
 SELECT feature.feature_id AS protein_protein_contact_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'protein_protein_contact'::text);


--
-- Name: proviral_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proviral_gene AS
 SELECT feature.feature_id AS proviral_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'endogenous_retroviral_gene'::text) OR ((cvterm.name)::text = 'proviral_gene'::text));


--
-- Name: proviral_location; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proviral_location AS
 SELECT feature.feature_id AS proviral_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'endogenous_retroviral_sequence'::text) OR ((cvterm.name)::text = 'proviral_location'::text));


--
-- Name: proviral_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proviral_region AS
 SELECT feature.feature_id AS proviral_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'prophage'::text) OR ((cvterm.name)::text = 'proviral_region'::text));


--
-- Name: proximal_promoter_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW proximal_promoter_element AS
 SELECT feature.feature_id AS proximal_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'proximal_promoter_element'::text);


--
-- Name: pse_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pse_motif AS
 SELECT feature.feature_id AS pse_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'PSE_motif'::text);


--
-- Name: pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogene AS
 SELECT feature.feature_id AS pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'processed_pseudogene'::text) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene'::text));


--
-- Name: pseudogene_by_unequal_crossing_over; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogene_by_unequal_crossing_over AS
 SELECT feature.feature_id AS pseudogene_by_unequal_crossing_over_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text);


--
-- Name: pseudogenic_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogenic_exon AS
 SELECT feature.feature_id AS pseudogenic_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_exon'::text);


--
-- Name: pseudogenic_gene_segment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogenic_gene_segment AS
 SELECT feature.feature_id AS pseudogenic_gene_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_gene_segment'::text);


--
-- Name: pseudogenic_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogenic_region AS
 SELECT feature.feature_id AS pseudogenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'decayed_exon'::text) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text));


--
-- Name: pseudogenic_rrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogenic_rrna AS
 SELECT feature.feature_id AS pseudogenic_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_rRNA'::text);


--
-- Name: pseudogenic_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogenic_transcript AS
 SELECT feature.feature_id AS pseudogenic_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_transcript'::text);


--
-- Name: pseudogenic_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudogenic_trna AS
 SELECT feature.feature_id AS pseudogenic_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudogenic_tRNA'::text);


--
-- Name: pseudoknot; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudoknot AS
 SELECT feature.feature_id AS pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'recoding_pseudoknot'::text) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text));


--
-- Name: pseudouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudouridine AS
 SELECT feature.feature_id AS pseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudouridine'::text);


--
-- Name: pseudouridylation_guide_snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pseudouridylation_guide_snorna AS
 SELECT feature.feature_id AS pseudouridylation_guide_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text);


--
-- Name: purine_to_pyrimidine_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW purine_to_pyrimidine_transversion AS
 SELECT feature.feature_id AS purine_to_pyrimidine_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'A_to_C_transversion'::text) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text));


--
-- Name: purine_transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW purine_transition AS
 SELECT feature.feature_id AS purine_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'A_to_G_transition'::text) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text));


--
-- Name: pyrimidine_to_purine_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pyrimidine_to_purine_transversion AS
 SELECT feature.feature_id AS pyrimidine_to_purine_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'C_to_A_transversion'::text) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text));


--
-- Name: pyrimidine_transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pyrimidine_transition AS
 SELECT feature.feature_id AS pyrimidine_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'C_to_T_transition'::text) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text));


--
-- Name: pyrosequenced_read; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pyrosequenced_read AS
 SELECT feature.feature_id AS pyrosequenced_read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrosequenced_read'::text);


--
-- Name: pyrrolysine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pyrrolysine AS
 SELECT feature.feature_id AS pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysine'::text);


--
-- Name: pyrrolysine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pyrrolysine_trna_primary_transcript AS
 SELECT feature.feature_id AS pyrrolysine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text);


--
-- Name: pyrrolysyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW pyrrolysyl_trna AS
 SELECT feature.feature_id AS pyrrolysyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text);


--
-- Name: qtl; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW qtl AS
 SELECT feature.feature_id AS qtl_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'QTL'::text);


--
-- Name: quality_value; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW quality_value AS
 SELECT feature.feature_id AS quality_value_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'quality_value'::text);


--
-- Name: quantitative_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW quantitative_variant AS
 SELECT feature.feature_id AS quantitative_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'quantitative_variant'::text);


--
-- Name: queuosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW queuosine AS
 SELECT feature.feature_id AS queuosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'queuosine'::text);


--
-- Name: r_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW r_five_prime_ltr_region AS
 SELECT feature.feature_id AS r_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_five_prime_LTR_region'::text);


--
-- Name: r_gna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW r_gna AS
 SELECT feature.feature_id AS r_gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_GNA'::text);


--
-- Name: r_gna_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW r_gna_oligo AS
 SELECT feature.feature_id AS r_gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_GNA_oligo'::text);


--
-- Name: r_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW r_ltr_region AS
 SELECT feature.feature_id AS r_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'R_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'R_LTR_region'::text));


--
-- Name: r_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW r_three_prime_ltr_region AS
 SELECT feature.feature_id AS r_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'R_three_prime_LTR_region'::text);


--
-- Name: random_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW random_sequence AS
 SELECT feature.feature_id AS random_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'random_sequence'::text);


--
-- Name: rapd; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rapd AS
 SELECT feature.feature_id AS rapd_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RAPD'::text);


--
-- Name: rare_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rare_variant AS
 SELECT feature.feature_id AS rare_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rare_variant'::text);


--
-- Name: rasirna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rasirna AS
 SELECT feature.feature_id AS rasirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rasiRNA'::text);


--
-- Name: rate_of_transcription_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rate_of_transcription_variant AS
 SELECT feature.feature_id AS rate_of_transcription_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'increased_transcription_rate_variant'::text) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text));


--
-- Name: read; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW read AS
 SELECT feature.feature_id AS read_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'read_pair'::text) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'read'::text));


--
-- Name: read_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW read_pair AS
 SELECT feature.feature_id AS read_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'read_pair'::text);


--
-- Name: reading_frame; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reading_frame AS
 SELECT feature.feature_id AS reading_frame_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'ORF'::text) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'reading_frame'::text));


--
-- Name: reagent; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reagent AS
 SELECT feature.feature_id AS reagent_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'PCR_product'::text) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'reagent'::text));


--
-- Name: rearranged_at_dna_level; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rearranged_at_dna_level AS
 SELECT feature.feature_id AS rearranged_at_dna_level_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rearranged_at_DNA_level'::text);


--
-- Name: reciprocal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reciprocal AS
 SELECT feature.feature_id AS reciprocal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reciprocal'::text);


--
-- Name: reciprocal_chromosomal_translocation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reciprocal_chromosomal_translocation AS
 SELECT feature.feature_id AS reciprocal_chromosomal_translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text);


--
-- Name: recoded; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recoded AS
 SELECT feature.feature_id AS recoded_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'codon_redefined'::text) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'recoded'::text));


--
-- Name: recoded_by_translational_bypass; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recoded_by_translational_bypass AS
 SELECT feature.feature_id AS recoded_by_translational_bypass_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recoded_by_translational_bypass'::text);


--
-- Name: recoded_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recoded_codon AS
 SELECT feature.feature_id AS recoded_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'stop_codon_read_through'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text));


--
-- Name: recoded_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recoded_mrna AS
 SELECT feature.feature_id AS recoded_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text));


--
-- Name: recoding_pseudoknot; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recoding_pseudoknot AS
 SELECT feature.feature_id AS recoding_pseudoknot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recoding_pseudoknot'::text);


--
-- Name: recoding_stimulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recoding_stimulatory_region AS
 SELECT feature.feature_id AS recoding_stimulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text));


--
-- Name: recombination_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombination_feature AS
 SELECT feature.feature_id AS recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'recombination_hotspot'::text) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text));


--
-- Name: recombination_feature_of_rearranged_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombination_feature_of_rearranged_gene AS
 SELECT feature.feature_id AS recombination_feature_of_rearranged_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text));


--
-- Name: recombination_hotspot; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombination_hotspot AS
 SELECT feature.feature_id AS recombination_hotspot_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_hotspot'::text);


--
-- Name: recombination_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombination_regulatory_region AS
 SELECT feature.feature_id AS recombination_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_regulatory_region'::text);


--
-- Name: recombination_signal_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombination_signal_sequence AS
 SELECT feature.feature_id AS recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombination_signal_sequence'::text);


--
-- Name: recombinationally_inverted_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombinationally_inverted_gene AS
 SELECT feature.feature_id AS recombinationally_inverted_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_inverted_gene'::text);


--
-- Name: recombinationally_rearranged; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombinationally_rearranged AS
 SELECT feature.feature_id AS recombinationally_rearranged_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_rearranged'::text);


--
-- Name: recombinationally_rearranged_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombinationally_rearranged_gene AS
 SELECT feature.feature_id AS recombinationally_rearranged_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'recombinationally_inverted_gene'::text) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text));


--
-- Name: recombinationally_rearranged_vertebrate_immune_system_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recombinationally_rearranged_vertebrate_immune_system_gene AS
 SELECT feature.feature_id AS recombinationally_rearranged_vertebrate_immune_system_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text);


--
-- Name: recursive_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW recursive_splice_site AS
 SELECT feature.feature_id AS recursive_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'recursive_splice_site'::text);


--
-- Name: reference_genome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reference_genome AS
 SELECT feature.feature_id AS reference_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reference_genome'::text);


--
-- Name: region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW region AS
 SELECT feature.feature_id AS region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
cvterm.name)::text = 'biomaterial_region'::text) OR ((cvterm.name)::text = 'experimental_feature'::text)) OR ((cvterm.name)::text = 'biological_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text)) OR ((cvterm.name)::text = 'reagent'::text)) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'match_part'::text)) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'flanking_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'region'::text));


--
-- Name: regional_centromere; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regional_centromere AS
 SELECT feature.feature_id AS regional_centromere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere'::text);


--
-- Name: regional_centromere_central_core; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regional_centromere_central_core AS
 SELECT feature.feature_id AS regional_centromere_central_core_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_central_core'::text);


--
-- Name: regional_centromere_inner_repeat_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regional_centromere_inner_repeat_region AS
 SELECT feature.feature_id AS regional_centromere_inner_repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text);


--
-- Name: regional_centromere_outer_repeat_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regional_centromere_outer_repeat_region AS
 SELECT feature.feature_id AS regional_centromere_outer_repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text);


--
-- Name: regulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regulated AS
 SELECT feature.feature_id AS regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((cvterm.name)::text = 'transcriptionally_regulated'::text) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'regulated'::text));


--
-- Name: regulatory_promoter_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regulatory_promoter_element AS
 SELECT feature.feature_id AS regulatory_promoter_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'proximal_promoter_element'::text) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text));


--
-- Name: regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regulatory_region AS
 SELECT feature.feature_id AS regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'transcription_regulatory_region'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text));


--
-- Name: regulatory_region_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regulatory_region_variant AS
 SELECT feature.feature_id AS regulatory_region_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'TF_binding_site_variant'::text) OR ((cvterm.name)::text = 'regulatory_region_variant'::text));


--
-- Name: regulon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW regulon AS
 SELECT feature.feature_id AS regulon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'regulon'::text);


--
-- Name: remark; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW remark AS
 SELECT feature.feature_id AS remark_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'sequence_difference'::text) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'remark'::text));


--
-- Name: repeat_component; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW repeat_component AS
 SELECT feature.feature_id AS repeat_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text));


--
-- Name: repeat_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW repeat_fragment AS
 SELECT feature.feature_id AS repeat_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'repeat_fragment'::text);


--
-- Name: repeat_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW repeat_region AS
 SELECT feature.feature_id AS repeat_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((cvterm.name)::text = 'long_terminal_repeat'::text) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'repeat_region'::text));


--
-- Name: repeat_unit; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW repeat_unit AS
 SELECT feature.feature_id AS repeat_unit_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'repeat_unit'::text);


--
-- Name: replication_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW replication_regulatory_region AS
 SELECT feature.feature_id AS replication_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'replication_regulatory_region'::text);


--
-- Name: replicon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW replicon AS
 SELECT feature.feature_id AS replicon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'plasmid'::text) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'replicon'::text));


--
-- Name: rescue; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rescue AS
 SELECT feature.feature_id AS rescue_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rescue'::text);


--
-- Name: rescue_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rescue_gene AS
 SELECT feature.feature_id AS rescue_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'wild_type_rescue_gene'::text) OR ((cvterm.name)::text = 'rescue_gene'::text));


--
-- Name: rescue_mini_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rescue_mini_gene AS
 SELECT feature.feature_id AS rescue_mini_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rescue_mini_gene'::text);


--
-- Name: rescue_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rescue_region AS
 SELECT feature.feature_id AS rescue_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_rescue_region'::text) OR ((cvterm.name)::text = 'rescue_region'::text));


--
-- Name: resolution_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW resolution_site AS
 SELECT feature.feature_id AS resolution_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'loxP_site'::text) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text));


--
-- Name: restriction_enzyme_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW restriction_enzyme_binding_site AS
 SELECT feature.feature_id AS restriction_enzyme_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text);


--
-- Name: restriction_enzyme_cleavage_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW restriction_enzyme_cleavage_junction AS
 SELECT feature.feature_id AS restriction_enzyme_cleavage_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text));


--
-- Name: restriction_enzyme_recognition_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW restriction_enzyme_recognition_site AS
 SELECT feature.feature_id AS restriction_enzyme_recognition_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text));


--
-- Name: restriction_enzyme_single_strand_overhang; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW restriction_enzyme_single_strand_overhang AS
 SELECT feature.feature_id AS restriction_enzyme_single_strand_overhang_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text);


--
-- Name: restriction_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW restriction_fragment AS
 SELECT feature.feature_id AS restriction_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RFLP_fragment'::text) OR ((cvterm.name)::text = 'restriction_fragment'::text));


--
-- Name: retinoic_acid_responsive_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW retinoic_acid_responsive_element AS
 SELECT feature.feature_id AS retinoic_acid_responsive_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text);


--
-- Name: retrogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW retrogene AS
 SELECT feature.feature_id AS retrogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retrogene'::text);


--
-- Name: retron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW retron AS
 SELECT feature.feature_id AS retron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retron'::text);


--
-- Name: retrotransposed; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW retrotransposed AS
 SELECT feature.feature_id AS retrotransposed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'retrotransposed'::text);


--
-- Name: retrotransposon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW retrotransposon AS
 SELECT feature.feature_id AS retrotransposon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'LTR_retrotransposon'::text) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text));


--
-- Name: reverse; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reverse AS
 SELECT feature.feature_id AS reverse_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse'::text);


--
-- Name: reverse_hoogsteen_base_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reverse_hoogsteen_base_pair AS
 SELECT feature.feature_id AS reverse_hoogsteen_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text);


--
-- Name: reverse_primer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW reverse_primer AS
 SELECT feature.feature_id AS reverse_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'reverse_primer'::text);


--
-- Name: rflp_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rflp_fragment AS
 SELECT feature.feature_id AS rflp_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RFLP_fragment'::text);


--
-- Name: rh_map; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rh_map AS
 SELECT feature.feature_id AS rh_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RH_map'::text);


--
-- Name: rho_dependent_bacterial_terminator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rho_dependent_bacterial_terminator AS
 SELECT feature.feature_id AS rho_dependent_bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text);


--
-- Name: rho_independent_bacterial_terminator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rho_independent_bacterial_terminator AS
 SELECT feature.feature_id AS rho_independent_bacterial_terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text);


--
-- Name: ribosome_entry_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ribosome_entry_site AS
 SELECT feature.feature_id AS ribosome_entry_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'internal_ribosome_entry_site'::text) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text));


--
-- Name: riboswitch; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW riboswitch AS
 SELECT feature.feature_id AS riboswitch_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'riboswitch'::text);


--
-- Name: ribothymidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ribothymidine AS
 SELECT feature.feature_id AS ribothymidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribothymidine'::text);


--
-- Name: ribozyme; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ribozyme AS
 SELECT feature.feature_id AS ribozyme_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribozyme'::text);


--
-- Name: ribozymic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ribozymic AS
 SELECT feature.feature_id AS ribozymic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ribozymic'::text);


--
-- Name: right_handed_peptide_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW right_handed_peptide_helix AS
 SELECT feature.feature_id AS right_handed_peptide_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'alpha_helix'::text) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text));


--
-- Name: ring_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ring_chromosome AS
 SELECT feature.feature_id AS ring_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'inverted_ring_chromosome'::text) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text));


--
-- Name: rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna AS
 SELECT feature.feature_id AS rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA'::text);


--
-- Name: rna_6s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_6s AS
 SELECT feature.feature_id AS rna_6s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_6S'::text);


--
-- Name: rna_aptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_aptamer AS
 SELECT feature.feature_id AS rna_aptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_aptamer'::text);


--
-- Name: rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_chromosome AS
 SELECT feature.feature_id AS rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text));


--
-- Name: rna_hook_turn; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_hook_turn AS
 SELECT feature.feature_id AS rna_hook_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_hook_turn'::text);


--
-- Name: rna_internal_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_internal_loop AS
 SELECT feature.feature_id AS rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text));


--
-- Name: rna_junction_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_junction_loop AS
 SELECT feature.feature_id AS rna_junction_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNA_hook_turn'::text) OR ((cvterm.name)::text = 'RNA_junction_loop'::text));


--
-- Name: rna_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_motif AS
 SELECT feature.feature_id AS rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'RNA_internal_loop'::text) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text));


--
-- Name: rna_polymerase_ii_tata_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_polymerase_ii_tata_box AS
 SELECT feature.feature_id AS rna_polymerase_ii_tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text);


--
-- Name: rna_polymerase_iii_tata_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_polymerase_iii_tata_box AS
 SELECT feature.feature_id AS rna_polymerase_iii_tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text);


--
-- Name: rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_polymerase_promoter AS
 SELECT feature.feature_id AS rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'RNApol_I_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text));


--
-- Name: rna_sequence_secondary_structure; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rna_sequence_secondary_structure AS
 SELECT feature.feature_id AS rna_sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'stem_loop'::text) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text));


--
-- Name: rnai_reagent; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnai_reagent AS
 SELECT feature.feature_id AS rnai_reagent_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNAi_reagent'::text);


--
-- Name: rnapol_i_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_i_promoter AS
 SELECT feature.feature_id AS rnapol_i_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_I_promoter'::text);


--
-- Name: rnapol_ii_core_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_ii_core_promoter AS
 SELECT feature.feature_id AS rnapol_ii_core_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_II_core_promoter'::text);


--
-- Name: rnapol_ii_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_ii_promoter AS
 SELECT feature.feature_id AS rnapol_ii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'RNApol_II_core_promoter'::text) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text));


--
-- Name: rnapol_iii_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_iii_promoter AS
 SELECT feature.feature_id AS rnapol_iii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text));


--
-- Name: rnapol_iii_promoter_type_1; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_iii_promoter_type_1 AS
 SELECT feature.feature_id AS rnapol_iii_promoter_type_1_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text);


--
-- Name: rnapol_iii_promoter_type_2; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_iii_promoter_type_2 AS
 SELECT feature.feature_id AS rnapol_iii_promoter_type_2_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text);


--
-- Name: rnapol_iii_promoter_type_3; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnapol_iii_promoter_type_3 AS
 SELECT feature.feature_id AS rnapol_iii_promoter_type_3_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text);


--
-- Name: rnase_mrp_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnase_mrp_rna AS
 SELECT feature.feature_id AS rnase_mrp_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_MRP_RNA'::text);


--
-- Name: rnase_mrp_rna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnase_mrp_rna_gene AS
 SELECT feature.feature_id AS rnase_mrp_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text);


--
-- Name: rnase_p_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnase_p_rna AS
 SELECT feature.feature_id AS rnase_p_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_P_RNA'::text);


--
-- Name: rnase_p_rna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rnase_p_rna_gene AS
 SELECT feature.feature_id AS rnase_p_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RNase_P_RNA_gene'::text);


--
-- Name: robertsonian_fusion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW robertsonian_fusion AS
 SELECT feature.feature_id AS robertsonian_fusion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Robertsonian_fusion'::text);


--
-- Name: rpra_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rpra_rna AS
 SELECT feature.feature_id AS rpra_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RprA_RNA'::text);


--
-- Name: rr_tract; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rr_tract AS
 SELECT feature.feature_id AS rr_tract_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RR_tract'::text);


--
-- Name: rre_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rre_rna AS
 SELECT feature.feature_id AS rre_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RRE_RNA'::text);


--
-- Name: rrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna AS
 SELECT feature.feature_id AS rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'small_subunit_rRNA'::text) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'rRNA'::text));


--
-- Name: rrna_16s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_16s AS
 SELECT feature.feature_id AS rrna_16s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_16S'::text);


--
-- Name: rrna_18s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_18s AS
 SELECT feature.feature_id AS rrna_18s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_18S'::text);


--
-- Name: rrna_21s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_21s AS
 SELECT feature.feature_id AS rrna_21s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_21S'::text);


--
-- Name: rrna_23s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_23s AS
 SELECT feature.feature_id AS rrna_23s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_23S'::text);


--
-- Name: rrna_25s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_25s AS
 SELECT feature.feature_id AS rrna_25s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_25S'::text);


--
-- Name: rrna_28s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_28s AS
 SELECT feature.feature_id AS rrna_28s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_28S'::text);


--
-- Name: rrna_5_8s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_5_8s AS
 SELECT feature.feature_id AS rrna_5_8s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_5_8S'::text);


--
-- Name: rrna_5s; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_5s AS
 SELECT feature.feature_id AS rrna_5s_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_5S'::text);


--
-- Name: rrna_cleavage_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_cleavage_rna AS
 SELECT feature.feature_id AS rrna_cleavage_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text);


--
-- Name: rrna_cleavage_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_cleavage_snorna_primary_transcript AS
 SELECT feature.feature_id AS rrna_cleavage_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text);


--
-- Name: rrna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_encoding AS
 SELECT feature.feature_id AS rrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_encoding'::text);


--
-- Name: rrna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_gene AS
 SELECT feature.feature_id AS rrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_gene'::text);


--
-- Name: rrna_large_subunit_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_large_subunit_primary_transcript AS
 SELECT feature.feature_id AS rrna_large_subunit_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text);


--
-- Name: rrna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_primary_transcript AS
 SELECT feature.feature_id AS rrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text));


--
-- Name: rrna_primary_transcript_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_primary_transcript_region AS
 SELECT feature.feature_id AS rrna_primary_transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text));


--
-- Name: rrna_small_subunit_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rrna_small_subunit_primary_transcript AS
 SELECT feature.feature_id AS rrna_small_subunit_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text);


--
-- Name: rst; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rst AS
 SELECT feature.feature_id AS rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_RST'::text) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'RST'::text));


--
-- Name: rst_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW rst_match AS
 SELECT feature.feature_id AS rst_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'RST_match'::text);


--
-- Name: s_gna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW s_gna AS
 SELECT feature.feature_id AS s_gna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'S_GNA'::text);


--
-- Name: s_gna_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW s_gna_oligo AS
 SELECT feature.feature_id AS s_gna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'S_GNA_oligo'::text);


--
-- Name: sage_tag; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sage_tag AS
 SELECT feature.feature_id AS sage_tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SAGE_tag'::text);


--
-- Name: sarcin_like_rna_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sarcin_like_rna_motif AS
 SELECT feature.feature_id AS sarcin_like_rna_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text);


--
-- Name: satellite_dna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW satellite_dna AS
 SELECT feature.feature_id AS satellite_dna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'microsatellite'::text) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text));


--
-- Name: schellmann_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW schellmann_loop AS
 SELECT feature.feature_id AS schellmann_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'schellmann_loop_seven'::text) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text));


--
-- Name: schellmann_loop_seven; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW schellmann_loop_seven AS
 SELECT feature.feature_id AS schellmann_loop_seven_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'schellmann_loop_seven'::text);


--
-- Name: schellmann_loop_six; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW schellmann_loop_six AS
 SELECT feature.feature_id AS schellmann_loop_six_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'schellmann_loop_six'::text);


--
-- Name: score; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW score AS
 SELECT feature.feature_id AS score_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'score'::text);


--
-- Name: scrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW scrna AS
 SELECT feature.feature_id AS scrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA'::text);


--
-- Name: scrna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW scrna_encoding AS
 SELECT feature.feature_id AS scrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_encoding'::text);


--
-- Name: scrna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW scrna_gene AS
 SELECT feature.feature_id AS scrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_gene'::text);


--
-- Name: scrna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW scrna_primary_transcript AS
 SELECT feature.feature_id AS scrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'scRNA_primary_transcript'::text);


--
-- Name: secis_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW secis_element AS
 SELECT feature.feature_id AS secis_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SECIS_element'::text);


--
-- Name: selenocysteine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW selenocysteine AS
 SELECT feature.feature_id AS selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteine'::text);


--
-- Name: selenocysteine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW selenocysteine_trna_primary_transcript AS
 SELECT feature.feature_id AS selenocysteine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text);


--
-- Name: selenocysteinyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW selenocysteinyl_trna AS
 SELECT feature.feature_id AS selenocysteinyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text);


--
-- Name: sequence_alteration; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_alteration AS
 SELECT feature.feature_id AS sequence_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'deletion'::text) OR ((cvterm.name)::text = 'translocation'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text)) OR ((cvterm.name)::text = 'UPD'::text)) OR ((cvterm.name)::text = 'structural_alteration'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'indel'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'copy_number_gain'::text)) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'complex_structural_alteration'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'sequence_alteration'::text));


--
-- Name: sequence_assembly; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_assembly AS
 SELECT feature.feature_id AS sequence_assembly_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'supercontig'::text) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text));


--
-- Name: sequence_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_attribute AS
 SELECT feature.feature_id AS sequence_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polymer_attribute'::text) OR ((cvterm.name)::text = 'feature_attribute'::text)) OR ((cvterm.name)::text = 'sequence_location'::text)) OR ((cvterm.name)::text = 'variant_quality'::text)) OR ((cvterm.name)::text = 'nucleic_acid'::text)) OR ((cvterm.name)::text = 'synthetic_sequence'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text)) OR ((cvterm.name)::text = 'peptidyl'::text)) OR ((cvterm.name)::text = 'DNA'::text)) OR ((cvterm.name)::text = 'RNA'::text)) OR ((cvterm.name)::text = 'morpholino_backbone'::text)) OR ((cvterm.name)::text = 'PNA'::text)) OR ((cvterm.name)::text = 'LNA'::text)) OR ((cvterm.name)::text = 'TNA'::text)) OR ((cvterm.name)::text = 'GNA'::text)) OR ((cvterm.name)::text = 'cDNA'::text)) OR ((cvterm.name)::text = 'genomic_DNA'::text)) OR ((cvterm.name)::text = 'single_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'double_stranded_cDNA'::text)) OR ((cvterm.name)::text = 'R_GNA'::text)) OR ((cvterm.name)::text = 'S_GNA'::text)) OR ((cvterm.name)::text = 'random_sequence'::text)) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'linear'::text)) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'transcript_attribute'::text)) OR ((cvterm.name)::text = 'bound_by_factor'::text)) OR ((cvterm.name)::text = 'flanked'::text)) OR ((cvterm.name)::text = 'gene_attribute'::text)) OR ((cvterm.name)::text = 'retrotransposed'::text)) OR ((cvterm.name)::text = 'transgenic'::text)) OR ((cvterm.name)::text = 'natural'::text)) OR ((cvterm.name)::text = 'engineered'::text)) OR ((cvterm.name)::text = 'foreign'::text)) OR ((cvterm.name)::text = 'fusion'::text)) OR ((cvterm.name)::text = 'rescue'::text)) OR ((cvterm.name)::text = 'wild_type'::text)) OR ((cvterm.name)::text = 'conserved'::text)) OR ((cvterm.name)::text = 'status'::text)) OR ((cvterm.name)::text = 'intermediate'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged'::text)) OR ((cvterm.name)::text = 'cryptic'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text)) OR ((cvterm.name)::text = 'direction_attribute'::text)) OR ((cvterm.name)::text = 'enzymatic'::text)) OR ((cvterm.name)::text = 'mobile'::text)) OR ((cvterm.name)::text = 'alteration_attribute'::text)) OR ((cvterm.name)::text = 'experimental_feature_attribute'::text)) OR ((cvterm.name)::text = 'edited'::text)) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'bound_by_protein'::text)) OR ((cvterm.name)::text = 'bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'floxed'::text)) OR ((cvterm.name)::text = 'FRT_flanked'::text)) OR ((cvterm.name)::text = 'protein_coding'::text)) OR ((cvterm.name)::text = 'non_protein_coding'::text)) OR ((cvterm.name)::text = 'gene_to_gene_feature'::text)) OR ((cvterm.name)::text = 'gene_array_member'::text)) OR ((cvterm.name)::text = 'regulated'::text)) OR ((cvterm.name)::text = 'epigenetically_modified'::text)) OR ((cvterm.name)::text = 'encodes_alternately_spliced_transcripts'::text)) OR ((cvterm.name)::text = 'encodes_alternate_transcription_start_sites'::text)) OR ((cvterm.name)::text = 'intein_containing'::text)) OR ((cvterm.name)::text = 'miRNA_encoding'::text)) OR ((cvterm.name)::text = 'rRNA_encoding'::text)) OR ((cvterm.name)::text = 'scRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snRNA_encoding'::text)) OR ((cvterm.name)::text = 'SRP_RNA_encoding'::text)) OR ((cvterm.name)::text = 'stRNA_encoding'::text)) OR ((cvterm.name)::text = 'tmRNA_encoding'::text)) OR ((cvterm.name)::text = 'tRNA_encoding'::text)) OR ((cvterm.name)::text = 'gRNA_encoding'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'overlapping'::text)) OR ((cvterm.name)::text = 'inside_intron'::text)) OR ((cvterm.name)::text = 'five_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'five_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text)) OR ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text)) OR ((cvterm.name)::text = 'antisense'::text)) OR ((cvterm.name)::text = 'inside_intron_antiparallel'::text)) OR ((cvterm.name)::text = 'inside_intron_parallel'::text)) OR ((cvterm.name)::text = 'operon_member'::text)) OR ((cvterm.name)::text = 'gene_cassette_member'::text)) OR ((cvterm.name)::text = 'gene_subarray_member'::text)) OR ((cvterm.name)::text = 'member_of_regulon'::text)) OR ((cvterm.name)::text = 'cassette_array_member'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated'::text)) OR ((cvterm.name)::text = 'translationally_regulated'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'transcriptionally_constitutive'::text)) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_stability'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_by_protein_modification'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'imprinted'::text)) OR ((cvterm.name)::text = 'allelically_excluded'::text)) OR ((cvterm.name)::text = 'rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted'::text)) OR ((cvterm.name)::text = 'paternally_imprinted'::text)) OR ((cvterm.name)::text = 'encodes_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_greater_than_1_polypeptide'::text)) OR ((cvterm.name)::text = 'encodes_disjoint_polypeptides'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides'::text)) OR ((cvterm.name)::text = 'encodes_different_polypeptides_different_stop'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_peptides_different_start'::text)) OR ((cvterm.name)::text = 'encodes_overlapping_polypeptides_different_start_and_stop'::text)) OR ((cvterm.name)::text = 'homologous'::text)) OR ((cvterm.name)::text = 'syntenic'::text)) OR ((cvterm.name)::text = 'orthologous'::text)) OR ((cvterm.name)::text = 'paralogous'::text)) OR ((cvterm.name)::text = 'fragmentary'::text)) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'single'::text)) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'forward'::text)) OR ((cvterm.name)::text = 'reverse'::text)) OR ((cvterm.name)::text = 'ribozymic'::text)) OR ((cvterm.name)::text = 'chromosomal_variation_attribute'::text)) OR ((cvterm.name)::text = 'insertion_attribute'::text)) OR ((cvterm.name)::text = 'inversion_attribute'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text)) OR ((cvterm.name)::text = 'duplication_attribute'::text)) OR ((cvterm.name)::text = 'intrachromosomal'::text)) OR ((cvterm.name)::text = 'interchromosomal'::text)) OR ((cvterm.name)::text = 'tandem'::text)) OR ((cvterm.name)::text = 'direct'::text)) OR ((cvterm.name)::text = 'inverted'::text)) OR ((cvterm.name)::text = 'pericentric'::text)) OR ((cvterm.name)::text = 'paracentric'::text)) OR ((cvterm.name)::text = 'reciprocal'::text)) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'free'::text)) OR ((cvterm.name)::text = 'score'::text)) OR ((cvterm.name)::text = 'quality_value'::text)) OR ((cvterm.name)::text = 'organelle_sequence'::text)) OR ((cvterm.name)::text = 'plasmid_location'::text)) OR ((cvterm.name)::text = 'proviral_location'::text)) OR ((cvterm.name)::text = 'macronuclear_sequence'::text)) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text)) OR ((cvterm.name)::text = 'variant_origin'::text)) OR ((cvterm.name)::text = 'variant_frequency'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text)) OR ((cvterm.name)::text = 'maternal_variant'::text)) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'unique_variant'::text)) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'benign_variant'::text)) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'sequence_attribute'::text));


--
-- Name: sequence_collection; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_collection AS
 SELECT feature.feature_id AS sequence_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'kinetoplast'::text) OR ((cvterm.name)::text = 'genome'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'peptide_collection'::text)) OR ((cvterm.name)::text = 'variant_collection'::text)) OR ((cvterm.name)::text = 'kinetoplast'::text)) OR ((cvterm.name)::text = 'reference_genome'::text)) OR ((cvterm.name)::text = 'variant_genome'::text)) OR ((cvterm.name)::text = 'chromosomally_aberrant_genome'::text)) OR ((cvterm.name)::text = 'chromosome_variation'::text)) OR ((cvterm.name)::text = 'allele'::text)) OR ((cvterm.name)::text = 'haplotype'::text)) OR ((cvterm.name)::text = 'genotype'::text)) OR ((cvterm.name)::text = 'diplotype'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text)) OR ((cvterm.name)::text = 'sequence_collection'::text));


--
-- Name: sequence_conflict; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_conflict AS
 SELECT feature.feature_id AS sequence_conflict_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'contig_collection'::text) OR ((cvterm.name)::text = 'sequence_conflict'::text));


--
-- Name: sequence_difference; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_difference AS
 SELECT feature.feature_id AS sequence_difference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'possible_base_call_error'::text) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text));


--
-- Name: sequence_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_feature AS
 SELECT feature.feature_id AS sequence_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
cvterm.name)::text = 'region'::text) OR ((cvterm.name)::text = 'junction'::text)) OR ((cvterm.name)::text = 'sequence_alteration'::text)) OR ((cvterm.name)::text = 'biomaterial_region'::text)) OR ((cvterm.name)::text = 'experimental_feature'::text)) OR ((cvterm.name)::text = 'biological_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text)) OR ((cvterm.name)::text = 'reagent'::text)) OR ((cvterm.name)::text = 'engineered_region'::text)) OR ((cvterm.name)::text = 'PCR_product'::text)) OR ((cvterm.name)::text = 'clone'::text)) OR ((cvterm.name)::text = 'rescue_region'::text)) OR ((cvterm.name)::text = 'oligo'::text)) OR ((cvterm.name)::text = 'clone_insert'::text)) OR ((cvterm.name)::text = 'cloned_region'::text)) OR ((cvterm.name)::text = 'databank_entry'::text)) OR ((cvterm.name)::text = 'RAPD'::text)) OR ((cvterm.name)::text = 'genomic_clone'::text)) OR ((cvterm.name)::text = 'cDNA_clone'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'validated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'invalidated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'three_prime_RACE_clone'::text)) OR ((cvterm.name)::text = 'chimeric_cDNA_clone'::text)) OR ((cvterm.name)::text = 'genomically_contaminated_cDNA_clone'::text)) OR ((cvterm.name)::text = 'polyA_primed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'partially_processed_cDNA_clone'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'aptamer'::text)) OR ((cvterm.name)::text = 'probe'::text)) OR ((cvterm.name)::text = 'tag'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text)) OR ((cvterm.name)::text = 'ds_oligo'::text)) OR ((cvterm.name)::text = 'DNAzyme'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text)) OR ((cvterm.name)::text = 'DNA_aptamer'::text)) OR ((cvterm.name)::text = 'RNA_aptamer'::text)) OR ((cvterm.name)::text = 'microarray_oligo'::text)) OR ((cvterm.name)::text = 'SAGE_tag'::text)) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'primer'::text)) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'RNAi_reagent'::text)) OR ((cvterm.name)::text = 'DNA_constraint_sequence'::text)) OR ((cvterm.name)::text = 'morpholino_oligo'::text)) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'cloned_cDNA_insert'::text)) OR ((cvterm.name)::text = 'cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'BAC_cloned_genomic_insert'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_rescue_region'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_region'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'engineered_insert'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'match_part'::text)) OR ((cvterm.name)::text = 'assembly_component'::text)) OR ((cvterm.name)::text = 'conserved_region'::text)) OR ((cvterm.name)::text = 'match'::text)) OR ((cvterm.name)::text = 'remark'::text)) OR ((cvterm.name)::text = 'reading_frame'::text)) OR ((cvterm.name)::text = 'consensus_region'::text)) OR ((cvterm.name)::text = 'low_complexity_region'::text)) OR ((cvterm.name)::text = 'assembly'::text)) OR ((cvterm.name)::text = 'transcribed_fragment'::text)) OR ((cvterm.name)::text = 'transcribed_cluster'::text)) OR ((cvterm.name)::text = 'high_identity_region'::text)) OR ((cvterm.name)::text = 'mathematically_defined_repeat'::text)) OR ((cvterm.name)::text = 'experimentally_defined_binding_region'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'read'::text)) OR ((cvterm.name)::text = 'restriction_fragment'::text)) OR ((cvterm.name)::text = 'golden_path_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_fragment'::text)) OR ((cvterm.name)::text = 'gap'::text)) OR ((cvterm.name)::text = 'sonicate_fragment'::text)) OR ((cvterm.name)::text = 'paired_end_fragment'::text)) OR ((cvterm.name)::text = 'read_pair'::text)) OR ((cvterm.name)::text = 'contig_read'::text)) OR ((cvterm.name)::text = 'BAC_end'::text)) OR ((cvterm.name)::text = 'dye_terminator_read'::text)) OR ((cvterm.name)::text = 'pyrosequenced_read'::text)) OR ((cvterm.name)::text = 'ligation_based_read'::text)) OR ((cvterm.name)::text = 'polymerase_synthesis_read'::text)) OR ((cvterm.name)::text = 'PAC_end'::text)) OR ((cvterm.name)::text = 'YAC_end'::text)) OR ((cvterm.name)::text = 'clone_end'::text)) OR ((cvterm.name)::text = 'RFLP_fragment'::text)) OR ((cvterm.name)::text = 'tiling_path_clone'::text)) OR ((cvterm.name)::text = 'coding_conserved_region'::text)) OR ((cvterm.name)::text = 'nc_conserved_region'::text)) OR ((cvterm.name)::text = 'RR_tract'::text)) OR ((cvterm.name)::text = 'homologous_region'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_I'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_II'::text)) OR ((cvterm.name)::text = 'centromere_DNA_Element_III'::text)) OR ((cvterm.name)::text = 'X_element'::text)) OR ((cvterm.name)::text = 'U_box'::text)) OR ((cvterm.name)::text = 'regional_centromere_central_core'::text)) OR ((cvterm.name)::text = 'syntenic_region'::text)) OR ((cvterm.name)::text = 'paralogous_region'::text)) OR ((cvterm.name)::text = 'orthologous_region'::text)) OR ((cvterm.name)::text = 'nucleotide_match'::text)) OR ((cvterm.name)::text = 'protein_match'::text)) OR ((cvterm.name)::text = 'expressed_sequence_match'::text)) OR ((cvterm.name)::text = 'cross_genome_match'::text)) OR ((cvterm.name)::text = 'translated_nucleotide_match'::text)) OR ((cvterm.name)::text = 'primer_match'::text)) OR ((cvterm.name)::text = 'EST_match'::text)) OR ((cvterm.name)::text = 'cDNA_match'::text)) OR ((cvterm.name)::text = 'UST_match'::text)) OR ((cvterm.name)::text = 'RST_match'::text)) OR ((cvterm.name)::text = 'sequence_difference'::text)) OR ((cvterm.name)::text = 'experimental_result_region'::text)) OR ((cvterm.name)::text = 'polypeptide_sequencing_information'::text)) OR ((cvterm.name)::text = 'possible_base_call_error'::text)) OR ((cvterm.name)::text = 'possible_assembly_error'::text)) OR ((cvterm.name)::text = 'assembly_error_correction'::text)) OR ((cvterm.name)::text = 'base_call_error_correction'::text)) OR ((cvterm.name)::text = 'overlapping_feature_set'::text)) OR ((cvterm.name)::text = 'no_output'::text)) OR ((cvterm.name)::text = 'overlapping_EST_set'::text)) OR ((cvterm.name)::text = 'non_adjacent_residues'::text)) OR ((cvterm.name)::text = 'non_terminal_residue'::text)) OR ((cvterm.name)::text = 'sequence_conflict'::text)) OR ((cvterm.name)::text = 'sequence_uncertainty'::text)) OR ((cvterm.name)::text = 'contig_collection'::text)) OR ((cvterm.name)::text = 'ORF'::text)) OR ((cvterm.name)::text = 'blocked_reading_frame'::text)) OR ((cvterm.name)::text = 'mini_gene'::text)) OR ((cvterm.name)::text = 'rescue_mini_gene'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'sequence_assembly'::text)) OR ((cvterm.name)::text = 'fragment_assembly'::text)) OR ((cvterm.name)::text = 'supercontig'::text)) OR ((cvterm.name)::text = 'contig'::text)) OR ((cvterm.name)::text = 'tiling_path'::text)) OR ((cvterm.name)::text = 'virtual_sequence'::text)) OR ((cvterm.name)::text = 'golden_path'::text)) OR ((cvterm.name)::text = 'ultracontig'::text)) OR ((cvterm.name)::text = 'expressed_sequence_assembly'::text)) OR ((cvterm.name)::text = 'fingerprint_map'::text)) OR ((cvterm.name)::text = 'STS_map'::text)) OR ((cvterm.name)::text = 'RH_map'::text)) OR ((cvterm.name)::text = 'unigene_cluster'::text)) OR ((cvterm.name)::text = 'CHiP_seq_region'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'linkage_group'::text)) OR ((cvterm.name)::text = 'polypeptide'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'origin_of_replication'::text)) OR ((cvterm.name)::text = 'recombination_feature'::text)) OR ((cvterm.name)::text = 'CpG_island'::text)) OR ((cvterm.name)::text = 'pseudogene'::text)) OR ((cvterm.name)::text = 'binding_site'::text)) OR ((cvterm.name)::text = 'pseudogenic_region'::text)) OR ((cvterm.name)::text = 'cap'::text)) OR ((cvterm.name)::text = 'intergenic_region'::text)) OR ((cvterm.name)::text = 'oligo_U_tail'::text)) OR ((cvterm.name)::text = 'polyA_sequence'::text)) OR ((cvterm.name)::text = 'repeat_region'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'gene'::text)) OR ((cvterm.name)::text = 'repeat_unit'::text)) OR ((cvterm.name)::text = 'QTL'::text)) OR ((cvterm.name)::text = 'chromosome_part'::text)) OR ((cvterm.name)::text = 'gene_member_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text)) OR ((cvterm.name)::text = 'polypeptide_region'::text)) OR ((cvterm.name)::text = 'gene_component_region'::text)) OR ((cvterm.name)::text = 'mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'replicon'::text)) OR ((cvterm.name)::text = 'base'::text)) OR ((cvterm.name)::text = 'amino_acid'::text)) OR ((cvterm.name)::text = 'genetic_marker'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_recognition_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_single_strand_overhang'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_region'::text)) OR ((cvterm.name)::text = 'open_chromatin_region'::text)) OR ((cvterm.name)::text = 'gene_group'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'retron'::text)) OR ((cvterm.name)::text = 'G_quartet'::text)) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'D_loop'::text)) OR ((cvterm.name)::text = 'ARS'::text)) OR ((cvterm.name)::text = 'oriT'::text)) OR ((cvterm.name)::text = 'amplification_origin'::text)) OR ((cvterm.name)::text = 'oriV'::text)) OR ((cvterm.name)::text = 'oriC'::text)) OR ((cvterm.name)::text = 'recombination_hotspot'::text)) OR ((cvterm.name)::text = 'haplotype_block'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text)) OR ((cvterm.name)::text = 'iDNA'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text)) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'processed_pseudogene'::text)) OR ((cvterm.name)::text = 'non_processed_pseudogene'::text)) OR ((cvterm.name)::text = 'pseudogene_by_unequal_crossing_over'::text)) OR ((cvterm.name)::text = 'nuclear_mt_pseudogene'::text)) OR ((cvterm.name)::text = 'cassette_pseudogene'::text)) OR ((cvterm.name)::text = 'duplicated_pseudogene'::text)) OR ((cvterm.name)::text = 'unitary_pseudogene'::text)) OR ((cvterm.name)::text = 'protein_binding_site'::text)) OR ((cvterm.name)::text = 'epitope'::text)) OR ((cvterm.name)::text = 'nucleotide_binding_site'::text)) OR ((cvterm.name)::text = 'metal_binding_site'::text)) OR ((cvterm.name)::text = 'ligand_binding_site'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'nucleotide_to_protein_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_binding_site'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'histone_binding_site'::text)) OR ((cvterm.name)::text = 'insulator_binding_site'::text)) OR ((cvterm.name)::text = 'enhancer_binding_site'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_sensitive_site'::text)) OR ((cvterm.name)::text = 'homing_endonuclease_binding_site'::text)) OR ((cvterm.name)::text = 'nuclease_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'group_1_intron_homing_endonuclease_target_region'::text)) OR ((cvterm.name)::text = 'DNAseI_hypersensitive_site'::text)) OR ((cvterm.name)::text = 'miRNA_target_site'::text)) OR ((cvterm.name)::text = 'DNA_binding_site'::text)) OR ((cvterm.name)::text = 'primer_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'decayed_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_exon'::text)) OR ((cvterm.name)::text = 'pseudogenic_transcript'::text)) OR ((cvterm.name)::text = 'pseudogenic_rRNA'::text)) OR ((cvterm.name)::text = 'pseudogenic_tRNA'::text)) OR ((cvterm.name)::text = 'long_terminal_repeat'::text)) OR ((cvterm.name)::text = 'engineered_foreign_repetitive_element'::text)) OR ((cvterm.name)::text = 'inverted_repeat'::text)) OR ((cvterm.name)::text = 'direct_repeat'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'dispersed_repeat'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text)) OR ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text)) OR ((cvterm.name)::text = 'Y_prime_element'::text)) OR ((cvterm.name)::text = 'telomeric_repeat'::text)) OR ((cvterm.name)::text = 'nested_repeat'::text)) OR ((cvterm.name)::text = 'centromeric_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_LTR'::text)) OR ((cvterm.name)::text = 'three_prime_LTR'::text)) OR ((cvterm.name)::text = 'solo_LTR'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'target_site_duplication'::text)) OR ((cvterm.name)::text = 'CRISPR'::text)) OR ((cvterm.name)::text = 'satellite_DNA'::text)) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'nested_tandem_repeat'::text)) OR ((cvterm.name)::text = 'regional_centromere_inner_repeat_region'::text)) OR ((cvterm.name)::text = 'regional_centromere_outer_repeat_region'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'nuclear_gene'::text)) OR ((cvterm.name)::text = 'mt_gene'::text)) OR ((cvterm.name)::text = 'plastid_gene'::text)) OR ((cvterm.name)::text = 'nucleomorph_gene'::text)) OR ((cvterm.name)::text = 'plasmid_gene'::text)) OR ((cvterm.name)::text = 'proviral_gene'::text)) OR ((cvterm.name)::text = 'transposable_element_gene'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text)) OR ((cvterm.name)::text = 'engineered_gene'::text)) OR ((cvterm.name)::text = 'foreign_gene'::text)) OR ((cvterm.name)::text = 'fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_gene'::text)) OR ((cvterm.name)::text = 'gene_with_trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'rescue_gene'::text)) OR ((cvterm.name)::text = 'post_translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'positively_autoregulated_gene'::text)) OR ((cvterm.name)::text = 'translationally_regulated_gene'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'transgene'::text)) OR ((cvterm.name)::text = 'predicted_gene'::text)) OR ((cvterm.name)::text = 'protein_coding_gene'::text)) OR ((cvterm.name)::text = 'retrogene'::text)) OR ((cvterm.name)::text = 'ncRNA_gene'::text)) OR ((cvterm.name)::text = 'cryptic_gene'::text)) OR ((cvterm.name)::text = 'gene_with_non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'gene_cassette'::text)) OR ((cvterm.name)::text = 'kinetoplast_gene'::text)) OR ((cvterm.name)::text = 'maxicircle_gene'::text)) OR ((cvterm.name)::text = 'minicircle_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'apicoplast_gene'::text)) OR ((cvterm.name)::text = 'ct_gene'::text)) OR ((cvterm.name)::text = 'chromoplast_gene'::text)) OR ((cvterm.name)::text = 'cyanelle_gene'::text)) OR ((cvterm.name)::text = 'leucoplast_gene'::text)) OR ((cvterm.name)::text = 'proplastid_gene'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_gene'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text)) OR ((cvterm.name)::text = 'engineered_fusion_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_inverted_gene'::text)) OR ((cvterm.name)::text = 'recombinationally_rearranged_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'wild_type_rescue_gene'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'floxed_gene'::text)) OR ((cvterm.name)::text = 'gene_with_polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_edited_transcript'::text)) OR ((cvterm.name)::text = 'gene_with_recoded_mRNA'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'gene_with_mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'gene_with_transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'gene_with_stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'gRNA_gene'::text)) OR ((cvterm.name)::text = 'miRNA_gene'::text)) OR ((cvterm.name)::text = 'scRNA_gene'::text)) OR ((cvterm.name)::text = 'snoRNA_gene'::text)) OR ((cvterm.name)::text = 'snRNA_gene'::text)) OR ((cvterm.name)::text = 'SRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'stRNA_gene'::text)) OR ((cvterm.name)::text = 'tmRNA_gene'::text)) OR ((cvterm.name)::text = 'tRNA_gene'::text)) OR ((cvterm.name)::text = 'rRNA_gene'::text)) OR ((cvterm.name)::text = 'piRNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA_gene'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA_gene'::text)) OR ((cvterm.name)::text = 'lincRNA_gene'::text)) OR ((cvterm.name)::text = 'telomerase_RNA_gene'::text)) OR ((cvterm.name)::text = 'cryptogene'::text)) OR ((cvterm.name)::text = 'gene_with_start_codon_CUG'::text)) OR ((cvterm.name)::text = 'chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosome_band'::text)) OR ((cvterm.name)::text = 'interband'::text)) OR ((cvterm.name)::text = 'chromosomal_regulatory_element'::text)) OR ((cvterm.name)::text = 'chromosomal_structural_element'::text)) OR ((cvterm.name)::text = 'introgressed_chromosome_region'::text)) OR ((cvterm.name)::text = 'matrix_attachment_site'::text)) OR ((cvterm.name)::text = 'centromere'::text)) OR ((cvterm.name)::text = 'telomere'::text)) OR ((cvterm.name)::text = 'point_centromere'::text)) OR ((cvterm.name)::text = 'regional_centromere'::text)) OR ((cvterm.name)::text = 'transcript'::text)) OR ((cvterm.name)::text = 'regulatory_region'::text)) OR ((cvterm.name)::text = 'polycistronic_transcript'::text)) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text)) OR ((cvterm.name)::text = 'translation_regulatory_region'::text)) OR ((cvterm.name)::text = 'recombination_regulatory_region'::text)) OR ((cvterm.name)::text = 'replication_regulatory_region'::text)) OR ((cvterm.name)::text = 'terminator'::text)) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'attenuator'::text)) OR ((cvterm.name)::text = 'exon'::text)) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'mature_protein_region'::text)) OR ((cvterm.name)::text = 'immature_peptide_region'::text)) OR ((cvterm.name)::text = 'compositionally_biased_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_region'::text)) OR ((cvterm.name)::text = 'polypeptide_variation_site'::text)) OR ((cvterm.name)::text = 'peptide_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_peptide_region'::text)) OR ((cvterm.name)::text = 'hydrophobic_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_region'::text)) OR ((cvterm.name)::text = 'active_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'membrane_structure'::text)) OR ((cvterm.name)::text = 'extramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'intramembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'polypeptide_secondary_structure'::text)) OR ((cvterm.name)::text = 'polypeptide_structural_motif'::text)) OR ((cvterm.name)::text = 'intrinsically_unstructured_polypeptide_region'::text)) OR ((cvterm.name)::text = 'cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'non_cytoplasmic_polypeptide_region'::text)) OR ((cvterm.name)::text = 'membrane_peptide_loop'::text)) OR ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text)) OR ((cvterm.name)::text = 'asx_motif'::text)) OR ((cvterm.name)::text = 'beta_bulge'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop'::text)) OR ((cvterm.name)::text = 'beta_strand'::text)) OR ((cvterm.name)::text = 'peptide_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop'::text)) OR ((cvterm.name)::text = 'serine_threonine_motif'::text)) OR ((cvterm.name)::text = 'serine_threonine_staple_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_turn_motif'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_left_handed_four'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_three'::text)) OR ((cvterm.name)::text = 'catmat_right_handed_four'::text)) OR ((cvterm.name)::text = 'alpha_beta_motif'::text)) OR ((cvterm.name)::text = 'peptide_coil'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_five'::text)) OR ((cvterm.name)::text = 'beta_bulge_loop_six'::text)) OR ((cvterm.name)::text = 'antiparallel_beta_strand'::text)) OR ((cvterm.name)::text = 'parallel_beta_strand'::text)) OR ((cvterm.name)::text = 'left_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'right_handed_peptide_helix'::text)) OR ((cvterm.name)::text = 'alpha_helix'::text)) OR ((cvterm.name)::text = 'pi_helix'::text)) OR ((cvterm.name)::text = 'three_ten_helix'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_left_right_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_nest_right_left_motif'::text)) OR ((cvterm.name)::text = 'schellmann_loop_seven'::text)) OR ((cvterm.name)::text = 'schellmann_loop_six'::text)) OR ((cvterm.name)::text = 'asx_turn'::text)) OR ((cvterm.name)::text = 'beta_turn'::text)) OR ((cvterm.name)::text = 'gamma_turn'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'asx_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'asx_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'beta_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six'::text)) OR ((cvterm.name)::text = 'beta_turn_type_eight'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_b'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_one'::text)) OR ((cvterm.name)::text = 'beta_turn_type_six_a_two'::text)) OR ((cvterm.name)::text = 'gamma_turn_classic'::text)) OR ((cvterm.name)::text = 'gamma_turn_inverse'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'coiled_coil'::text)) OR ((cvterm.name)::text = 'helix_turn_helix'::text)) OR ((cvterm.name)::text = 'natural_variant_site'::text)) OR ((cvterm.name)::text = 'mutated_variant_site'::text)) OR ((cvterm.name)::text = 'alternate_sequence_site'::text)) OR ((cvterm.name)::text = 'signal_peptide'::text)) OR ((cvterm.name)::text = 'transit_peptide'::text)) OR ((cvterm.name)::text = 'nuclear_localization_signal'::text)) OR ((cvterm.name)::text = 'endosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'lysosomal_localization_signal'::text)) OR ((cvterm.name)::text = 'nuclear_export_signal'::text)) OR ((cvterm.name)::text = 'nuclear_rim_localization_signal'::text)) OR ((cvterm.name)::text = 'cleaved_initiator_methionine'::text)) OR ((cvterm.name)::text = 'intein'::text)) OR ((cvterm.name)::text = 'propeptide_cleavage_site'::text)) OR ((cvterm.name)::text = 'propeptide'::text)) OR ((cvterm.name)::text = 'cleaved_for_gpi_anchor_region'::text)) OR ((cvterm.name)::text = 'lipoprotein_signal_peptide'::text)) OR ((cvterm.name)::text = 'n_terminal_region'::text)) OR ((cvterm.name)::text = 'c_terminal_region'::text)) OR ((cvterm.name)::text = 'central_hydrophobic_region_of_signal_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_domain'::text)) OR ((cvterm.name)::text = 'polypeptide_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_repeat'::text)) OR ((cvterm.name)::text = 'biochemical_region_of_peptide'::text)) OR ((cvterm.name)::text = 'polypeptide_conserved_motif'::text)) OR ((cvterm.name)::text = 'post_translationally_modified_region'::text)) OR ((cvterm.name)::text = 'conformational_switch'::text)) OR ((cvterm.name)::text = 'molecular_contact_region'::text)) OR ((cvterm.name)::text = 'polypeptide_binding_motif'::text)) OR ((cvterm.name)::text = 'polypeptide_catalytic_motif'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'polypeptide_metal_contact'::text)) OR ((cvterm.name)::text = 'protein_protein_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_ligand_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_DNA_contact'::text)) OR ((cvterm.name)::text = 'polypeptide_calcium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_cobalt_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_copper_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_iron_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_magnesium_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_manganese_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_molybdenum_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_nickel_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_tungsten_ion_contact_site'::text)) OR ((cvterm.name)::text = 'polypeptide_zinc_ion_contact_site'::text)) OR ((cvterm.name)::text = 'non_transcribed_region'::text)) OR ((cvterm.name)::text = 'gene_fragment'::text)) OR ((cvterm.name)::text = 'TSS_region'::text)) OR ((cvterm.name)::text = 'gene_segment'::text)) OR ((cvterm.name)::text = 'pseudogenic_gene_segment'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'extrachromosomal_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'integrated_mobile_genetic_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'transposable_element'::text)) OR ((cvterm.name)::text = 'proviral_region'::text)) OR ((cvterm.name)::text = 'integron'::text)) OR ((cvterm.name)::text = 'genomic_island'::text)) OR ((cvterm.name)::text = 'integrated_plasmid'::text)) OR ((cvterm.name)::text = 'cointegrated_plasmid'::text)) OR ((cvterm.name)::text = 'retrotransposon'::text)) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'prophage'::text)) OR ((cvterm.name)::text = 'pathogenic_island'::text)) OR ((cvterm.name)::text = 'metabolic_island'::text)) OR ((cvterm.name)::text = 'adaptive_island'::text)) OR ((cvterm.name)::text = 'symbiosis_island'::text)) OR ((cvterm.name)::text = 'cryptic_prophage'::text)) OR ((cvterm.name)::text = 'defective_conjugative_transposon'::text)) OR ((cvterm.name)::text = 'plasmid'::text)) OR ((cvterm.name)::text = 'chromosome'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text)) OR ((cvterm.name)::text = 'maxicircle'::text)) OR ((cvterm.name)::text = 'minicircle'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text)) OR ((cvterm.name)::text = 'engineered_plasmid'::text)) OR ((cvterm.name)::text = 'episome'::text)) OR ((cvterm.name)::text = 'natural_plasmid'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'gene_trap_construct'::text)) OR ((cvterm.name)::text = 'promoter_trap_construct'::text)) OR ((cvterm.name)::text = 'enhancer_trap_construct'::text)) OR ((cvterm.name)::text = 'engineered_episome'::text)) OR ((cvterm.name)::text = 'mitochondrial_chromosome'::text)) OR ((cvterm.name)::text = 'chloroplast_chromosome'::text)) OR ((cvterm.name)::text = 'chromoplast_chromosome'::text)) OR ((cvterm.name)::text = 'cyanelle_chromosome'::text)) OR ((cvterm.name)::text = 'leucoplast_chromosome'::text)) OR ((cvterm.name)::text = 'macronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'micronuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nuclear_chromosome'::text)) OR ((cvterm.name)::text = 'nucleomorphic_chromosome'::text)) OR ((cvterm.name)::text = 'DNA_chromosome'::text)) OR ((cvterm.name)::text = 'RNA_chromosome'::text)) OR ((cvterm.name)::text = 'apicoplast_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'linear_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'circular_double_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'YAC'::text)) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'phage_sequence'::text)) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'modified_RNA_base_feature'::text)) OR ((cvterm.name)::text = 'inosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanine'::text)) OR ((cvterm.name)::text = 'ribothymidine'::text)) OR ((cvterm.name)::text = 'modified_adenosine'::text)) OR ((cvterm.name)::text = 'modified_cytidine'::text)) OR ((cvterm.name)::text = 'modified_guanosine'::text)) OR ((cvterm.name)::text = 'modified_uridine'::text)) OR ((cvterm.name)::text = 'modified_inosine'::text)) OR ((cvterm.name)::text = 'methylinosine'::text)) OR ((cvterm.name)::text = 'one_methylinosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylinosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylinosine'::text)) OR ((cvterm.name)::text = 'one_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text)) OR ((cvterm.name)::text = 'N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text)) OR ((cvterm.name)::text = 'N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text)) OR ((cvterm.name)::text = 'N6_glycinylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_methyl_N6_threonylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'N6_hydroxynorvalylcarbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text)) OR ((cvterm.name)::text = 'N6_N6_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_2_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_N6_2_prime_O_trimethyladenosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethyladenosine'::text)) OR ((cvterm.name)::text = 'N6_acetyladenosine'::text)) OR ((cvterm.name)::text = 'three_methylcytidine'::text)) OR ((cvterm.name)::text = 'five_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'two_thiocytidine'::text)) OR ((cvterm.name)::text = 'N4_acetylcytidine'::text)) OR ((cvterm.name)::text = 'five_formylcytidine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'N4_acetyl_2_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'lysidine'::text)) OR ((cvterm.name)::text = 'N4_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_2_prime_O_dimethylcytidine'::text)) OR ((cvterm.name)::text = 'five_hydroxymethylcytidine'::text)) OR ((cvterm.name)::text = 'five_formyl_two_prime_O_methylcytidine'::text)) OR ((cvterm.name)::text = 'N4_N4_2_prime_O_trimethylcytidine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'one_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_methylguanosine'::text)) OR ((cvterm.name)::text = 'seven_methylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_2_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_2_prime_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text)) OR ((cvterm.name)::text = 'wybutosine'::text)) OR ((cvterm.name)::text = 'peroxywybutosine'::text)) OR ((cvterm.name)::text = 'hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text)) OR ((cvterm.name)::text = 'wyosine'::text)) OR ((cvterm.name)::text = 'methylwyosine'::text)) OR ((cvterm.name)::text = 'N2_7_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'N2_N2_7_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'one_two_prime_O_dimethylguanosine'::text)) OR ((cvterm.name)::text = 'four_demethylwyosine'::text)) OR ((cvterm.name)::text = 'isowyosine'::text)) OR ((cvterm.name)::text = 'N2_7_2prirme_O_trimethylguanosine'::text)) OR ((cvterm.name)::text = 'queuosine'::text)) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'dihydrouridine'::text)) OR ((cvterm.name)::text = 'pseudouridine'::text)) OR ((cvterm.name)::text = 'five_methyluridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'one_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'two_thiouridine'::text)) OR ((cvterm.name)::text = 'four_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methyl_2_thiouridine'::text)) OR ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text)) OR ((cvterm.name)::text = 'five_hydroxyuridine'::text)) OR ((cvterm.name)::text = 'five_methoxyuridine'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text)) OR ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_carboxyhydroxymethyl_uridine_methyl_ester'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_methoxycarbonylmethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_aminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_methylaminomethyl_two_selenouridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyluridine'::text)) OR ((cvterm.name)::text = 'five_carbamoylmethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'three_methyluridine'::text)) OR ((cvterm.name)::text = 'one_methyl_three_three_amino_three_carboxypropyl_pseudouridine'::text)) OR ((cvterm.name)::text = 'five_carboxymethyluridine'::text)) OR ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text)) OR ((cvterm.name)::text = 'five_methyldihydrouridine'::text)) OR ((cvterm.name)::text = 'three_methylpseudouridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyluridine'::text)) OR ((cvterm.name)::text = 'five_taurinomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_uridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_thiouridine'::text)) OR ((cvterm.name)::text = 'five_isopentenylaminomethyl_two_prime_O_methyluridine'::text)) OR ((cvterm.name)::text = 'catalytic_residue'::text)) OR ((cvterm.name)::text = 'modified_amino_acid_feature'::text)) OR ((cvterm.name)::text = 'alanine'::text)) OR ((cvterm.name)::text = 'valine'::text)) OR ((cvterm.name)::text = 'leucine'::text)) OR ((cvterm.name)::text = 'isoleucine'::text)) OR ((cvterm.name)::text = 'proline'::text)) OR ((cvterm.name)::text = 'tryptophan'::text)) OR ((cvterm.name)::text = 'phenylalanine'::text)) OR ((cvterm.name)::text = 'methionine'::text)) OR ((cvterm.name)::text = 'glycine'::text)) OR ((cvterm.name)::text = 'serine'::text)) OR ((cvterm.name)::text = 'threonine'::text)) OR ((cvterm.name)::text = 'tyrosine'::text)) OR ((cvterm.name)::text = 'cysteine'::text)) OR ((cvterm.name)::text = 'glutamine'::text)) OR ((cvterm.name)::text = 'asparagine'::text)) OR ((cvterm.name)::text = 'lysine'::text)) OR ((cvterm.name)::text = 'arginine'::text)) OR ((cvterm.name)::text = 'histidine'::text)) OR ((cvterm.name)::text = 'aspartic_acid'::text)) OR ((cvterm.name)::text = 'glutamic_acid'::text)) OR ((cvterm.name)::text = 'selenocysteine'::text)) OR ((cvterm.name)::text = 'pyrrolysine'::text)) OR ((cvterm.name)::text = 'modified_glycine'::text)) OR ((cvterm.name)::text = 'modified_L_alanine'::text)) OR ((cvterm.name)::text = 'modified_L_asparagine'::text)) OR ((cvterm.name)::text = 'modified_L_aspartic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_cysteine'::text)) OR ((cvterm.name)::text = 'modified_L_glutamic_acid'::text)) OR ((cvterm.name)::text = 'modified_L_threonine'::text)) OR ((cvterm.name)::text = 'modified_L_tryptophan'::text)) OR ((cvterm.name)::text = 'modified_L_glutamine'::text)) OR ((cvterm.name)::text = 'modified_L_methionine'::text)) OR ((cvterm.name)::text = 'modified_L_isoleucine'::text)) OR ((cvterm.name)::text = 'modified_L_phenylalanine'::text)) OR ((cvterm.name)::text = 'modified_L_histidine'::text)) OR ((cvterm.name)::text = 'modified_L_serine'::text)) OR ((cvterm.name)::text = 'modified_L_lysine'::text)) OR ((cvterm.name)::text = 'modified_L_leucine'::text)) OR ((cvterm.name)::text = 'modified_L_selenocysteine'::text)) OR ((cvterm.name)::text = 'modified_L_valine'::text)) OR ((cvterm.name)::text = 'modified_L_proline'::text)) OR ((cvterm.name)::text = 'modified_L_tyrosine'::text)) OR ((cvterm.name)::text = 'modified_L_arginine'::text)) OR ((cvterm.name)::text = 'heritable_phenotypic_marker'::text)) OR ((cvterm.name)::text = 'DArT_marker'::text)) OR ((cvterm.name)::text = 'nucleotide_motif'::text)) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'modified_base'::text)) OR ((cvterm.name)::text = 'epigenetically_modified_gene'::text)) OR ((cvterm.name)::text = 'histone_modification'::text)) OR ((cvterm.name)::text = 'methylated_base_feature'::text)) OR ((cvterm.name)::text = 'methylated_C'::text)) OR ((cvterm.name)::text = 'methylated_A'::text)) OR ((cvterm.name)::text = 'gene_rearranged_at_DNA_level'::text)) OR ((cvterm.name)::text = 'maternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'paternally_imprinted_gene'::text)) OR ((cvterm.name)::text = 'allelically_excluded_gene'::text)) OR ((cvterm.name)::text = 'histone_methylation_site'::text)) OR ((cvterm.name)::text = 'histone_acetylation_site'::text)) OR ((cvterm.name)::text = 'histone_ubiqitination_site'::text)) OR ((cvterm.name)::text = 'histone_acylation_region'::text)) OR ((cvterm.name)::text = 'H4K20_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H2BK5_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_methylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K27_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K36_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K4_trimethylation'::text)) OR ((cvterm.name)::text = 'H3K4_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K79_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_trimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_monomethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_dimethylation_site'::text)) OR ((cvterm.name)::text = 'H3K9_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K14_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K18_acetylation_site'::text)) OR ((cvterm.name)::text = 'H3K23_acylation site'::text)) OR ((cvterm.name)::text = 'H3K27_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K16_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K5_acylation_site'::text)) OR ((cvterm.name)::text = 'H4K8_acylation site'::text)) OR ((cvterm.name)::text = 'H2B_ubiquitination_site'::text)) OR ((cvterm.name)::text = 'H4K_acylation_region'::text)) OR ((cvterm.name)::text = 'operon'::text)) OR ((cvterm.name)::text = 'mating_type_region'::text)) OR ((cvterm.name)::text = 'gene_array'::text)) OR ((cvterm.name)::text = 'gene_subarray'::text)) OR ((cvterm.name)::text = 'gene_cassette_array'::text)) OR ((cvterm.name)::text = 'regulon'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'flanking_region'::text)) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'clone_insert_end'::text)) OR ((cvterm.name)::text = 'clone_insert_start'::text)) OR ((cvterm.name)::text = 'exon_junction'::text)) OR ((cvterm.name)::text = 'insertion_site'::text)) OR ((cvterm.name)::text = 'polyA_site'::text)) OR ((cvterm.name)::text = 'deletion_junction'::text)) OR ((cvterm.name)::text = 'chromosome_breakpoint'::text)) OR ((cvterm.name)::text = 'splice_junction'::text)) OR ((cvterm.name)::text = 'trans_splice_junction'::text)) OR ((cvterm.name)::text = 'restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'transposable_element_insertion_site'::text)) OR ((cvterm.name)::text = 'inversion_breakpoint'::text)) OR ((cvterm.name)::text = 'translocation_breakpoint'::text)) OR ((cvterm.name)::text = 'insertion_breakpoint'::text)) OR ((cvterm.name)::text = 'deletion_breakpoint'::text)) OR ((cvterm.name)::text = 'blunt_end_restriction_enzyme_cleavage_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text)) OR ((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'deletion'::text)) OR ((cvterm.name)::text = 'translocation'::text)) OR ((cvterm.name)::text = 'insertion'::text)) OR ((cvterm.name)::text = 'copy_number_variation'::text)) OR ((cvterm.name)::text = 'UPD'::text)) OR ((cvterm.name)::text = 'structural_alteration'::text)) OR ((cvterm.name)::text = 'substitution'::text)) OR ((cvterm.name)::text = 'indel'::text)) OR ((cvterm.name)::text = 'inversion'::text)) OR ((cvterm.name)::text = 'transgenic_insertion'::text)) OR ((cvterm.name)::text = 'duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text)) OR ((cvterm.name)::text = 'direct_tandem_duplication'::text)) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'copy_number_gain'::text)) OR ((cvterm.name)::text = 'copy_number_loss'::text)) OR ((cvterm.name)::text = 'maternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'complex_structural_alteration'::text)) OR ((cvterm.name)::text = 'sequence_length_variation'::text)) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'sequence_feature'::text));


--
-- Name: sequence_length_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_length_variation AS
 SELECT feature.feature_id AS sequence_length_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'simple_sequence_length_variation'::text) OR ((cvterm.name)::text = 'sequence_length_variation'::text));


--
-- Name: sequence_location; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_location AS
 SELECT feature.feature_id AS sequence_location_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((cvterm.name)::text = 'organelle_sequence'::text) OR ((cvterm.name)::text = 'plasmid_location'::text)) OR ((cvterm.name)::text = 'proviral_location'::text)) OR ((cvterm.name)::text = 'macronuclear_sequence'::text)) OR ((cvterm.name)::text = 'micronuclear_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_sequence'::text)) OR ((cvterm.name)::text = 'nuclear_sequence'::text)) OR ((cvterm.name)::text = 'nucleomorphic_sequence'::text)) OR ((cvterm.name)::text = 'plastid_sequence'::text)) OR ((cvterm.name)::text = 'mitochondrial_DNA'::text)) OR ((cvterm.name)::text = 'apicoplast_sequence'::text)) OR ((cvterm.name)::text = 'chromoplast_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_sequence'::text)) OR ((cvterm.name)::text = 'cyanelle_sequence'::text)) OR ((cvterm.name)::text = 'leucoplast_sequence'::text)) OR ((cvterm.name)::text = 'proplastid_sequence'::text)) OR ((cvterm.name)::text = 'chloroplast_DNA'::text)) OR ((cvterm.name)::text = 'endogenous_retroviral_sequence'::text)) OR ((cvterm.name)::text = 'sequence_location'::text));


--
-- Name: sequence_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_motif AS
 SELECT feature.feature_id AS sequence_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'nucleotide_motif'::text) OR ((cvterm.name)::text = 'DNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_motif'::text)) OR ((cvterm.name)::text = 'PSE_motif'::text)) OR ((cvterm.name)::text = 'CAAT_signal'::text)) OR ((cvterm.name)::text = 'minus_10_signal'::text)) OR ((cvterm.name)::text = 'minus_35_signal'::text)) OR ((cvterm.name)::text = 'DRE_motif'::text)) OR ((cvterm.name)::text = 'E_box_motif'::text)) OR ((cvterm.name)::text = 'INR1_motif'::text)) OR ((cvterm.name)::text = 'GAGA_motif'::text)) OR ((cvterm.name)::text = 'octamer_motif'::text)) OR ((cvterm.name)::text = 'retinoic_acid_responsive_element'::text)) OR ((cvterm.name)::text = 'promoter_element'::text)) OR ((cvterm.name)::text = 'DCE_SI'::text)) OR ((cvterm.name)::text = 'DCE_SII'::text)) OR ((cvterm.name)::text = 'DCE_SIII'::text)) OR ((cvterm.name)::text = 'minus_12_signal'::text)) OR ((cvterm.name)::text = 'minus_24_signal'::text)) OR ((cvterm.name)::text = 'GC_rich_promoter_region'::text)) OR ((cvterm.name)::text = 'DMv4_motif'::text)) OR ((cvterm.name)::text = 'DMv5_motif'::text)) OR ((cvterm.name)::text = 'DMv3_motif'::text)) OR ((cvterm.name)::text = 'DMv2_motif'::text)) OR ((cvterm.name)::text = 'DPE1_motif'::text)) OR ((cvterm.name)::text = 'DMv1_motif'::text)) OR ((cvterm.name)::text = 'NDM2_motif'::text)) OR ((cvterm.name)::text = 'NDM3_motif'::text)) OR ((cvterm.name)::text = 'core_promoter_element'::text)) OR ((cvterm.name)::text = 'regulatory_promoter_element'::text)) OR ((cvterm.name)::text = 'INR_motif'::text)) OR ((cvterm.name)::text = 'DPE_motif'::text)) OR ((cvterm.name)::text = 'BREu_motif'::text)) OR ((cvterm.name)::text = 'TATA_box'::text)) OR ((cvterm.name)::text = 'A_box'::text)) OR ((cvterm.name)::text = 'B_box'::text)) OR ((cvterm.name)::text = 'C_box'::text)) OR ((cvterm.name)::text = 'MTE'::text)) OR ((cvterm.name)::text = 'BREd_motif'::text)) OR ((cvterm.name)::text = 'DCE'::text)) OR ((cvterm.name)::text = 'intermediate_element'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'A_box_type_1'::text)) OR ((cvterm.name)::text = 'A_box_type_2'::text)) OR ((cvterm.name)::text = 'proximal_promoter_element'::text)) OR ((cvterm.name)::text = 'distal_promoter_element'::text)) OR ((cvterm.name)::text = 'RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'A_minor_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_junction_loop'::text)) OR ((cvterm.name)::text = 'hammerhead_ribozyme'::text)) OR ((cvterm.name)::text = 'asymmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text)) OR ((cvterm.name)::text = 'K_turn_RNA_motif'::text)) OR ((cvterm.name)::text = 'sarcin_like_RNA_motif'::text)) OR ((cvterm.name)::text = 'RNA_hook_turn'::text)) OR ((cvterm.name)::text = 'sequence_motif'::text));


--
-- Name: sequence_rearrangement_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_rearrangement_feature AS
 SELECT feature.feature_id AS sequence_rearrangement_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'specific_recombination_site'::text) OR ((cvterm.name)::text = 'chromosome_breakage_sequence'::text)) OR ((cvterm.name)::text = 'internal_eliminated_sequence'::text)) OR ((cvterm.name)::text = 'macronucleus_destined_segment'::text)) OR ((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'sequence_rearrangement_feature'::text));


--
-- Name: sequence_secondary_structure; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_secondary_structure AS
 SELECT feature.feature_id AS sequence_secondary_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'G_quartet'::text) OR ((cvterm.name)::text = 'base_pair'::text)) OR ((cvterm.name)::text = 'RNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'DNA_sequence_secondary_structure'::text)) OR ((cvterm.name)::text = 'pseudoknot'::text)) OR ((cvterm.name)::text = 'WC_base_pair'::text)) OR ((cvterm.name)::text = 'sugar_edge_base_pair'::text)) OR ((cvterm.name)::text = 'Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'reverse_Hoogsteen_base_pair'::text)) OR ((cvterm.name)::text = 'wobble_base_pair'::text)) OR ((cvterm.name)::text = 'stem_loop'::text)) OR ((cvterm.name)::text = 'tetraloop'::text)) OR ((cvterm.name)::text = 'i_motif'::text)) OR ((cvterm.name)::text = 'recoding_pseudoknot'::text)) OR ((cvterm.name)::text = 'H_pseudoknot'::text)) OR ((cvterm.name)::text = 'sequence_secondary_structure'::text));


--
-- Name: sequence_uncertainty; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_uncertainty AS
 SELECT feature.feature_id AS sequence_uncertainty_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sequence_uncertainty'::text);


--
-- Name: sequence_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequence_variant AS
 SELECT feature.feature_id AS sequence_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'functional_variant'::text) OR ((cvterm.name)::text = 'structural_variant'::text)) OR ((cvterm.name)::text = 'loss_of_heterozygosity'::text)) OR ((cvterm.name)::text = 'transcript_function_variant'::text)) OR ((cvterm.name)::text = 'translational_product_function_variant'::text)) OR ((cvterm.name)::text = 'level_of_transcript_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'silent_mutation'::text)) OR ((cvterm.name)::text = 'copy_number_change'::text)) OR ((cvterm.name)::text = 'gene_variant'::text)) OR ((cvterm.name)::text = 'regulatory_region_variant'::text)) OR ((cvterm.name)::text = 'intergenic_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text)) OR ((cvterm.name)::text = 'gene_fusion'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text)) OR ((cvterm.name)::text = '5KB_upstream_variant'::text)) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = '5KB_downstream_variant'::text)) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'sequence_variant'::text));


--
-- Name: sequencing_primer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sequencing_primer AS
 SELECT feature.feature_id AS sequencing_primer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sequencing_primer'::text);


--
-- Name: serine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW serine AS
 SELECT feature.feature_id AS serine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine'::text);


--
-- Name: serine_threonine_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW serine_threonine_motif AS
 SELECT feature.feature_id AS serine_threonine_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_threonine_motif'::text);


--
-- Name: serine_threonine_staple_motif; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW serine_threonine_staple_motif AS
 SELECT feature.feature_id AS serine_threonine_staple_motif_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_threonine_staple_motif'::text);


--
-- Name: serine_threonine_turn; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW serine_threonine_turn AS
 SELECT feature.feature_id AS serine_threonine_turn_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'st_turn_left_handed_type_one'::text) OR ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text)) OR ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text)) OR ((cvterm.name)::text = 'serine_threonine_turn'::text));


--
-- Name: serine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW serine_trna_primary_transcript AS
 SELECT feature.feature_id AS serine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text);


--
-- Name: seryl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW seryl_trna AS
 SELECT feature.feature_id AS seryl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seryl_tRNA'::text);


--
-- Name: seven_aminomethyl_seven_deazaguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW seven_aminomethyl_seven_deazaguanosine AS
 SELECT feature.feature_id AS seven_aminomethyl_seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text);


--
-- Name: seven_cyano_seven_deazaguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW seven_cyano_seven_deazaguanosine AS
 SELECT feature.feature_id AS seven_cyano_seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text);


--
-- Name: seven_deazaguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW seven_deazaguanosine AS
 SELECT feature.feature_id AS seven_deazaguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'queuosine'::text) OR ((cvterm.name)::text = 'epoxyqueuosine'::text)) OR ((cvterm.name)::text = 'galactosyl_queuosine'::text)) OR ((cvterm.name)::text = 'mannosyl_queuosine'::text)) OR ((cvterm.name)::text = 'seven_cyano_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'seven_aminomethyl_seven_deazaguanosine'::text)) OR ((cvterm.name)::text = 'archaeosine'::text)) OR ((cvterm.name)::text = 'seven_deazaguanosine'::text));


--
-- Name: seven_methylguanine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW seven_methylguanine AS
 SELECT feature.feature_id AS seven_methylguanine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_methylguanine'::text);


--
-- Name: seven_methylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW seven_methylguanosine AS
 SELECT feature.feature_id AS seven_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'seven_methylguanosine'::text);


--
-- Name: shadow_enhancer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW shadow_enhancer AS
 SELECT feature.feature_id AS shadow_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'shadow_enhancer'::text);


--
-- Name: shine_dalgarno_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW shine_dalgarno_sequence AS
 SELECT feature.feature_id AS shine_dalgarno_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text);


--
-- Name: signal_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW signal_peptide AS
 SELECT feature.feature_id AS signal_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'signal_peptide'::text);


--
-- Name: silenced; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced AS
 SELECT feature.feature_id AS silenced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced'::text));


--
-- Name: silenced_by_dna_methylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_by_dna_methylation AS
 SELECT feature.feature_id AS silenced_by_dna_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text);


--
-- Name: silenced_by_dna_modification; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_by_dna_modification AS
 SELECT feature.feature_id AS silenced_by_dna_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'silenced_by_DNA_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text));


--
-- Name: silenced_by_histone_deacetylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_by_histone_deacetylation AS
 SELECT feature.feature_id AS silenced_by_histone_deacetylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text);


--
-- Name: silenced_by_histone_methylation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_by_histone_methylation AS
 SELECT feature.feature_id AS silenced_by_histone_methylation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_histone_methylation'::text);


--
-- Name: silenced_by_histone_modification; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_by_histone_modification AS
 SELECT feature.feature_id AS silenced_by_histone_modification_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'silenced_by_histone_methylation'::text) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text));


--
-- Name: silenced_by_rna_interference; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_by_rna_interference AS
 SELECT feature.feature_id AS silenced_by_rna_interference_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silenced_by_RNA_interference'::text);


--
-- Name: silenced_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silenced_gene AS
 SELECT feature.feature_id AS silenced_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'gene_silenced_by_DNA_modification'::text) OR ((cvterm.name)::text = 'gene_silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'gene_silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'silenced_gene'::text));


--
-- Name: silencer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silencer AS
 SELECT feature.feature_id AS silencer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silencer'::text);


--
-- Name: silent_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW silent_mutation AS
 SELECT feature.feature_id AS silent_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'silent_mutation'::text);


--
-- Name: simple_sequence_length_variation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW simple_sequence_length_variation AS
 SELECT feature.feature_id AS simple_sequence_length_variation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'simple_sequence_length_variation'::text);


--
-- Name: sine_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sine_element AS
 SELECT feature.feature_id AS sine_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SINE_element'::text);


--
-- Name: single; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW single AS
 SELECT feature.feature_id AS single_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'single'::text);


--
-- Name: single_strand_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW single_strand_restriction_enzyme_cleavage_site AS
 SELECT feature.feature_id AS single_strand_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_restriction_enzyme_junction'::text) OR ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text)) OR ((cvterm.name)::text = 'single_strand_restriction_enzyme_cleavage_site'::text));


--
-- Name: single_stranded_cdna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW single_stranded_cdna AS
 SELECT feature.feature_id AS single_stranded_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'single_stranded_cDNA'::text);


--
-- Name: single_stranded_dna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW single_stranded_dna_chromosome AS
 SELECT feature.feature_id AS single_stranded_dna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_single_stranded_DNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_DNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_DNA_chromosome'::text));


--
-- Name: single_stranded_rna_chromosome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW single_stranded_rna_chromosome AS
 SELECT feature.feature_id AS single_stranded_rna_chromosome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear_single_stranded_RNA_chromosome'::text) OR ((cvterm.name)::text = 'circular_single_stranded_RNA_chromosome'::text)) OR ((cvterm.name)::text = 'single_stranded_RNA_chromosome'::text));


--
-- Name: sirna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sirna AS
 SELECT feature.feature_id AS sirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'siRNA'::text);


--
-- Name: site_specific_recombination_target_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW site_specific_recombination_target_region AS
 SELECT feature.feature_id AS site_specific_recombination_target_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((cvterm.name)::text = 'integration_excision_site'::text) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text));


--
-- Name: sl10_accceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl10_accceptor_site AS
 SELECT feature.feature_id AS sl10_accceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL10_accceptor_site'::text);


--
-- Name: sl11_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl11_acceptor_site AS
 SELECT feature.feature_id AS sl11_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL11_acceptor_site'::text);


--
-- Name: sl12_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl12_acceptor_site AS
 SELECT feature.feature_id AS sl12_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL12_acceptor_site'::text);


--
-- Name: sl1_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl1_acceptor_site AS
 SELECT feature.feature_id AS sl1_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL1_acceptor_site'::text);


--
-- Name: sl2_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl2_acceptor_site AS
 SELECT feature.feature_id AS sl2_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'SL3_acceptor_site'::text) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text));


--
-- Name: sl3_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl3_acceptor_site AS
 SELECT feature.feature_id AS sl3_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL3_acceptor_site'::text);


--
-- Name: sl4_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl4_acceptor_site AS
 SELECT feature.feature_id AS sl4_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL4_acceptor_site'::text);


--
-- Name: sl5_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl5_acceptor_site AS
 SELECT feature.feature_id AS sl5_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL5_acceptor_site'::text);


--
-- Name: sl6_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl6_acceptor_site AS
 SELECT feature.feature_id AS sl6_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL6_acceptor_site'::text);


--
-- Name: sl7_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl7_acceptor_site AS
 SELECT feature.feature_id AS sl7_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL7_acceptor_site'::text);


--
-- Name: sl8_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl8_acceptor_site AS
 SELECT feature.feature_id AS sl8_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL8_acceptor_site'::text);


--
-- Name: sl9_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sl9_acceptor_site AS
 SELECT feature.feature_id AS sl9_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SL9_acceptor_site'::text);


--
-- Name: small_regulatory_ncrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW small_regulatory_ncrna AS
 SELECT feature.feature_id AS small_regulatory_ncrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'miRNA'::text) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text));


--
-- Name: small_subunit_rrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW small_subunit_rrna AS
 SELECT feature.feature_id AS small_subunit_rrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'rRNA_18S'::text) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text));


--
-- Name: snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snorna AS
 SELECT feature.feature_id AS snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'C_D_box_snoRNA'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text));


--
-- Name: snorna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snorna_encoding AS
 SELECT feature.feature_id AS snorna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'C_D_box_snoRNA_encoding'::text) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_encoding'::text)) OR ((cvterm.name)::text = 'snoRNA_encoding'::text));


--
-- Name: snorna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snorna_gene AS
 SELECT feature.feature_id AS snorna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snoRNA_gene'::text);


--
-- Name: snorna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snorna_primary_transcript AS
 SELECT feature.feature_id AS snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text));


--
-- Name: snp; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snp AS
 SELECT feature.feature_id AS snp_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SNP'::text);


--
-- Name: snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snrna AS
 SELECT feature.feature_id AS snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'U1_snRNA'::text) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text));


--
-- Name: snrna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snrna_encoding AS
 SELECT feature.feature_id AS snrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_encoding'::text);


--
-- Name: snrna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snrna_gene AS
 SELECT feature.feature_id AS snrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_gene'::text);


--
-- Name: snrna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snrna_primary_transcript AS
 SELECT feature.feature_id AS snrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'snRNA_primary_transcript'::text);


--
-- Name: snv; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW snv AS
 SELECT feature.feature_id AS snv_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'SNP'::text) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'SNV'::text));


--
-- Name: so_foreign; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW so_foreign AS
 SELECT feature.feature_id AS so_foreign_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'foreign'::text);


--
-- Name: so_genotype; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW so_genotype AS
 SELECT feature.feature_id AS so_genotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'genotype'::text);


--
-- Name: so_natural; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW so_natural AS
 SELECT feature.feature_id AS so_natural_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'natural'::text);


--
-- Name: solo_ltr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW solo_ltr AS
 SELECT feature.feature_id AS solo_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'solo_LTR'::text);


--
-- Name: somatic_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW somatic_variant AS
 SELECT feature.feature_id AS somatic_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'somatic_variant'::text);


--
-- Name: sonicate_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sonicate_fragment AS
 SELECT feature.feature_id AS sonicate_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sonicate_fragment'::text);


--
-- Name: sp6_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sp6_rna_polymerase_promoter AS
 SELECT feature.feature_id AS sp6_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text);


--
-- Name: specific_recombination_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW specific_recombination_site AS
 SELECT feature.feature_id AS specific_recombination_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'recombination_feature_of_rearranged_gene'::text) OR ((cvterm.name)::text = 'site_specific_recombination_target_region'::text)) OR ((cvterm.name)::text = 'recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'integration_excision_site'::text)) OR ((cvterm.name)::text = 'resolution_site'::text)) OR ((cvterm.name)::text = 'inversion_site'::text)) OR ((cvterm.name)::text = 'inversion_site_part'::text)) OR ((cvterm.name)::text = 'attI_site'::text)) OR ((cvterm.name)::text = 'attP_site'::text)) OR ((cvterm.name)::text = 'attB_site'::text)) OR ((cvterm.name)::text = 'attL_site'::text)) OR ((cvterm.name)::text = 'attR_site'::text)) OR ((cvterm.name)::text = 'attC_site'::text)) OR ((cvterm.name)::text = 'attCtn_site'::text)) OR ((cvterm.name)::text = 'loxP_site'::text)) OR ((cvterm.name)::text = 'dif_site'::text)) OR ((cvterm.name)::text = 'FRT_site'::text)) OR ((cvterm.name)::text = 'IRLinv_site'::text)) OR ((cvterm.name)::text = 'IRRinv_site'::text)) OR ((cvterm.name)::text = 'specific_recombination_site'::text));


--
-- Name: splice_acceptor_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_acceptor_variant AS
 SELECT feature.feature_id AS splice_acceptor_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_acceptor_variant'::text);


--
-- Name: splice_donor_5th_base_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_donor_5th_base_variant AS
 SELECT feature.feature_id AS splice_donor_5th_base_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text);


--
-- Name: splice_donor_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_donor_variant AS
 SELECT feature.feature_id AS splice_donor_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_donor_variant'::text);


--
-- Name: splice_enhancer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_enhancer AS
 SELECT feature.feature_id AS splice_enhancer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text));


--
-- Name: splice_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_junction AS
 SELECT feature.feature_id AS splice_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_junction'::text);


--
-- Name: splice_region_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_region_variant AS
 SELECT feature.feature_id AS splice_region_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'splice_region_variant'::text);


--
-- Name: splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_site AS
 SELECT feature.feature_id AS splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'cis_splice_site'::text) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'splice_site'::text));


--
-- Name: splice_site_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splice_site_variant AS
 SELECT feature.feature_id AS splice_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'splice_acceptor_variant'::text) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text));


--
-- Name: spliced_leader_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW spliced_leader_rna AS
 SELECT feature.feature_id AS spliced_leader_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'spliced_leader_RNA'::text);


--
-- Name: spliceosomal_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW spliceosomal_intron AS
 SELECT feature.feature_id AS spliceosomal_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'U2_intron'::text) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text));


--
-- Name: spliceosomal_intron_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW spliceosomal_intron_region AS
 SELECT feature.feature_id AS spliceosomal_intron_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'intronic_splice_enhancer'::text) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text));


--
-- Name: splicing_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splicing_regulatory_region AS
 SELECT feature.feature_id AS splicing_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'splice_enhancer'::text) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text));


--
-- Name: splicing_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW splicing_variant AS
 SELECT feature.feature_id AS splicing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'cryptic_splice_site_variant'::text) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text));


--
-- Name: spot_42_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW spot_42_rna AS
 SELECT feature.feature_id AS spot_42_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'spot_42_RNA'::text);


--
-- Name: srp_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW srp_rna AS
 SELECT feature.feature_id AS srp_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA'::text);


--
-- Name: srp_rna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW srp_rna_encoding AS
 SELECT feature.feature_id AS srp_rna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_encoding'::text);


--
-- Name: srp_rna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW srp_rna_gene AS
 SELECT feature.feature_id AS srp_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_gene'::text);


--
-- Name: srp_rna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW srp_rna_primary_transcript AS
 SELECT feature.feature_id AS srp_rna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text);


--
-- Name: ss_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ss_oligo AS
 SELECT feature.feature_id AS ss_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'primer'::text) OR ((cvterm.name)::text = 'sequencing_primer'::text)) OR ((cvterm.name)::text = 'forward_primer'::text)) OR ((cvterm.name)::text = 'reverse_primer'::text)) OR ((cvterm.name)::text = 'ASPE_primer'::text)) OR ((cvterm.name)::text = 'dCAPS_primer'::text)) OR ((cvterm.name)::text = 'ss_oligo'::text));


--
-- Name: ss_rna_viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ss_rna_viral_sequence AS
 SELECT feature.feature_id AS ss_rna_viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text));


--
-- Name: st_turn_left_handed_type_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW st_turn_left_handed_type_one AS
 SELECT feature.feature_id AS st_turn_left_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_one'::text);


--
-- Name: st_turn_left_handed_type_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW st_turn_left_handed_type_two AS
 SELECT feature.feature_id AS st_turn_left_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_left_handed_type_two'::text);


--
-- Name: st_turn_right_handed_type_one; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW st_turn_right_handed_type_one AS
 SELECT feature.feature_id AS st_turn_right_handed_type_one_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_one'::text);


--
-- Name: st_turn_right_handed_type_two; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW st_turn_right_handed_type_two AS
 SELECT feature.feature_id AS st_turn_right_handed_type_two_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'st_turn_right_handed_type_two'::text);


--
-- Name: standard_draft; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW standard_draft AS
 SELECT feature.feature_id AS standard_draft_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'standard_draft'::text);


--
-- Name: start_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW start_codon AS
 SELECT feature.feature_id AS start_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'non_canonical_start_codon'::text) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text));


--
-- Name: status; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW status AS
 SELECT feature.feature_id AS status_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((cvterm.name)::text = 'fragmentary'::text) OR ((cvterm.name)::text = 'predicted'::text)) OR ((cvterm.name)::text = 'validated'::text)) OR ((cvterm.name)::text = 'invalidated'::text)) OR ((cvterm.name)::text = 'independently_known'::text)) OR ((cvterm.name)::text = 'consensus'::text)) OR ((cvterm.name)::text = 'low_complexity'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text)) OR ((cvterm.name)::text = 'orphan'::text)) OR ((cvterm.name)::text = 'predicted_by_ab_initio_computation'::text)) OR ((cvterm.name)::text = 'supported_by_domain_match'::text)) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'experimentally_determined'::text)) OR ((cvterm.name)::text = 'invalidated_by_chimeric_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_contamination'::text)) OR ((cvterm.name)::text = 'invalidated_by_genomic_polyA_primed_cDNA'::text)) OR ((cvterm.name)::text = 'invalidated_by_partial_processing'::text)) OR ((cvterm.name)::text = 'standard_draft'::text)) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'status'::text));


--
-- Name: stem_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stem_loop AS
 SELECT feature.feature_id AS stem_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tetraloop'::text) OR ((cvterm.name)::text = 'stem_loop'::text));


--
-- Name: sticky_end_restriction_enzyme_cleavage_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sticky_end_restriction_enzyme_cleavage_site AS
 SELECT feature.feature_id AS sticky_end_restriction_enzyme_cleavage_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sticky_end_restriction_enzyme_cleavage_site'::text);


--
-- Name: stop_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_codon AS
 SELECT feature.feature_id AS stop_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon'::text);


--
-- Name: stop_codon_read_through; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_codon_read_through AS
 SELECT feature.feature_id AS stop_codon_read_through_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text));


--
-- Name: stop_codon_redefined_as_pyrrolysine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_codon_redefined_as_pyrrolysine AS
 SELECT feature.feature_id AS stop_codon_redefined_as_pyrrolysine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text);


--
-- Name: stop_codon_redefined_as_selenocysteine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_codon_redefined_as_selenocysteine AS
 SELECT feature.feature_id AS stop_codon_redefined_as_selenocysteine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text);


--
-- Name: stop_codon_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_codon_signal AS
 SELECT feature.feature_id AS stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'UAG_stop_codon_signal'::text) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text));


--
-- Name: stop_gained; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_gained AS
 SELECT feature.feature_id AS stop_gained_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_gained'::text);


--
-- Name: stop_lost; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_lost AS
 SELECT feature.feature_id AS stop_lost_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_lost'::text);


--
-- Name: stop_retained_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW stop_retained_variant AS
 SELECT feature.feature_id AS stop_retained_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stop_retained_variant'::text);


--
-- Name: strand_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW strand_attribute AS
 SELECT feature.feature_id AS strand_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'single'::text) OR ((cvterm.name)::text = 'double'::text)) OR ((cvterm.name)::text = 'strand_attribute'::text));


--
-- Name: strna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW strna AS
 SELECT feature.feature_id AS strna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA'::text);


--
-- Name: strna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW strna_encoding AS
 SELECT feature.feature_id AS strna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_encoding'::text);


--
-- Name: strna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW strna_gene AS
 SELECT feature.feature_id AS strna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_gene'::text);


--
-- Name: strna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW strna_primary_transcript AS
 SELECT feature.feature_id AS strna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'stRNA_primary_transcript'::text);


--
-- Name: structural_alteration; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW structural_alteration AS
 SELECT feature.feature_id AS structural_alteration_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'complex_structural_alteration'::text) OR ((cvterm.name)::text = 'structural_alteration'::text));


--
-- Name: structural_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW structural_variant AS
 SELECT feature.feature_id AS structural_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'silent_mutation'::text) OR ((cvterm.name)::text = 'copy_number_change'::text)) OR ((cvterm.name)::text = 'gene_variant'::text)) OR ((cvterm.name)::text = 'regulatory_region_variant'::text)) OR ((cvterm.name)::text = 'intergenic_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text)) OR ((cvterm.name)::text = 'downstream_gene_variant'::text)) OR ((cvterm.name)::text = 'gene_fusion'::text)) OR ((cvterm.name)::text = 'splicing_variant'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site_variant'::text)) OR ((cvterm.name)::text = 'exon_loss'::text)) OR ((cvterm.name)::text = 'intron_gain'::text)) OR ((cvterm.name)::text = 'splice_region_variant'::text)) OR ((cvterm.name)::text = 'cryptic_splice_acceptor'::text)) OR ((cvterm.name)::text = 'cryptic_splice_donor'::text)) OR ((cvterm.name)::text = 'complex_change_in_transcript'::text)) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text)) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'TF_binding_site_variant'::text)) OR ((cvterm.name)::text = '5KB_upstream_variant'::text)) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = '5KB_downstream_variant'::text)) OR ((cvterm.name)::text = '500B_downstream_variant'::text)) OR ((cvterm.name)::text = 'structural_variant'::text));


--
-- Name: sts; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sts AS
 SELECT feature.feature_id AS sts_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'STS'::text);


--
-- Name: sts_map; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sts_map AS
 SELECT feature.feature_id AS sts_map_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'STS_map'::text);


--
-- Name: substitution; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW substitution AS
 SELECT feature.feature_id AS substitution_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((cvterm.name)::text = 'sequence_length_variation'::text) OR ((cvterm.name)::text = 'MNP'::text)) OR ((cvterm.name)::text = 'SNV'::text)) OR ((cvterm.name)::text = 'complex_substitution'::text)) OR ((cvterm.name)::text = 'simple_sequence_length_variation'::text)) OR ((cvterm.name)::text = 'SNP'::text)) OR ((cvterm.name)::text = 'point_mutation'::text)) OR ((cvterm.name)::text = 'transition'::text)) OR ((cvterm.name)::text = 'transversion'::text)) OR ((cvterm.name)::text = 'pyrimidine_transition'::text)) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text)) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'substitution'::text));


--
-- Name: sugar_edge_base_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW sugar_edge_base_pair AS
 SELECT feature.feature_id AS sugar_edge_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'sugar_edge_base_pair'::text);


--
-- Name: supercontig; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW supercontig AS
 SELECT feature.feature_id AS supercontig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supercontig'::text);


--
-- Name: supported_by_domain_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW supported_by_domain_match AS
 SELECT feature.feature_id AS supported_by_domain_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supported_by_domain_match'::text);


--
-- Name: supported_by_est_or_cdna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW supported_by_est_or_cdna AS
 SELECT feature.feature_id AS supported_by_est_or_cdna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text);


--
-- Name: supported_by_sequence_similarity; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW supported_by_sequence_similarity AS
 SELECT feature.feature_id AS supported_by_sequence_similarity_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'supported_by_domain_match'::text) OR ((cvterm.name)::text = 'supported_by_EST_or_cDNA'::text)) OR ((cvterm.name)::text = 'supported_by_sequence_similarity'::text));


--
-- Name: symbiosis_island; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW symbiosis_island AS
 SELECT feature.feature_id AS symbiosis_island_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'symbiosis_island'::text);


--
-- Name: symmetric_rna_internal_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW symmetric_rna_internal_loop AS
 SELECT feature.feature_id AS symmetric_rna_internal_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'symmetric_RNA_internal_loop'::text);


--
-- Name: synonymous_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW synonymous_codon AS
 SELECT feature.feature_id AS synonymous_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'synonymous_codon'::text);


--
-- Name: syntenic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW syntenic AS
 SELECT feature.feature_id AS syntenic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'syntenic'::text);


--
-- Name: syntenic_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW syntenic_region AS
 SELECT feature.feature_id AS syntenic_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'syntenic_region'::text);


--
-- Name: synthetic_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW synthetic_oligo AS
 SELECT feature.feature_id AS synthetic_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'morpholino_oligo'::text) OR ((cvterm.name)::text = 'PNA_oligo'::text)) OR ((cvterm.name)::text = 'LNA_oligo'::text)) OR ((cvterm.name)::text = 'TNA_oligo'::text)) OR ((cvterm.name)::text = 'GNA_oligo'::text)) OR ((cvterm.name)::text = 'R_GNA_oligo'::text)) OR ((cvterm.name)::text = 'S_GNA_oligo'::text)) OR ((cvterm.name)::text = 'synthetic_oligo'::text));


--
-- Name: synthetic_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW synthetic_sequence AS
 SELECT feature.feature_id AS synthetic_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'random_sequence'::text) OR ((cvterm.name)::text = 'designed_sequence'::text)) OR ((cvterm.name)::text = 'synthetic_sequence'::text));


--
-- Name: t3_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW t3_rna_polymerase_promoter AS
 SELECT feature.feature_id AS t3_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text);


--
-- Name: t7_rna_polymerase_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW t7_rna_polymerase_promoter AS
 SELECT feature.feature_id AS t7_rna_polymerase_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text);


--
-- Name: t_loop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW t_loop AS
 SELECT feature.feature_id AS t_loop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_loop'::text);


--
-- Name: t_to_a_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW t_to_a_transversion AS
 SELECT feature.feature_id AS t_to_a_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_A_transversion'::text);


--
-- Name: t_to_c_transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW t_to_c_transition AS
 SELECT feature.feature_id AS t_to_c_transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_C_transition'::text);


--
-- Name: t_to_g_transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW t_to_g_transversion AS
 SELECT feature.feature_id AS t_to_g_transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'T_to_G_transversion'::text);


--
-- Name: tag; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tag AS
 SELECT feature.feature_id AS tag_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'SAGE_tag'::text) OR ((cvterm.name)::text = 'STS'::text)) OR ((cvterm.name)::text = 'EST'::text)) OR ((cvterm.name)::text = 'engineered_tag'::text)) OR ((cvterm.name)::text = 'five_prime_EST'::text)) OR ((cvterm.name)::text = 'three_prime_EST'::text)) OR ((cvterm.name)::text = 'UST'::text)) OR ((cvterm.name)::text = 'RST'::text)) OR ((cvterm.name)::text = 'three_prime_UST'::text)) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'three_prime_RST'::text)) OR ((cvterm.name)::text = 'five_prime_RST'::text)) OR ((cvterm.name)::text = 'tag'::text));


--
-- Name: tandem; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tandem AS
 SELECT feature.feature_id AS tandem_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tandem'::text);


--
-- Name: tandem_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tandem_duplication AS
 SELECT feature.feature_id AS tandem_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'direct_tandem_duplication'::text) OR ((cvterm.name)::text = 'inverted_tandem_duplication'::text)) OR ((cvterm.name)::text = 'tandem_duplication'::text));


--
-- Name: tandem_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tandem_repeat AS
 SELECT feature.feature_id AS tandem_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'satellite_DNA'::text) OR ((cvterm.name)::text = 'microsatellite'::text)) OR ((cvterm.name)::text = 'minisatellite'::text)) OR ((cvterm.name)::text = 'dinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text)) OR ((cvterm.name)::text = 'tandem_repeat'::text));


--
-- Name: target_site_duplication; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW target_site_duplication AS
 SELECT feature.feature_id AS target_site_duplication_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'target_site_duplication'::text);


--
-- Name: targeting_vector; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW targeting_vector AS
 SELECT feature.feature_id AS targeting_vector_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'targeting_vector'::text);


--
-- Name: tasirna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tasirna AS
 SELECT feature.feature_id AS tasirna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tasiRNA'::text);


--
-- Name: tasirna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tasirna_primary_transcript AS
 SELECT feature.feature_id AS tasirna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text);


--
-- Name: tata_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tata_box AS
 SELECT feature.feature_id AS tata_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'RNA_polymerase_II_TATA_box'::text) OR ((cvterm.name)::text = 'RNA_polymerase_III_TATA_box'::text)) OR ((cvterm.name)::text = 'TATA_box'::text));


--
-- Name: telomerase_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW telomerase_rna AS
 SELECT feature.feature_id AS telomerase_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomerase_RNA'::text);


--
-- Name: telomerase_rna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW telomerase_rna_gene AS
 SELECT feature.feature_id AS telomerase_rna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomerase_RNA_gene'::text);


--
-- Name: telomere; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW telomere AS
 SELECT feature.feature_id AS telomere_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomere'::text);


--
-- Name: telomeric_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW telomeric_repeat AS
 SELECT feature.feature_id AS telomeric_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'telomeric_repeat'::text);


--
-- Name: template_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW template_region AS
 SELECT feature.feature_id AS template_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'template_region'::text);


--
-- Name: terminal_codon_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW terminal_codon_variant AS
 SELECT feature.feature_id AS terminal_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'terminator_codon_variant'::text) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text));


--
-- Name: terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW terminal_inverted_repeat AS
 SELECT feature.feature_id AS terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_terminal_inverted_repeat'::text) OR ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat'::text));


--
-- Name: terminal_inverted_repeat_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW terminal_inverted_repeat_element AS
 SELECT feature.feature_id AS terminal_inverted_repeat_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'MITE'::text) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text));


--
-- Name: terminator; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW terminator AS
 SELECT feature.feature_id AS terminator_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'bacterial_terminator'::text) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'terminator'::text));


--
-- Name: terminator_codon_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW terminator_codon_variant AS
 SELECT feature.feature_id AS terminator_codon_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'stop_retained_variant'::text) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text));


--
-- Name: terminator_of_type_2_rnapol_iii_promoter; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW terminator_of_type_2_rnapol_iii_promoter AS
 SELECT feature.feature_id AS terminator_of_type_2_rnapol_iii_promoter_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text);


--
-- Name: tetraloop; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tetraloop AS
 SELECT feature.feature_id AS tetraloop_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tetraloop'::text);


--
-- Name: tetranuc_repeat_microsat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tetranuc_repeat_microsat AS
 SELECT feature.feature_id AS tetranuc_repeat_microsat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tetranucleotide_repeat_microsatellite_feature'::text);


--
-- Name: tf_binding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tf_binding_site AS
 SELECT feature.feature_id AS tf_binding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TF_binding_site'::text);


--
-- Name: tf_binding_site_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tf_binding_site_variant AS
 SELECT feature.feature_id AS tf_binding_site_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TF_binding_site_variant'::text);


--
-- Name: thr_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW thr_trna_primary_transcript AS
 SELECT feature.feature_id AS thr_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text);


--
-- Name: three_methylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_methylcytidine AS
 SELECT feature.feature_id AS three_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methylcytidine'::text);


--
-- Name: three_methylpseudouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_methylpseudouridine AS
 SELECT feature.feature_id AS three_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methylpseudouridine'::text);


--
-- Name: three_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_methyluridine AS
 SELECT feature.feature_id AS three_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_methyluridine'::text);


--
-- Name: three_prime_cis_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_cis_splice_site AS
 SELECT feature.feature_id AS three_prime_cis_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'canonical_three_prime_splice_site'::text) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text));


--
-- Name: three_prime_clip; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_clip AS
 SELECT feature.feature_id AS three_prime_clip_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_clip'::text);


--
-- Name: three_prime_coding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_coding_exon AS
 SELECT feature.feature_id AS three_prime_coding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon'::text);


--
-- Name: three_prime_coding_exon_coding_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_coding_exon_coding_region AS
 SELECT feature.feature_id AS three_prime_coding_exon_coding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text);


--
-- Name: three_prime_coding_exon_noncoding_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_coding_exon_noncoding_region AS
 SELECT feature.feature_id AS three_prime_coding_exon_noncoding_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text);


--
-- Name: three_prime_d_heptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_d_heptamer AS
 SELECT feature.feature_id AS three_prime_d_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_heptamer'::text);


--
-- Name: three_prime_d_nonamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_d_nonamer AS
 SELECT feature.feature_id AS three_prime_d_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_nonamer'::text);


--
-- Name: three_prime_d_recombination_signal_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_d_recombination_signal_sequence AS
 SELECT feature.feature_id AS three_prime_d_recombination_signal_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text);


--
-- Name: three_prime_d_spacer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_d_spacer AS
 SELECT feature.feature_id AS three_prime_d_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_D_spacer'::text);


--
-- Name: three_prime_est; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_est AS
 SELECT feature.feature_id AS three_prime_est_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_EST'::text);


--
-- Name: three_prime_five_prime_overlap; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_five_prime_overlap AS
 SELECT feature.feature_id AS three_prime_five_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_five_prime_overlap'::text);


--
-- Name: three_prime_flanking_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_flanking_region AS
 SELECT feature.feature_id AS three_prime_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_flanking_region'::text);


--
-- Name: three_prime_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_intron AS
 SELECT feature.feature_id AS three_prime_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_intron'::text);


--
-- Name: three_prime_ltr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_ltr AS
 SELECT feature.feature_id AS three_prime_ltr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_LTR'::text);


--
-- Name: three_prime_ltr_component; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_ltr_component AS
 SELECT feature.feature_id AS three_prime_ltr_component_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'R_three_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text));


--
-- Name: three_prime_noncoding_exon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_noncoding_exon AS
 SELECT feature.feature_id AS three_prime_noncoding_exon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_noncoding_exon'::text);


--
-- Name: three_prime_race_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_race_clone AS
 SELECT feature.feature_id AS three_prime_race_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_RACE_clone'::text);


--
-- Name: three_prime_recoding_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_recoding_site AS
 SELECT feature.feature_id AS three_prime_recoding_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_stem_loop_structure'::text) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text));


--
-- Name: three_prime_repeat_recoding_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_repeat_recoding_signal AS
 SELECT feature.feature_id AS three_prime_repeat_recoding_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text);


--
-- Name: three_prime_restriction_enzyme_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_restriction_enzyme_junction AS
 SELECT feature.feature_id AS three_prime_restriction_enzyme_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_restriction_enzyme_junction'::text);


--
-- Name: three_prime_rst; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_rst AS
 SELECT feature.feature_id AS three_prime_rst_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_RST'::text);


--
-- Name: three_prime_stem_loop_structure; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_stem_loop_structure AS
 SELECT feature.feature_id AS three_prime_stem_loop_structure_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text);


--
-- Name: three_prime_terminal_inverted_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_terminal_inverted_repeat AS
 SELECT feature.feature_id AS three_prime_terminal_inverted_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_terminal_inverted_repeat'::text);


--
-- Name: three_prime_three_prime_overlap; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_three_prime_overlap AS
 SELECT feature.feature_id AS three_prime_three_prime_overlap_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_three_prime_overlap'::text);


--
-- Name: three_prime_ust; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_ust AS
 SELECT feature.feature_id AS three_prime_ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UST'::text);


--
-- Name: three_prime_utr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_utr AS
 SELECT feature.feature_id AS three_prime_utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UTR'::text);


--
-- Name: three_prime_utr_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_utr_intron AS
 SELECT feature.feature_id AS three_prime_utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_prime_UTR_intron'::text);


--
-- Name: three_prime_utr_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_prime_utr_variant AS
 SELECT feature.feature_id AS three_prime_utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '3_prime_UTR_variant'::text);


--
-- Name: three_ten_helix; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_ten_helix AS
 SELECT feature.feature_id AS three_ten_helix_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_ten_helix'::text);


--
-- Name: three_three_amino_three_carboxypropyl_uridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_three_amino_three_carboxypropyl_uridine AS
 SELECT feature.feature_id AS three_three_amino_three_carboxypropyl_uridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_three_amino_three_carboxypropyl_uridine'::text);


--
-- Name: three_two_prime_o_dimethyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW three_two_prime_o_dimethyluridine AS
 SELECT feature.feature_id AS three_two_prime_o_dimethyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'three_two_prime_O_dimethyluridine'::text);


--
-- Name: threed_polypeptide_structure_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW threed_polypeptide_structure_variant AS
 SELECT feature.feature_id AS threed_polypeptide_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'complex_3D_structural_variant'::text) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = '3D_polypeptide_structure_variant'::text));


--
-- Name: threonine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW threonine AS
 SELECT feature.feature_id AS threonine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonine'::text);


--
-- Name: threonyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW threonyl_trna AS
 SELECT feature.feature_id AS threonyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'threonyl_tRNA'::text);


--
-- Name: tiling_path; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tiling_path AS
 SELECT feature.feature_id AS tiling_path_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tiling_path'::text);


--
-- Name: tiling_path_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tiling_path_clone AS
 SELECT feature.feature_id AS tiling_path_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tiling_path_clone'::text);


--
-- Name: tiling_path_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tiling_path_fragment AS
 SELECT feature.feature_id AS tiling_path_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'tiling_path_clone'::text) OR ((cvterm.name)::text = 'tiling_path_fragment'::text));


--
-- Name: tmrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna AS
 SELECT feature.feature_id AS tmrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA'::text);


--
-- Name: tmrna_acceptor_piece; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna_acceptor_piece AS
 SELECT feature.feature_id AS tmrna_acceptor_piece_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text);


--
-- Name: tmrna_coding_piece; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna_coding_piece AS
 SELECT feature.feature_id AS tmrna_coding_piece_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_coding_piece'::text);


--
-- Name: tmrna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna_encoding AS
 SELECT feature.feature_id AS tmrna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_encoding'::text);


--
-- Name: tmrna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna_gene AS
 SELECT feature.feature_id AS tmrna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_gene'::text);


--
-- Name: tmrna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna_primary_transcript AS
 SELECT feature.feature_id AS tmrna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tmRNA_primary_transcript'::text);


--
-- Name: tmrna_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tmrna_region AS
 SELECT feature.feature_id AS tmrna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'tmRNA_coding_piece'::text) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text));


--
-- Name: tna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tna AS
 SELECT feature.feature_id AS tna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TNA'::text);


--
-- Name: tna_oligo; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tna_oligo AS
 SELECT feature.feature_id AS tna_oligo_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TNA_oligo'::text);


--
-- Name: topologically_defined_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW topologically_defined_region AS
 SELECT feature.feature_id AS topologically_defined_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((cvterm.name)::text = 'flanking_region'::text) OR ((cvterm.name)::text = 'repeat_component'::text)) OR ((cvterm.name)::text = 'transposable_element_flanking_region'::text)) OR ((cvterm.name)::text = 'five_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'three_prime_flanking_region'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon_polymeric_tract'::text)) OR ((cvterm.name)::text = 'LTR_component'::text)) OR ((cvterm.name)::text = 'repeat_fragment'::text)) OR ((cvterm.name)::text = 'transposon_fragment'::text)) OR ((cvterm.name)::text = 'U5_LTR_region'::text)) OR ((cvterm.name)::text = 'R_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_LTR_region'::text)) OR ((cvterm.name)::text = 'three_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'five_prime_LTR_component'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'R_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text)) OR ((cvterm.name)::text = 'topologically_defined_region'::text));


--
-- Name: topology_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW topology_attribute AS
 SELECT feature.feature_id AS topology_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'linear'::text) OR ((cvterm.name)::text = 'circular'::text)) OR ((cvterm.name)::text = 'topology_attribute'::text));


--
-- Name: trans_splice_acceptor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_splice_acceptor_site AS
 SELECT feature.feature_id AS trans_splice_acceptor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((cvterm.name)::text = 'SL1_acceptor_site'::text) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text));


--
-- Name: trans_splice_donor_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_splice_donor_site AS
 SELECT feature.feature_id AS trans_splice_donor_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_splice_donor_site'::text);


--
-- Name: trans_splice_junction; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_splice_junction AS
 SELECT feature.feature_id AS trans_splice_junction_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_splice_junction'::text);


--
-- Name: trans_splice_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_splice_site AS
 SELECT feature.feature_id AS trans_splice_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((cvterm.name)::text = 'trans_splice_acceptor_site'::text) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text));


--
-- Name: trans_spliced; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_spliced AS
 SELECT feature.feature_id AS trans_spliced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_spliced'::text);


--
-- Name: trans_spliced_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_spliced_mrna AS
 SELECT feature.feature_id AS trans_spliced_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trans_spliced_mRNA'::text);


--
-- Name: trans_spliced_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trans_spliced_transcript AS
 SELECT feature.feature_id AS trans_spliced_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'trans_spliced_mRNA'::text) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text));


--
-- Name: transcribed_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcribed_cluster AS
 SELECT feature.feature_id AS transcribed_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'unigene_cluster'::text) OR ((cvterm.name)::text = 'transcribed_cluster'::text));


--
-- Name: transcribed_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcribed_fragment AS
 SELECT feature.feature_id AS transcribed_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcribed_fragment'::text);


--
-- Name: transcribed_spacer_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcribed_spacer_region AS
 SELECT feature.feature_id AS transcribed_spacer_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'internal_transcribed_spacer_region'::text) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text));


--
-- Name: transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript AS
 SELECT feature.feature_id AS transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'polycistronic_transcript'::text) OR ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text)) OR ((cvterm.name)::text = 'primary_transcript'::text)) OR ((cvterm.name)::text = 'mature_transcript'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text)) OR ((cvterm.name)::text = 'transcript_bound_by_protein'::text)) OR ((cvterm.name)::text = 'enzymatic_RNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_transcript'::text)) OR ((cvterm.name)::text = 'aberrant_processed_transcript'::text)) OR ((cvterm.name)::text = 'edited_transcript'::text)) OR ((cvterm.name)::text = 'processed_transcript'::text)) OR ((cvterm.name)::text = 'alternatively_spliced_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'protein_coding_primary_transcript'::text)) OR ((cvterm.name)::text = 'nc_primary_transcript'::text)) OR ((cvterm.name)::text = 'polycistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mini_exon_donor_RNA'::text)) OR ((cvterm.name)::text = 'antisense_primary_transcript'::text)) OR ((cvterm.name)::text = 'capped_primary_transcript'::text)) OR ((cvterm.name)::text = 'pre_edited_mRNA'::text)) OR ((cvterm.name)::text = 'scRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tmRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'SRP_RNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tasiRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_small_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_large_subunit_primary_transcript'::text)) OR ((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'stRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'dicistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'mRNA'::text)) OR ((cvterm.name)::text = 'ncRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_frameshift'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'exemplar_mRNA'::text)) OR ((cvterm.name)::text = 'capped_mRNA'::text)) OR ((cvterm.name)::text = 'polyadenylated_mRNA'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'consensus_mRNA'::text)) OR ((cvterm.name)::text = 'recoded_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_plus_2_frameshift'::text)) OR ((cvterm.name)::text = 'mRNA_with_minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'dicistronic_mRNA'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'mRNA_recoded_by_codon_redefinition'::text)) OR ((cvterm.name)::text = 'scRNA'::text)) OR ((cvterm.name)::text = 'rRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text)) OR ((cvterm.name)::text = 'snRNA'::text)) OR ((cvterm.name)::text = 'snoRNA'::text)) OR ((cvterm.name)::text = 'small_regulatory_ncRNA'::text)) OR ((cvterm.name)::text = 'RNase_MRP_RNA'::text)) OR ((cvterm.name)::text = 'RNase_P_RNA'::text)) OR ((cvterm.name)::text = 'telomerase_RNA'::text)) OR ((cvterm.name)::text = 'vault_RNA'::text)) OR ((cvterm.name)::text = 'Y_RNA'::text)) OR ((cvterm.name)::text = 'rasiRNA'::text)) OR ((cvterm.name)::text = 'SRP_RNA'::text)) OR ((cvterm.name)::text = 'guide_RNA'::text)) OR ((cvterm.name)::text = 'antisense_RNA'::text)) OR ((cvterm.name)::text = 'siRNA'::text)) OR ((cvterm.name)::text = 'stRNA'::text)) OR ((cvterm.name)::text = 'class_II_RNA'::text)) OR ((cvterm.name)::text = 'class_I_RNA'::text)) OR ((cvterm.name)::text = 'piRNA'::text)) OR ((cvterm.name)::text = 'lincRNA'::text)) OR ((cvterm.name)::text = 'tasiRNA'::text)) OR ((cvterm.name)::text = 'rRNA_cleavage_RNA'::text)) OR ((cvterm.name)::text = 'small_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'large_subunit_rRNA'::text)) OR ((cvterm.name)::text = 'rRNA_18S'::text)) OR ((cvterm.name)::text = 'rRNA_16S'::text)) OR ((cvterm.name)::text = 'rRNA_5_8S'::text)) OR ((cvterm.name)::text = 'rRNA_5S'::text)) OR ((cvterm.name)::text = 'rRNA_28S'::text)) OR ((cvterm.name)::text = 'rRNA_23S'::text)) OR ((cvterm.name)::text = 'rRNA_25S'::text)) OR ((cvterm.name)::text = 'rRNA_21S'::text)) OR ((cvterm.name)::text = 'alanyl_tRNA'::text)) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'U1_snRNA'::text)) OR ((cvterm.name)::text = 'U2_snRNA'::text)) OR ((cvterm.name)::text = 'U4_snRNA'::text)) OR ((cvterm.name)::text = 'U4atac_snRNA'::text)) OR ((cvterm.name)::text = 'U5_snRNA'::text)) OR ((cvterm.name)::text = 'U6_snRNA'::text)) OR ((cvterm.name)::text = 'U6atac_snRNA'::text)) OR ((cvterm.name)::text = 'U11_snRNA'::text)) OR ((cvterm.name)::text = 'U12_snRNA'::text)) OR ((cvterm.name)::text = 'C_D_box_snoRNA'::text)) OR ((cvterm.name)::text = 'H_ACA_box_snoRNA'::text)) OR ((cvterm.name)::text = 'U14_snoRNA'::text)) OR ((cvterm.name)::text = 'U3_snoRNA'::text)) OR ((cvterm.name)::text = 'methylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'pseudouridylation_guide_snoRNA'::text)) OR ((cvterm.name)::text = 'miRNA'::text)) OR ((cvterm.name)::text = 'RNA_6S'::text)) OR ((cvterm.name)::text = 'CsrB_RsmB_RNA'::text)) OR ((cvterm.name)::text = 'DsrA_RNA'::text)) OR ((cvterm.name)::text = 'OxyS_RNA'::text)) OR ((cvterm.name)::text = 'RprA_RNA'::text)) OR ((cvterm.name)::text = 'RRE_RNA'::text)) OR ((cvterm.name)::text = 'spot_42_RNA'::text)) OR ((cvterm.name)::text = 'tmRNA'::text)) OR ((cvterm.name)::text = 'GcvB_RNA'::text)) OR ((cvterm.name)::text = 'MicF_RNA'::text)) OR ((cvterm.name)::text = 'ribozyme'::text)) OR ((cvterm.name)::text = 'trans_spliced_mRNA'::text)) OR ((cvterm.name)::text = 'monocistronic_primary_transcript'::text)) OR ((cvterm.name)::text = 'monocistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_transcript_by_A_to_I_substitution'::text)) OR ((cvterm.name)::text = 'edited_mRNA'::text)) OR ((cvterm.name)::text = 'transcript'::text));


--
-- Name: transcript_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_attribute AS
 SELECT feature.feature_id AS transcript_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'edited'::text) OR ((cvterm.name)::text = 'capped'::text)) OR ((cvterm.name)::text = 'mRNA_attribute'::text)) OR ((cvterm.name)::text = 'trans_spliced'::text)) OR ((cvterm.name)::text = 'alternatively_spliced'::text)) OR ((cvterm.name)::text = 'monocistronic'::text)) OR ((cvterm.name)::text = 'polycistronic'::text)) OR ((cvterm.name)::text = 'polyadenylated'::text)) OR ((cvterm.name)::text = 'exemplar'::text)) OR ((cvterm.name)::text = 'frameshift'::text)) OR ((cvterm.name)::text = 'recoded'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_framshift'::text)) OR ((cvterm.name)::text = 'codon_redefined'::text)) OR ((cvterm.name)::text = 'recoded_by_translational_bypass'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'dicistronic'::text)) OR ((cvterm.name)::text = 'transcript_attribute'::text));


--
-- Name: transcript_bound_by_nucleic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_bound_by_nucleic_acid AS
 SELECT feature.feature_id AS transcript_bound_by_nucleic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_bound_by_nucleic_acid'::text);


--
-- Name: transcript_bound_by_protein; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_bound_by_protein AS
 SELECT feature.feature_id AS transcript_bound_by_protein_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_bound_by_protein'::text);


--
-- Name: transcript_function_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_function_variant AS
 SELECT feature.feature_id AS transcript_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'level_of_transcript_variant'::text) OR ((cvterm.name)::text = 'transcript_processing_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_level_variant'::text)) OR ((cvterm.name)::text = 'editing_variant'::text)) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'rate_of_transcription_variant'::text)) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'transcript_function_variant'::text));


--
-- Name: transcript_processing_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_processing_variant AS
 SELECT feature.feature_id AS transcript_processing_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'editing_variant'::text) OR ((cvterm.name)::text = 'polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'increased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'decreased_polyadenylation_variant'::text)) OR ((cvterm.name)::text = 'transcript_processing_variant'::text));


--
-- Name: transcript_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_region AS
 SELECT feature.feature_id AS transcript_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'exon'::text) OR ((cvterm.name)::text = 'edited_transcript_feature'::text)) OR ((cvterm.name)::text = 'mature_transcript_region'::text)) OR ((cvterm.name)::text = 'primary_transcript_region'::text)) OR ((cvterm.name)::text = 'exon_region'::text)) OR ((cvterm.name)::text = 'anchor_binding_site'::text)) OR ((cvterm.name)::text = 'coding_exon'::text)) OR ((cvterm.name)::text = 'noncoding_exon'::text)) OR ((cvterm.name)::text = 'interior_exon'::text)) OR ((cvterm.name)::text = 'exon_of_single_exon_gene'::text)) OR ((cvterm.name)::text = 'interior_coding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon'::text)) OR ((cvterm.name)::text = 'three_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'five_prime_noncoding_exon'::text)) OR ((cvterm.name)::text = 'pre_edited_region'::text)) OR ((cvterm.name)::text = 'editing_block'::text)) OR ((cvterm.name)::text = 'editing_domain'::text)) OR ((cvterm.name)::text = 'unedited_region'::text)) OR ((cvterm.name)::text = 'mRNA_region'::text)) OR ((cvterm.name)::text = 'tmRNA_region'::text)) OR ((cvterm.name)::text = 'guide_RNA_region'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text)) OR ((cvterm.name)::text = 'riboswitch'::text)) OR ((cvterm.name)::text = 'ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'UTR'::text)) OR ((cvterm.name)::text = 'CDS'::text)) OR ((cvterm.name)::text = 'five_prime_open_reading_frame'::text)) OR ((cvterm.name)::text = 'UTR_region'::text)) OR ((cvterm.name)::text = 'CDS_region'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text)) OR ((cvterm.name)::text = 'recoding_stimulatory_region'::text)) OR ((cvterm.name)::text = 'internal_ribosome_entry_site'::text)) OR ((cvterm.name)::text = 'Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'kozak_sequence'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'five_prime_UTR'::text)) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'edited_CDS'::text)) OR ((cvterm.name)::text = 'CDS_fragment'::text)) OR ((cvterm.name)::text = 'CDS_independently_known'::text)) OR ((cvterm.name)::text = 'CDS_predicted'::text)) OR ((cvterm.name)::text = 'orphan_CDS'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_sequence_similarity_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_domain_match_data'::text)) OR ((cvterm.name)::text = 'CDS_supported_by_EST_or_cDNA_data'::text)) OR ((cvterm.name)::text = 'upstream_AUG_codon'::text)) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'coding_start'::text)) OR ((cvterm.name)::text = 'coding_end'::text)) OR ((cvterm.name)::text = 'codon'::text)) OR ((cvterm.name)::text = 'recoded_codon'::text)) OR ((cvterm.name)::text = 'start_codon'::text)) OR ((cvterm.name)::text = 'stop_codon'::text)) OR ((cvterm.name)::text = 'stop_codon_read_through'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_pyrrolysine'::text)) OR ((cvterm.name)::text = 'stop_codon_redefined_as_selenocysteine'::text)) OR ((cvterm.name)::text = 'non_canonical_start_codon'::text)) OR ((cvterm.name)::text = 'four_bp_start_codon'::text)) OR ((cvterm.name)::text = 'CTG_start_codon'::text)) OR ((cvterm.name)::text = 'plus_1_translational_frameshift'::text)) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'internal_Shine_Dalgarno_sequence'::text)) OR ((cvterm.name)::text = 'SECIS_element'::text)) OR ((cvterm.name)::text = 'three_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'five_prime_recoding_site'::text)) OR ((cvterm.name)::text = 'stop_codon_signal'::text)) OR ((cvterm.name)::text = 'three_prime_stem_loop_structure'::text)) OR ((cvterm.name)::text = 'flanking_three_prime_quadruplet_recoding_signal'::text)) OR ((cvterm.name)::text = 'three_prime_repeat_recoding_signal'::text)) OR ((cvterm.name)::text = 'distant_three_prime_recoding_signal'::text)) OR ((cvterm.name)::text = 'UAG_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UAA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'UGA_stop_codon_signal'::text)) OR ((cvterm.name)::text = 'tmRNA_coding_piece'::text)) OR ((cvterm.name)::text = 'tmRNA_acceptor_piece'::text)) OR ((cvterm.name)::text = 'anchor_region'::text)) OR ((cvterm.name)::text = 'template_region'::text)) OR ((cvterm.name)::text = 'anticodon_loop'::text)) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'splice_site'::text)) OR ((cvterm.name)::text = 'intron'::text)) OR ((cvterm.name)::text = 'clip'::text)) OR ((cvterm.name)::text = 'TSS'::text)) OR ((cvterm.name)::text = 'transcription_end_site'::text)) OR ((cvterm.name)::text = 'spliced_leader_RNA'::text)) OR ((cvterm.name)::text = 'rRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron_region'::text)) OR ((cvterm.name)::text = 'intron_domain'::text)) OR ((cvterm.name)::text = 'miRNA_primary_transcript_region'::text)) OR ((cvterm.name)::text = 'outron'::text)) OR ((cvterm.name)::text = 'cis_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_site'::text)) OR ((cvterm.name)::text = 'cryptic_splice_site'::text)) OR ((cvterm.name)::text = 'five_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'three_prime_cis_splice_site'::text)) OR ((cvterm.name)::text = 'recursive_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_five_prime_splice_site'::text)) OR ((cvterm.name)::text = 'canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'non_canonical_three_prime_splice_site'::text)) OR ((cvterm.name)::text = 'trans_splice_acceptor_site'::text)) OR ((cvterm.name)::text = 'trans_splice_donor_site'::text)) OR ((cvterm.name)::text = 'SL1_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL2_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL3_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL4_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL5_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL6_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL7_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL8_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL9_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL10_accceptor_site'::text)) OR ((cvterm.name)::text = 'SL11_acceptor_site'::text)) OR ((cvterm.name)::text = 'SL12_acceptor_site'::text)) OR ((cvterm.name)::text = 'five_prime_intron'::text)) OR ((cvterm.name)::text = 'interior_intron'::text)) OR ((cvterm.name)::text = 'three_prime_intron'::text)) OR ((cvterm.name)::text = 'twintron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text)) OR ((cvterm.name)::text = 'autocatalytically_spliced_intron'::text)) OR ((cvterm.name)::text = 'spliceosomal_intron'::text)) OR ((cvterm.name)::text = 'mobile_intron'::text)) OR ((cvterm.name)::text = 'endonuclease_spliced_intron'::text)) OR ((cvterm.name)::text = 'five_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'group_I_intron'::text)) OR ((cvterm.name)::text = 'group_II_intron'::text)) OR ((cvterm.name)::text = 'group_III_intron'::text)) OR ((cvterm.name)::text = 'group_IIA_intron'::text)) OR ((cvterm.name)::text = 'group_IIB_intron'::text)) OR ((cvterm.name)::text = 'U2_intron'::text)) OR ((cvterm.name)::text = 'U12_intron'::text)) OR ((cvterm.name)::text = 'archaeal_intron'::text)) OR ((cvterm.name)::text = 'tRNA_intron'::text)) OR ((cvterm.name)::text = 'five_prime_clip'::text)) OR ((cvterm.name)::text = 'three_prime_clip'::text)) OR ((cvterm.name)::text = 'major_TSS'::text)) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'internal_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'external_transcribed_spacer_region'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'branch_site'::text)) OR ((cvterm.name)::text = 'polypyrimidine_tract'::text)) OR ((cvterm.name)::text = 'internal_guide_sequence'::text)) OR ((cvterm.name)::text = 'mirtron'::text)) OR ((cvterm.name)::text = 'pre_miRNA'::text)) OR ((cvterm.name)::text = 'miRNA_stem'::text)) OR ((cvterm.name)::text = 'miRNA_loop'::text)) OR ((cvterm.name)::text = 'miRNA_antiguide'::text)) OR ((cvterm.name)::text = 'noncoding_region_of_exon'::text)) OR ((cvterm.name)::text = 'coding_region_of_exon'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_noncoding_region'::text)) OR ((cvterm.name)::text = 'five_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'three_prime_coding_exon_coding_region'::text)) OR ((cvterm.name)::text = 'transcript_region'::text));


--
-- Name: transcript_secondary_structure_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_secondary_structure_variant AS
 SELECT feature.feature_id AS transcript_secondary_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text));


--
-- Name: transcript_stability_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_stability_variant AS
 SELECT feature.feature_id AS transcript_stability_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'decreased_transcript_stability_variant'::text) OR ((cvterm.name)::text = 'increased_transcript_stability_variant'::text)) OR ((cvterm.name)::text = 'transcript_stability_variant'::text));


--
-- Name: transcript_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_variant AS
 SELECT feature.feature_id AS transcript_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'complex_change_in_transcript'::text) OR ((cvterm.name)::text = 'transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'nc_transcript_variant'::text)) OR ((cvterm.name)::text = 'NMD_transcript_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text)) OR ((cvterm.name)::text = 'intron_variant'::text)) OR ((cvterm.name)::text = 'exon_variant'::text)) OR ((cvterm.name)::text = 'compensatory_transcript_secondary_structure_variant'::text)) OR ((cvterm.name)::text = 'mature_miRNA_variant'::text)) OR ((cvterm.name)::text = '5_prime_UTR_variant'::text)) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'splice_site_variant'::text)) OR ((cvterm.name)::text = 'splice_acceptor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_variant'::text)) OR ((cvterm.name)::text = 'splice_donor_5th_base_variant'::text)) OR ((cvterm.name)::text = 'coding_sequence_variant'::text)) OR ((cvterm.name)::text = 'non_coding_exon_variant'::text)) OR ((cvterm.name)::text = 'codon_variant'::text)) OR ((cvterm.name)::text = 'frameshift_variant'::text)) OR ((cvterm.name)::text = 'inframe_variant'::text)) OR ((cvterm.name)::text = 'initiator_codon_change'::text)) OR ((cvterm.name)::text = 'non_synonymous_codon'::text)) OR ((cvterm.name)::text = 'synonymous_codon'::text)) OR ((cvterm.name)::text = 'terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_gained'::text)) OR ((cvterm.name)::text = 'missense_codon'::text)) OR ((cvterm.name)::text = 'conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'non_conservative_missense_codon'::text)) OR ((cvterm.name)::text = 'terminator_codon_variant'::text)) OR ((cvterm.name)::text = 'incomplete_terminal_codon_variant'::text)) OR ((cvterm.name)::text = 'stop_retained_variant'::text)) OR ((cvterm.name)::text = 'stop_lost'::text)) OR ((cvterm.name)::text = 'frame_restoring_variant'::text)) OR ((cvterm.name)::text = 'minus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'minus_2_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_1_frameshift_variant'::text)) OR ((cvterm.name)::text = 'plus_2_frameshift variant'::text)) OR ((cvterm.name)::text = 'inframe_codon_gain'::text)) OR ((cvterm.name)::text = 'inframe_codon_loss'::text)) OR ((cvterm.name)::text = 'transcript_variant'::text));


--
-- Name: transcript_with_translational_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcript_with_translational_frameshift AS
 SELECT feature.feature_id AS transcript_with_translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcript_with_translational_frameshift'::text);


--
-- Name: transcription_end_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcription_end_site AS
 SELECT feature.feature_id AS transcription_end_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcription_end_site'::text);


--
-- Name: transcription_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcription_regulatory_region AS
 SELECT feature.feature_id AS transcription_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'terminator'::text) OR ((cvterm.name)::text = 'TF_binding_site'::text)) OR ((cvterm.name)::text = 'polyA_signal_sequence'::text)) OR ((cvterm.name)::text = 'gene_group_regulatory_region'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text)) OR ((cvterm.name)::text = 'splicing_regulatory_region'::text)) OR ((cvterm.name)::text = 'cis_regulatory_frameshift_element'::text)) OR ((cvterm.name)::text = 'intronic_regulatory_region'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'eukaryotic_terminator'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'terminator_of_type_2_RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'operator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_terminator'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'rho_dependent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'rho_independent_bacterial_terminator'::text)) OR ((cvterm.name)::text = 'promoter'::text)) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'splice_enhancer'::text)) OR ((cvterm.name)::text = 'intronic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'exonic_splice_enhancer'::text)) OR ((cvterm.name)::text = 'transcription_regulatory_region'::text));


--
-- Name: transcription_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcription_variant AS
 SELECT feature.feature_id AS transcription_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((cvterm.name)::text = 'rate_of_transcription_variant'::text) OR ((cvterm.name)::text = 'increased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'decreased_transcription_rate_variant'::text)) OR ((cvterm.name)::text = 'transcription_variant'::text));


--
-- Name: transcriptional_cis_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcriptional_cis_regulatory_region AS
 SELECT feature.feature_id AS transcriptional_cis_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((((((cvterm.name)::text = 'promoter'::text) OR ((cvterm.name)::text = 'insulator'::text)) OR ((cvterm.name)::text = 'CRM'::text)) OR ((cvterm.name)::text = 'promoter_targeting_sequence'::text)) OR ((cvterm.name)::text = 'ISRE'::text)) OR ((cvterm.name)::text = 'bidirectional_promoter'::text)) OR ((cvterm.name)::text = 'RNA_polymerase_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_I_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter'::text)) OR ((cvterm.name)::text = 'Phage_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'RNApol_II_core_promoter'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_1'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_2'::text)) OR ((cvterm.name)::text = 'RNApol_III_promoter_type_3'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma_70'::text)) OR ((cvterm.name)::text = 'bacterial_RNApol_promoter_sigma54'::text)) OR ((cvterm.name)::text = 'SP6_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T3_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'T7_RNA_Polymerase_Promoter'::text)) OR ((cvterm.name)::text = 'locus_control_region'::text)) OR ((cvterm.name)::text = 'enhancer'::text)) OR ((cvterm.name)::text = 'silencer'::text)) OR ((cvterm.name)::text = 'enhancer_bound_by_factor'::text)) OR ((cvterm.name)::text = 'shadow_enhancer'::text)) OR ((cvterm.name)::text = 'transcriptional_cis_regulatory_region'::text));


--
-- Name: transcriptionally_constitutive; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcriptionally_constitutive AS
 SELECT feature.feature_id AS transcriptionally_constitutive_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transcriptionally_constitutive'::text);


--
-- Name: transcriptionally_induced; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcriptionally_induced AS
 SELECT feature.feature_id AS transcriptionally_induced_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'positively_autoregulated'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text));


--
-- Name: transcriptionally_regulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcriptionally_regulated AS
 SELECT feature.feature_id AS transcriptionally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'transcriptionally_constitutive'::text) OR ((cvterm.name)::text = 'transcriptionally_induced'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text)) OR ((cvterm.name)::text = 'autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'negatively_autoregulated'::text)) OR ((cvterm.name)::text = 'positively_autoregulated'::text)) OR ((cvterm.name)::text = 'transcriptionally_regulated'::text));


--
-- Name: transcriptionally_repressed; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transcriptionally_repressed AS
 SELECT feature.feature_id AS transcriptionally_repressed_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((cvterm.name)::text = 'negatively_autoregulated'::text) OR ((cvterm.name)::text = 'silenced'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_RNA_interference'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_modification'::text)) OR ((cvterm.name)::text = 'silenced_by_DNA_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_methylation'::text)) OR ((cvterm.name)::text = 'silenced_by_histone_deacetylation'::text)) OR ((cvterm.name)::text = 'transcriptionally_repressed'::text));


--
-- Name: transgene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transgene AS
 SELECT feature.feature_id AS transgene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'floxed_gene'::text) OR ((cvterm.name)::text = 'transgene'::text));


--
-- Name: transgenic; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transgenic AS
 SELECT feature.feature_id AS transgenic_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic'::text);


--
-- Name: transgenic_insertion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transgenic_insertion AS
 SELECT feature.feature_id AS transgenic_insertion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic_insertion'::text);


--
-- Name: transgenic_transposable_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transgenic_transposable_element AS
 SELECT feature.feature_id AS transgenic_transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transgenic_transposable_element'::text);


--
-- Name: transit_peptide; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transit_peptide AS
 SELECT feature.feature_id AS transit_peptide_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transit_peptide'::text);


--
-- Name: transition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transition AS
 SELECT feature.feature_id AS transition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'pyrimidine_transition'::text) OR ((cvterm.name)::text = 'purine_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition'::text)) OR ((cvterm.name)::text = 'T_to_C_transition'::text)) OR ((cvterm.name)::text = 'C_to_T_transition_at_pCpG_site'::text)) OR ((cvterm.name)::text = 'A_to_G_transition'::text)) OR ((cvterm.name)::text = 'G_to_A_transition'::text)) OR ((cvterm.name)::text = 'transition'::text));


--
-- Name: translated_nucleotide_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translated_nucleotide_match AS
 SELECT feature.feature_id AS translated_nucleotide_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translated_nucleotide_match'::text);


--
-- Name: translation_regulatory_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translation_regulatory_region AS
 SELECT feature.feature_id AS translation_regulatory_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'attenuator'::text) OR ((cvterm.name)::text = 'translation_regulatory_region'::text));


--
-- Name: translational_frameshift; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translational_frameshift AS
 SELECT feature.feature_id AS translational_frameshift_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'plus_1_translational_frameshift'::text) OR ((cvterm.name)::text = 'plus_2_translational_frameshift'::text)) OR ((cvterm.name)::text = 'translational_frameshift'::text));


--
-- Name: translational_product_function_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translational_product_function_variant AS
 SELECT feature.feature_id AS translational_product_function_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((cvterm.name)::text = 'translational_product_level_variant'::text) OR ((cvterm.name)::text = 'polypeptide_function_variant'::text)) OR ((cvterm.name)::text = 'decreased_translational_product_level'::text)) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'polypeptide_gain_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_localization_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_loss_of_function_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_post_translational_processing_variant'::text)) OR ((cvterm.name)::text = 'inactive_ligand_binding_site'::text)) OR ((cvterm.name)::text = 'polypeptide_partial_loss_of_function'::text)) OR ((cvterm.name)::text = 'inactive_catalytic_site'::text)) OR ((cvterm.name)::text = 'translational_product_function_variant'::text));


--
-- Name: translational_product_level_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translational_product_level_variant AS
 SELECT feature.feature_id AS translational_product_level_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'decreased_translational_product_level'::text) OR ((cvterm.name)::text = 'increased_translational_product_level'::text)) OR ((cvterm.name)::text = 'translational_product_level_variant'::text));


--
-- Name: translational_product_structure_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translational_product_structure_variant AS
 SELECT feature.feature_id AS translational_product_structure_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((cvterm.name)::text = '3D_polypeptide_structure_variant'::text) OR ((cvterm.name)::text = 'complex_change_of_translational_product_variant'::text)) OR ((cvterm.name)::text = 'polypeptide_sequence_variant'::text)) OR ((cvterm.name)::text = 'complex_3D_structural_variant'::text)) OR ((cvterm.name)::text = 'conformational_change_variant'::text)) OR ((cvterm.name)::text = 'amino_acid_deletion'::text)) OR ((cvterm.name)::text = 'amino_acid_insertion'::text)) OR ((cvterm.name)::text = 'amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide'::text)) OR ((cvterm.name)::text = 'polypeptide_fusion'::text)) OR ((cvterm.name)::text = 'polypeptide_truncation'::text)) OR ((cvterm.name)::text = 'conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'non_conservative_amino_acid_substitution'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_C_terminal'::text)) OR ((cvterm.name)::text = 'elongated_in_frame_polypeptide_N_terminal_elongation'::text)) OR ((cvterm.name)::text = 'elongated_out_of_frame_polypeptide_N_terminal'::text)) OR ((cvterm.name)::text = 'translational_product_structure_variant'::text));


--
-- Name: translationally_frameshifted; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translationally_frameshifted AS
 SELECT feature.feature_id AS translationally_frameshifted_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'minus_1_translationally_frameshifted'::text) OR ((cvterm.name)::text = 'plus_1_translationally_frameshifted'::text)) OR ((cvterm.name)::text = 'translationally_frameshifted'::text));


--
-- Name: translationally_regulated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translationally_regulated AS
 SELECT feature.feature_id AS translationally_regulated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translationally_regulated'::text);


--
-- Name: translationally_regulated_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translationally_regulated_gene AS
 SELECT feature.feature_id AS translationally_regulated_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translationally_regulated_gene'::text);


--
-- Name: translocation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translocation AS
 SELECT feature.feature_id AS translocation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation'::text);


--
-- Name: translocation_breakpoint; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translocation_breakpoint AS
 SELECT feature.feature_id AS translocation_breakpoint_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation_breakpoint'::text);


--
-- Name: translocation_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translocation_element AS
 SELECT feature.feature_id AS translocation_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'translocation_element'::text);


--
-- Name: translocaton_attribute; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW translocaton_attribute AS
 SELECT feature.feature_id AS translocaton_attribute_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'reciprocal'::text) OR ((cvterm.name)::text = 'insertional'::text)) OR ((cvterm.name)::text = 'translocaton_attribute'::text));


--
-- Name: transmembrane_polypeptide_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transmembrane_polypeptide_region AS
 SELECT feature.feature_id AS transmembrane_polypeptide_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transmembrane_polypeptide_region'::text);


--
-- Name: transposable_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transposable_element AS
 SELECT feature.feature_id AS transposable_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((cvterm.name)::text = 'retrotransposon'::text) OR ((cvterm.name)::text = 'DNA_transposon'::text)) OR ((cvterm.name)::text = 'foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transgenic_transposable_element'::text)) OR ((cvterm.name)::text = 'natural_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_transposable_element'::text)) OR ((cvterm.name)::text = 'nested_transposon'::text)) OR ((cvterm.name)::text = 'LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'non_LTR_retrotransposon'::text)) OR ((cvterm.name)::text = 'LINE_element'::text)) OR ((cvterm.name)::text = 'SINE_element'::text)) OR ((cvterm.name)::text = 'terminal_inverted_repeat_element'::text)) OR ((cvterm.name)::text = 'foldback_element'::text)) OR ((cvterm.name)::text = 'conjugative_transposon'::text)) OR ((cvterm.name)::text = 'helitron'::text)) OR ((cvterm.name)::text = 'p_element'::text)) OR ((cvterm.name)::text = 'MITE'::text)) OR ((cvterm.name)::text = 'insertion_sequence'::text)) OR ((cvterm.name)::text = 'polinton'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'engineered_foreign_transposable_element'::text)) OR ((cvterm.name)::text = 'transposable_element'::text));


--
-- Name: transposable_element_flanking_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transposable_element_flanking_region AS
 SELECT feature.feature_id AS transposable_element_flanking_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposable_element_flanking_region'::text);


--
-- Name: transposable_element_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transposable_element_gene AS
 SELECT feature.feature_id AS transposable_element_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'engineered_foreign_transposable_element_gene'::text) OR ((cvterm.name)::text = 'transposable_element_gene'::text));


--
-- Name: transposable_element_insertion_site; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transposable_element_insertion_site AS
 SELECT feature.feature_id AS transposable_element_insertion_site_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposable_element_insertion_site'::text);


--
-- Name: transposon_fragment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transposon_fragment AS
 SELECT feature.feature_id AS transposon_fragment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'transposon_fragment'::text);


--
-- Name: transversion; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW transversion AS
 SELECT feature.feature_id AS transversion_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((cvterm.name)::text = 'pyrimidine_to_purine_transversion'::text) OR ((cvterm.name)::text = 'purine_to_pyrimidine_transversion'::text)) OR ((cvterm.name)::text = 'C_to_A_transversion'::text)) OR ((cvterm.name)::text = 'C_to_G_transversion'::text)) OR ((cvterm.name)::text = 'T_to_A_transversion'::text)) OR ((cvterm.name)::text = 'T_to_G_transversion'::text)) OR ((cvterm.name)::text = 'A_to_C_transversion'::text)) OR ((cvterm.name)::text = 'A_to_T_transversion'::text)) OR ((cvterm.name)::text = 'G_to_C_transversion'::text)) OR ((cvterm.name)::text = 'G_to_T_transversion'::text)) OR ((cvterm.name)::text = 'transversion'::text));


--
-- Name: trinuc_repeat_microsat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trinuc_repeat_microsat AS
 SELECT feature.feature_id AS trinuc_repeat_microsat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'trinucleotide_repeat_microsatellite_feature'::text);


--
-- Name: trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trna AS
 SELECT feature.feature_id AS trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'alanyl_tRNA'::text) OR ((cvterm.name)::text = 'asparaginyl_tRNA'::text)) OR ((cvterm.name)::text = 'aspartyl_tRNA'::text)) OR ((cvterm.name)::text = 'cysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutaminyl_tRNA'::text)) OR ((cvterm.name)::text = 'glutamyl_tRNA'::text)) OR ((cvterm.name)::text = 'glycyl_tRNA'::text)) OR ((cvterm.name)::text = 'histidyl_tRNA'::text)) OR ((cvterm.name)::text = 'isoleucyl_tRNA'::text)) OR ((cvterm.name)::text = 'leucyl_tRNA'::text)) OR ((cvterm.name)::text = 'lysyl_tRNA'::text)) OR ((cvterm.name)::text = 'methionyl_tRNA'::text)) OR ((cvterm.name)::text = 'phenylalanyl_tRNA'::text)) OR ((cvterm.name)::text = 'prolyl_tRNA'::text)) OR ((cvterm.name)::text = 'seryl_tRNA'::text)) OR ((cvterm.name)::text = 'threonyl_tRNA'::text)) OR ((cvterm.name)::text = 'tryptophanyl_tRNA'::text)) OR ((cvterm.name)::text = 'tyrosyl_tRNA'::text)) OR ((cvterm.name)::text = 'valyl_tRNA'::text)) OR ((cvterm.name)::text = 'pyrrolysyl_tRNA'::text)) OR ((cvterm.name)::text = 'arginyl_tRNA'::text)) OR ((cvterm.name)::text = 'selenocysteinyl_tRNA'::text)) OR ((cvterm.name)::text = 'tRNA'::text));


--
-- Name: trna_encoding; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trna_encoding AS
 SELECT feature.feature_id AS trna_encoding_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_encoding'::text);


--
-- Name: trna_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trna_gene AS
 SELECT feature.feature_id AS trna_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_gene'::text);


--
-- Name: trna_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trna_intron AS
 SELECT feature.feature_id AS trna_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tRNA_intron'::text);


--
-- Name: trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trna_primary_transcript AS
 SELECT feature.feature_id AS trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((((cvterm.name)::text = 'alanine_tRNA_primary_transcript'::text) OR ((cvterm.name)::text = 'arginine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'asparagine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'aspartic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'cysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamic_acid_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glutamine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'glycine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'histidine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'isoleucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'leucine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'lysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'methionine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'phenylalanine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'proline_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'serine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'threonine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'pyrrolysine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'selenocysteine_tRNA_primary_transcript'::text)) OR ((cvterm.name)::text = 'tRNA_primary_transcript'::text));


--
-- Name: trna_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW trna_region AS
 SELECT feature.feature_id AS trna_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'anticodon_loop'::text) OR ((cvterm.name)::text = 'anticodon'::text)) OR ((cvterm.name)::text = 'CCA_tail'::text)) OR ((cvterm.name)::text = 'DHU_loop'::text)) OR ((cvterm.name)::text = 'T_loop'::text)) OR ((cvterm.name)::text = 'tRNA_region'::text));


--
-- Name: try_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW try_trna_primary_transcript AS
 SELECT feature.feature_id AS try_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophan_tRNA_primary_transcript'::text);


--
-- Name: tryptophan; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tryptophan AS
 SELECT feature.feature_id AS tryptophan_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophan'::text);


--
-- Name: tryptophanyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tryptophanyl_trna AS
 SELECT feature.feature_id AS tryptophanyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tryptophanyl_tRNA'::text);


--
-- Name: tss; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tss AS
 SELECT feature.feature_id AS tss_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'major_TSS'::text) OR ((cvterm.name)::text = 'minor_TSS'::text)) OR ((cvterm.name)::text = 'TSS'::text));


--
-- Name: tss_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tss_region AS
 SELECT feature.feature_id AS tss_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'TSS_region'::text);


--
-- Name: twintron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW twintron AS
 SELECT feature.feature_id AS twintron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'twintron'::text);


--
-- Name: two_methyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_methyladenosine AS
 SELECT feature.feature_id AS two_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methyladenosine'::text);


--
-- Name: two_methylthio_n6_cis_hydroxyisopentenyl_adenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_methylthio_n6_cis_hydroxyisopentenyl_adenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_cis_hydroxyisopentenyl_adenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_cis_hydroxyisopentenyl_adenosine'::text);


--
-- Name: two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_hydroxynorvalyl_carbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_hydroxynorvalyl_carbamoyladenosine'::text);


--
-- Name: two_methylthio_n6_isopentenyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_methylthio_n6_isopentenyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_isopentenyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_isopentenyladenosine'::text);


--
-- Name: two_methylthio_n6_methyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_methylthio_n6_methyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_methyladenosine'::text);


--
-- Name: two_methylthio_n6_threonyl_carbamoyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_methylthio_n6_threonyl_carbamoyladenosine AS
 SELECT feature.feature_id AS two_methylthio_n6_threonyl_carbamoyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_methylthio_N6_threonyl_carbamoyladenosine'::text);


--
-- Name: two_prime_o_methyladenosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_methyladenosine AS
 SELECT feature.feature_id AS two_prime_o_methyladenosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methyladenosine'::text);


--
-- Name: two_prime_o_methylcytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_methylcytidine AS
 SELECT feature.feature_id AS two_prime_o_methylcytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylcytidine'::text);


--
-- Name: two_prime_o_methylguanosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_methylguanosine AS
 SELECT feature.feature_id AS two_prime_o_methylguanosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylguanosine'::text);


--
-- Name: two_prime_o_methylinosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_methylinosine AS
 SELECT feature.feature_id AS two_prime_o_methylinosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylinosine'::text);


--
-- Name: two_prime_o_methylpseudouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_methylpseudouridine AS
 SELECT feature.feature_id AS two_prime_o_methylpseudouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methylpseudouridine'::text);


--
-- Name: two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_methyluridine AS
 SELECT feature.feature_id AS two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_methyluridine'::text);


--
-- Name: two_prime_o_riboa_phosphate; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_riboa_phosphate AS
 SELECT feature.feature_id AS two_prime_o_riboa_phosphate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_ribosyladenosine_phosphate'::text);


--
-- Name: two_prime_o_ribosylguanosine_phosphate; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_prime_o_ribosylguanosine_phosphate AS
 SELECT feature.feature_id AS two_prime_o_ribosylguanosine_phosphate_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_prime_O_ribosylguanosine_phosphate'::text);


--
-- Name: two_thio_two_prime_o_methyluridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_thio_two_prime_o_methyluridine AS
 SELECT feature.feature_id AS two_thio_two_prime_o_methyluridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thio_two_prime_O_methyluridine'::text);


--
-- Name: two_thiocytidine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_thiocytidine AS
 SELECT feature.feature_id AS two_thiocytidine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thiocytidine'::text);


--
-- Name: two_thiouridine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW two_thiouridine AS
 SELECT feature.feature_id AS two_thiouridine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'two_thiouridine'::text);


--
-- Name: twokb_upstream_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW twokb_upstream_variant AS
 SELECT feature.feature_id AS twokb_upstream_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = '2KB_upstream_variant'::text);


--
-- Name: tyrosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tyrosine AS
 SELECT feature.feature_id AS tyrosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosine'::text);


--
-- Name: tyrosine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tyrosine_trna_primary_transcript AS
 SELECT feature.feature_id AS tyrosine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosine_tRNA_primary_transcript'::text);


--
-- Name: tyrosyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW tyrosyl_trna AS
 SELECT feature.feature_id AS tyrosyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'tyrosyl_tRNA'::text);


--
-- Name: u11_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u11_snrna AS
 SELECT feature.feature_id AS u11_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U11_snRNA'::text);


--
-- Name: u12_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u12_intron AS
 SELECT feature.feature_id AS u12_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U12_intron'::text);


--
-- Name: u12_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u12_snrna AS
 SELECT feature.feature_id AS u12_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U12_snRNA'::text);


--
-- Name: u14_snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u14_snorna AS
 SELECT feature.feature_id AS u14_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U14_snoRNA'::text);


--
-- Name: u14_snorna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u14_snorna_primary_transcript AS
 SELECT feature.feature_id AS u14_snorna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U14_snoRNA_primary_transcript'::text);


--
-- Name: u1_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u1_snrna AS
 SELECT feature.feature_id AS u1_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U1_snRNA'::text);


--
-- Name: u2_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u2_intron AS
 SELECT feature.feature_id AS u2_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U2_intron'::text);


--
-- Name: u2_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u2_snrna AS
 SELECT feature.feature_id AS u2_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U2_snRNA'::text);


--
-- Name: u3_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u3_five_prime_ltr_region AS
 SELECT feature.feature_id AS u3_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_five_prime_LTR_region'::text);


--
-- Name: u3_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u3_ltr_region AS
 SELECT feature.feature_id AS u3_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U3_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U3_LTR_region'::text));


--
-- Name: u3_snorna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u3_snorna AS
 SELECT feature.feature_id AS u3_snorna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_snoRNA'::text);


--
-- Name: u3_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u3_three_prime_ltr_region AS
 SELECT feature.feature_id AS u3_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U3_three_prime_LTR_region'::text);


--
-- Name: u4_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u4_snrna AS
 SELECT feature.feature_id AS u4_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U4_snRNA'::text);


--
-- Name: u4atac_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u4atac_snrna AS
 SELECT feature.feature_id AS u4atac_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U4atac_snRNA'::text);


--
-- Name: u5_five_prime_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u5_five_prime_ltr_region AS
 SELECT feature.feature_id AS u5_five_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_five_prime_LTR_region'::text);


--
-- Name: u5_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u5_ltr_region AS
 SELECT feature.feature_id AS u5_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'U5_five_prime_LTR_region'::text) OR ((cvterm.name)::text = 'U5_LTR_region'::text));


--
-- Name: u5_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u5_snrna AS
 SELECT feature.feature_id AS u5_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_snRNA'::text);


--
-- Name: u5_three_prime_ltr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u5_three_prime_ltr_region AS
 SELECT feature.feature_id AS u5_three_prime_ltr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U5_three_prime_LTR_region'::text);


--
-- Name: u6_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u6_snrna AS
 SELECT feature.feature_id AS u6_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U6_snRNA'::text);


--
-- Name: u6atac_snrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u6atac_snrna AS
 SELECT feature.feature_id AS u6atac_snrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U6atac_snRNA'::text);


--
-- Name: u_box; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW u_box AS
 SELECT feature.feature_id AS u_box_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'U_box'::text);


--
-- Name: uaa_stop_codon_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uaa_stop_codon_signal AS
 SELECT feature.feature_id AS uaa_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UAA_stop_codon_signal'::text);


--
-- Name: uag_stop_codon_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uag_stop_codon_signal AS
 SELECT feature.feature_id AS uag_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UAG_stop_codon_signal'::text);


--
-- Name: uga_stop_codon_signal; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uga_stop_codon_signal AS
 SELECT feature.feature_id AS uga_stop_codon_signal_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UGA_stop_codon_signal'::text);


--
-- Name: ultracontig; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ultracontig AS
 SELECT feature.feature_id AS ultracontig_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'ultracontig'::text);


--
-- Name: uncharacterised_chromosomal_mutation; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uncharacterised_chromosomal_mutation AS
 SELECT feature.feature_id AS uncharacterised_chromosomal_mutation_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text));


--
-- Name: undermodified_hydroxywybutosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW undermodified_hydroxywybutosine AS
 SELECT feature.feature_id AS undermodified_hydroxywybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'undermodified_hydroxywybutosine'::text);


--
-- Name: unedited_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unedited_region AS
 SELECT feature.feature_id AS unedited_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unedited_region'::text);


--
-- Name: unigene_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unigene_cluster AS
 SELECT feature.feature_id AS unigene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unigene_cluster'::text);


--
-- Name: uninvert_insert_dup; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uninvert_insert_dup AS
 SELECT feature.feature_id AS uninvert_insert_dup_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_insertional_duplication'::text);


--
-- Name: uninvert_inter_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uninvert_inter_transposition AS
 SELECT feature.feature_id AS uninvert_inter_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text);


--
-- Name: uninvert_intra_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uninvert_intra_transposition AS
 SELECT feature.feature_id AS uninvert_intra_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text);


--
-- Name: unique_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unique_variant AS
 SELECT feature.feature_id AS unique_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unique_variant'::text);


--
-- Name: unitary_pseudogene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unitary_pseudogene AS
 SELECT feature.feature_id AS unitary_pseudogene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unitary_pseudogene'::text);


--
-- Name: unorient_insert_dup; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unorient_insert_dup AS
 SELECT feature.feature_id AS unorient_insert_dup_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_insertional_duplication'::text);


--
-- Name: unoriented_interchromosomal_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unoriented_interchromosomal_transposition AS
 SELECT feature.feature_id AS unoriented_interchromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text);


--
-- Name: unoriented_intrachromosomal_transposition; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW unoriented_intrachromosomal_transposition AS
 SELECT feature.feature_id AS unoriented_intrachromosomal_transposition_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text);


--
-- Name: untranslated_region_polycistronic_mrna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW untranslated_region_polycistronic_mrna AS
 SELECT feature.feature_id AS untranslated_region_polycistronic_mrna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text);


--
-- Name: upd; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW upd AS
 SELECT feature.feature_id AS upd_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'maternal_uniparental_disomy'::text) OR ((cvterm.name)::text = 'paternal_uniparental_disomy'::text)) OR ((cvterm.name)::text = 'UPD'::text));


--
-- Name: upstream_aug_codon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW upstream_aug_codon AS
 SELECT feature.feature_id AS upstream_aug_codon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'upstream_AUG_codon'::text);


--
-- Name: upstream_gene_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW upstream_gene_variant AS
 SELECT feature.feature_id AS upstream_gene_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = '5KB_upstream_variant'::text) OR ((cvterm.name)::text = '2KB_upstream_variant'::text)) OR ((cvterm.name)::text = 'upstream_gene_variant'::text));


--
-- Name: uridine_five_oxyacetic_acid; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uridine_five_oxyacetic_acid AS
 SELECT feature.feature_id AS uridine_five_oxyacetic_acid_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid'::text);


--
-- Name: uridine_five_oxyacetic_acid_methyl_ester; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW uridine_five_oxyacetic_acid_methyl_ester AS
 SELECT feature.feature_id AS uridine_five_oxyacetic_acid_methyl_ester_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'uridine_five_oxyacetic_acid_methyl_ester'::text);


--
-- Name: ust; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ust AS
 SELECT feature.feature_id AS ust_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'three_prime_UST'::text) OR ((cvterm.name)::text = 'five_prime_UST'::text)) OR ((cvterm.name)::text = 'UST'::text));


--
-- Name: ust_match; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW ust_match AS
 SELECT feature.feature_id AS ust_match_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'UST_match'::text);


--
-- Name: utr; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW utr AS
 SELECT feature.feature_id AS utr_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'five_prime_UTR'::text) OR ((cvterm.name)::text = 'three_prime_UTR'::text)) OR ((cvterm.name)::text = 'internal_UTR'::text)) OR ((cvterm.name)::text = 'untranslated_region_polycistronic_mRNA'::text)) OR ((cvterm.name)::text = 'UTR'::text));


--
-- Name: utr_intron; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW utr_intron AS
 SELECT feature.feature_id AS utr_intron_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = 'five_prime_UTR_intron'::text) OR ((cvterm.name)::text = 'three_prime_UTR_intron'::text)) OR ((cvterm.name)::text = 'UTR_intron'::text));


--
-- Name: utr_region; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW utr_region AS
 SELECT feature.feature_id AS utr_region_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'upstream_AUG_codon'::text) OR ((cvterm.name)::text = 'AU_rich_element'::text)) OR ((cvterm.name)::text = 'Bruno_response_element'::text)) OR ((cvterm.name)::text = 'iron_responsive_element'::text)) OR ((cvterm.name)::text = 'UTR_region'::text));


--
-- Name: utr_variant; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW utr_variant AS
 SELECT feature.feature_id AS utr_variant_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((cvterm.name)::text = '5_prime_UTR_variant'::text) OR ((cvterm.name)::text = '3_prime_UTR_variant'::text)) OR ((cvterm.name)::text = 'UTR_variant'::text));


--
-- Name: v_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_cluster AS
 SELECT feature.feature_id AS v_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_cluster'::text);


--
-- Name: v_d_dj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_d_dj_c_cluster AS
 SELECT feature.feature_id AS v_d_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text);


--
-- Name: v_d_dj_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_d_dj_cluster AS
 SELECT feature.feature_id AS v_d_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_cluster'::text);


--
-- Name: v_d_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_d_dj_j_c_cluster AS
 SELECT feature.feature_id AS v_d_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text);


--
-- Name: v_d_dj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_d_dj_j_cluster AS
 SELECT feature.feature_id AS v_d_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text);


--
-- Name: v_d_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_d_j_c_cluster AS
 SELECT feature.feature_id AS v_d_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_J_C_cluster'::text);


--
-- Name: v_d_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_d_j_cluster AS
 SELECT feature.feature_id AS v_d_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_D_J_cluster'::text);


--
-- Name: v_dj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_dj_c_cluster AS
 SELECT feature.feature_id AS v_dj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_C_cluster'::text);


--
-- Name: v_dj_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_dj_cluster AS
 SELECT feature.feature_id AS v_dj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_cluster'::text);


--
-- Name: v_dj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_dj_j_c_cluster AS
 SELECT feature.feature_id AS v_dj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text);


--
-- Name: v_dj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_dj_j_cluster AS
 SELECT feature.feature_id AS v_dj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_DJ_J_cluster'::text);


--
-- Name: v_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_gene AS
 SELECT feature.feature_id AS v_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_gene'::text);


--
-- Name: v_gene_recombination_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_gene_recombination_feature AS
 SELECT feature.feature_id AS v_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_gene_recombination_feature'::text);


--
-- Name: v_heptamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_heptamer AS
 SELECT feature.feature_id AS v_heptamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_heptamer'::text);


--
-- Name: v_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_j_c_cluster AS
 SELECT feature.feature_id AS v_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_J_C_cluster'::text);


--
-- Name: v_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_j_cluster AS
 SELECT feature.feature_id AS v_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_J_cluster'::text);


--
-- Name: v_nonamer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_nonamer AS
 SELECT feature.feature_id AS v_nonamer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_nonamer'::text);


--
-- Name: v_spacer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_spacer AS
 SELECT feature.feature_id AS v_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_spacer'::text);


--
-- Name: v_vdj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vdj_c_cluster AS
 SELECT feature.feature_id AS v_vdj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_C_cluster'::text);


--
-- Name: v_vdj_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vdj_cluster AS
 SELECT feature.feature_id AS v_vdj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_cluster'::text);


--
-- Name: v_vdj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vdj_j_c_cluster AS
 SELECT feature.feature_id AS v_vdj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text);


--
-- Name: v_vdj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vdj_j_cluster AS
 SELECT feature.feature_id AS v_vdj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VDJ_J_cluster'::text);


--
-- Name: v_vj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vj_c_cluster AS
 SELECT feature.feature_id AS v_vj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_C_cluster'::text);


--
-- Name: v_vj_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vj_cluster AS
 SELECT feature.feature_id AS v_vj_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_cluster'::text);


--
-- Name: v_vj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vj_j_c_cluster AS
 SELECT feature.feature_id AS v_vj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text);


--
-- Name: v_vj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW v_vj_j_cluster AS
 SELECT feature.feature_id AS v_vj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'V_VJ_J_cluster'::text);


--
-- Name: validated; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW validated AS
 SELECT feature.feature_id AS validated_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'experimentally_determined'::text) OR ((cvterm.name)::text = 'validated'::text));


--
-- Name: validated_cdna_clone; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW validated_cdna_clone AS
 SELECT feature.feature_id AS validated_cdna_clone_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'validated_cDNA_clone'::text);


--
-- Name: valine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW valine AS
 SELECT feature.feature_id AS valine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valine'::text);


--
-- Name: valine_trna_primary_transcript; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW valine_trna_primary_transcript AS
 SELECT feature.feature_id AS valine_trna_primary_transcript_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valine_tRNA_primary_transcript'::text);


--
-- Name: valyl_trna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW valyl_trna AS
 SELECT feature.feature_id AS valyl_trna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'valyl_tRNA'::text);


--
-- Name: variant_collection; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW variant_collection AS
 SELECT feature.feature_id AS variant_collection_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'chromosome_variation'::text) OR ((cvterm.name)::text = 'allele'::text)) OR ((cvterm.name)::text = 'haplotype'::text)) OR ((cvterm.name)::text = 'genotype'::text)) OR ((cvterm.name)::text = 'diplotype'::text)) OR ((cvterm.name)::text = 'assortment_derived_variation'::text)) OR ((cvterm.name)::text = 'chromosome_number_variation'::text)) OR ((cvterm.name)::text = 'chromosome_structure_variation'::text)) OR ((cvterm.name)::text = 'assortment_derived_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'assortment_derived_deficiency'::text)) OR ((cvterm.name)::text = 'assortment_derived_aneuploid'::text)) OR ((cvterm.name)::text = 'aneuploid'::text)) OR ((cvterm.name)::text = 'polyploid'::text)) OR ((cvterm.name)::text = 'hyperploid'::text)) OR ((cvterm.name)::text = 'hypoploid'::text)) OR ((cvterm.name)::text = 'autopolyploid'::text)) OR ((cvterm.name)::text = 'allopolyploid'::text)) OR ((cvterm.name)::text = 'free_chromosome_arm'::text)) OR ((cvterm.name)::text = 'chromosomal_transposition'::text)) OR ((cvterm.name)::text = 'aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'intrachromosomal_mutation'::text)) OR ((cvterm.name)::text = 'interchromosomal_mutation'::text)) OR ((cvterm.name)::text = 'chromosomal_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome'::text)) OR ((cvterm.name)::text = 'autosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'complex_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'uncharacterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_aneuploid_chromosome'::text)) OR ((cvterm.name)::text = 'chromosomal_deletion'::text)) OR ((cvterm.name)::text = 'chromosomal_inversion'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'ring_chromosome'::text)) OR ((cvterm.name)::text = 'chromosome_fission'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_deficiency'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'pericentric_inversion'::text)) OR ((cvterm.name)::text = 'paracentric_inversion'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_inversion'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_ring_chromosome'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'translocation_element'::text)) OR ((cvterm.name)::text = 'Robertsonian_fusion'::text)) OR ((cvterm.name)::text = 'reciprocal_chromosomal_translocation'::text)) OR ((cvterm.name)::text = 'deficient_translocation'::text)) OR ((cvterm.name)::text = 'inversion_cum_translocation'::text)) OR ((cvterm.name)::text = 'cyclic_translocation'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'deficient_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_interchromosomal_transposition'::text)) OR ((cvterm.name)::text = 'interchromosomal_duplication'::text)) OR ((cvterm.name)::text = 'intrachromosomal_duplication'::text)) OR ((cvterm.name)::text = 'free_duplication'::text)) OR ((cvterm.name)::text = 'insertional_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_deficiency_plus_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_bipartite_duplication'::text)) OR ((cvterm.name)::text = 'inversion_derived_duplication_plus_aneuploid'::text)) OR ((cvterm.name)::text = 'intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'bipartite_duplication'::text)) OR ((cvterm.name)::text = 'deficient_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'inverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'uninverted_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'unoriented_intrachromosomal_transposition'::text)) OR ((cvterm.name)::text = 'free_ring_duplication'::text)) OR ((cvterm.name)::text = 'uninverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'inverted_insertional_duplication'::text)) OR ((cvterm.name)::text = 'unoriented_insertional_duplication'::text)) OR ((cvterm.name)::text = 'compound_chromosome_arm'::text)) OR ((cvterm.name)::text = 'homo_compound_chromosome'::text)) OR ((cvterm.name)::text = 'hetero_compound_chromosome'::text)) OR ((cvterm.name)::text = 'dexstrosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'laevosynaptic_chromosome'::text)) OR ((cvterm.name)::text = 'partially_characterised_chromosomal_mutation'::text)) OR ((cvterm.name)::text = 'polymorphic_sequence_variant'::text)) OR ((cvterm.name)::text = 'variant_collection'::text));


--
-- Name: variant_frequency; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW variant_frequency AS
 SELECT feature.feature_id AS variant_frequency_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'unique_variant'::text) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'variant_frequency'::text));


--
-- Name: variant_genome; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW variant_genome AS
 SELECT feature.feature_id AS variant_genome_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((cvterm.name)::text = 'chromosomally_aberrant_genome'::text) OR ((cvterm.name)::text = 'variant_genome'::text));


--
-- Name: variant_origin; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW variant_origin AS
 SELECT feature.feature_id AS variant_origin_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'maternal_variant'::text) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'variant_origin'::text));


--
-- Name: variant_phenotype; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW variant_phenotype AS
 SELECT feature.feature_id AS variant_phenotype_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((cvterm.name)::text = 'benign_variant'::text) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text));


--
-- Name: variant_quality; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW variant_quality AS
 SELECT feature.feature_id AS variant_quality_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((((((((((((((((cvterm.name)::text = 'variant_origin'::text) OR ((cvterm.name)::text = 'variant_frequency'::text)) OR ((cvterm.name)::text = 'variant_phenotype'::text)) OR ((cvterm.name)::text = 'maternal_variant'::text)) OR ((cvterm.name)::text = 'paternal_variant'::text)) OR ((cvterm.name)::text = 'somatic_variant'::text)) OR ((cvterm.name)::text = 'germline_variant'::text)) OR ((cvterm.name)::text = 'pedigree_specific_variant'::text)) OR ((cvterm.name)::text = 'population_specific_variant'::text)) OR ((cvterm.name)::text = 'de_novo_variant'::text)) OR ((cvterm.name)::text = 'unique_variant'::text)) OR ((cvterm.name)::text = 'rare_variant'::text)) OR ((cvterm.name)::text = 'polymorphic_variant'::text)) OR ((cvterm.name)::text = 'common_variant'::text)) OR ((cvterm.name)::text = 'fixed_variant'::text)) OR ((cvterm.name)::text = 'benign_variant'::text)) OR ((cvterm.name)::text = 'disease_associated_variant'::text)) OR ((cvterm.name)::text = 'disease_causing_variant'::text)) OR ((cvterm.name)::text = 'lethal_variant'::text)) OR ((cvterm.name)::text = 'quantitative_variant'::text)) OR ((cvterm.name)::text = 'variant_quality'::text));


--
-- Name: vault_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vault_rna AS
 SELECT feature.feature_id AS vault_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'vault_RNA'::text);


--
-- Name: vd_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vd_gene AS
 SELECT feature.feature_id AS vd_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VD_gene'::text);


--
-- Name: vdj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vdj_c_cluster AS
 SELECT feature.feature_id AS vdj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_C_cluster'::text);


--
-- Name: vdj_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vdj_gene AS
 SELECT feature.feature_id AS vdj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_gene'::text);


--
-- Name: vdj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vdj_j_c_cluster AS
 SELECT feature.feature_id AS vdj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_J_C_cluster'::text);


--
-- Name: vdj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vdj_j_cluster AS
 SELECT feature.feature_id AS vdj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VDJ_J_cluster'::text);


--
-- Name: vector_replicon; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vector_replicon AS
 SELECT feature.feature_id AS vector_replicon_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'YAC'::text) OR ((cvterm.name)::text = 'BAC'::text)) OR ((cvterm.name)::text = 'PAC'::text)) OR ((cvterm.name)::text = 'cosmid'::text)) OR ((cvterm.name)::text = 'phagemid'::text)) OR ((cvterm.name)::text = 'fosmid'::text)) OR ((cvterm.name)::text = 'lambda_vector'::text)) OR ((cvterm.name)::text = 'plasmid_vector'::text)) OR ((cvterm.name)::text = 'targeting_vector'::text)) OR ((cvterm.name)::text = 'vector_replicon'::text));


--
-- Name: vertebrate_ig_t_cell_receptor_rearranged_gene_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_ig_t_cell_receptor_rearranged_gene_cluster AS
 SELECT feature.feature_id AS vertebrate_ig_t_cell_receptor_rearranged_gene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((cvterm.name)::text = 'DJ_J_cluster'::text) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text));


--
-- Name: vertebrate_immune_system_gene_recombination_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_immune_system_gene_recombination_feature AS
 SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_gene_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text)) OR ((cvterm.name)::text = 'D_gene'::text)) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'three_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'VD_gene'::text)) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_DJ_J_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_D_J_cluster'::text)) OR ((cvterm.name)::text = 'DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'VDJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_C_cluster'::text)) OR ((cvterm.name)::text = 'V_DJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VDJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'V_VJ_J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_feature'::text));


--
-- Name: vertebrate_immune_system_gene_recombination_signal_feature; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_immune_system_gene_recombination_signal_feature AS
 SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_signal_feature_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((((((((cvterm.name)::text = 'J_gene_recombination_feature'::text) OR ((cvterm.name)::text = 'D_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'V_gene_recombination_feature'::text)) OR ((cvterm.name)::text = 'heptamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'nonamer_of_recombination_feature_of_vertebrate_immune_system_gene'::text)) OR ((cvterm.name)::text = 'five_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_recombination_signal_sequence'::text)) OR ((cvterm.name)::text = 'three_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_heptamer'::text)) OR ((cvterm.name)::text = 'J_heptamer'::text)) OR ((cvterm.name)::text = 'V_heptamer'::text)) OR ((cvterm.name)::text = 'three_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'five_prime_D_nonamer'::text)) OR ((cvterm.name)::text = 'J_nonamer'::text)) OR ((cvterm.name)::text = 'V_nonamer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_signal_feature'::text));


--
-- Name: vertebrate_immune_system_gene_recombination_spacer; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_immune_system_gene_recombination_spacer AS
 SELECT feature.feature_id AS vertebrate_immune_system_gene_recombination_spacer_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'three_prime_D_spacer'::text) OR ((cvterm.name)::text = 'five_prime_D_spacer'::text)) OR ((cvterm.name)::text = 'J_spacer'::text)) OR ((cvterm.name)::text = 'V_spacer'::text)) OR ((cvterm.name)::text = 'vertebrate_immune_system_gene_recombination_spacer'::text));


--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_gene_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_immunoglobulin_t_cell_receptor_gene_cluster AS
 SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_gene_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((((cvterm.name)::text = 'D_J_C_cluster'::text) OR ((cvterm.name)::text = 'J_C_cluster'::text)) OR ((cvterm.name)::text = 'J_cluster'::text)) OR ((cvterm.name)::text = 'V_cluster'::text)) OR ((cvterm.name)::text = 'V_J_cluster'::text)) OR ((cvterm.name)::text = 'V_J_C_cluster'::text)) OR ((cvterm.name)::text = 'C_cluster'::text)) OR ((cvterm.name)::text = 'D_cluster'::text)) OR ((cvterm.name)::text = 'D_J_cluster'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_gene_cluster'::text));


--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment AS
 SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_rearranged_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'VD_gene'::text) OR ((cvterm.name)::text = 'DJ_gene'::text)) OR ((cvterm.name)::text = 'VDJ_gene'::text)) OR ((cvterm.name)::text = 'VJ_gene'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_rearranged_segment'::text));


--
-- Name: vertebrate_immunoglobulin_t_cell_receptor_segment; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vertebrate_immunoglobulin_t_cell_receptor_segment AS
 SELECT feature.feature_id AS vertebrate_immunoglobulin_t_cell_receptor_segment_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((cvterm.name)::text = 'D_gene'::text) OR ((cvterm.name)::text = 'V_gene'::text)) OR ((cvterm.name)::text = 'J_gene'::text)) OR ((cvterm.name)::text = 'C_gene'::text)) OR ((cvterm.name)::text = 'vertebrate_immunoglobulin_T_cell_receptor_segment'::text));


--
-- Name: viral_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW viral_sequence AS
 SELECT feature.feature_id AS viral_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE (((((((((cvterm.name)::text = 'phage_sequence'::text) OR ((cvterm.name)::text = 'ds_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ds_DNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ss_RNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'negative_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'positive_sense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'ambisense_ssRNA_viral_sequence'::text)) OR ((cvterm.name)::text = 'viral_sequence'::text));


--
-- Name: virtual_sequence; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW virtual_sequence AS
 SELECT feature.feature_id AS virtual_sequence_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'virtual_sequence'::text);


--
-- Name: vj_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vj_c_cluster AS
 SELECT feature.feature_id AS vj_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_C_cluster'::text);


--
-- Name: vj_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vj_gene AS
 SELECT feature.feature_id AS vj_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_gene'::text);


--
-- Name: vj_j_c_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vj_j_c_cluster AS
 SELECT feature.feature_id AS vj_j_c_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_J_C_cluster'::text);


--
-- Name: vj_j_cluster; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW vj_j_cluster AS
 SELECT feature.feature_id AS vj_j_cluster_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'VJ_J_cluster'::text);


--
-- Name: wc_base_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW wc_base_pair AS
 SELECT feature.feature_id AS wc_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'WC_base_pair'::text);


--
-- Name: whole_genome_sequence_status; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW whole_genome_sequence_status AS
 SELECT feature.feature_id AS whole_genome_sequence_status_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((((((((cvterm.name)::text = 'standard_draft'::text) OR ((cvterm.name)::text = 'high_quality_draft'::text)) OR ((cvterm.name)::text = 'improved_high_quality_draft'::text)) OR ((cvterm.name)::text = 'annotation_directed_improved_draft'::text)) OR ((cvterm.name)::text = 'noncontiguous_finished'::text)) OR ((cvterm.name)::text = 'finished_genome'::text)) OR ((cvterm.name)::text = 'whole_genome_sequence_status'::text));


--
-- Name: wild_type; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW wild_type AS
 SELECT feature.feature_id AS wild_type_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wild_type'::text);


--
-- Name: wild_type_rescue_gene; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW wild_type_rescue_gene AS
 SELECT feature.feature_id AS wild_type_rescue_gene_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wild_type_rescue_gene'::text);


--
-- Name: wobble_base_pair; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW wobble_base_pair AS
 SELECT feature.feature_id AS wobble_base_pair_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wobble_base_pair'::text);


--
-- Name: wybutosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW wybutosine AS
 SELECT feature.feature_id AS wybutosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wybutosine'::text);


--
-- Name: wyosine; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW wyosine AS
 SELECT feature.feature_id AS wyosine_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'wyosine'::text);


--
-- Name: x_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW x_element AS
 SELECT feature.feature_id AS x_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'X_element'::text);


--
-- Name: x_element_combinatorial_repeat; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW x_element_combinatorial_repeat AS
 SELECT feature.feature_id AS x_element_combinatorial_repeat_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'X_element_combinatorial_repeat'::text);


--
-- Name: y_prime_element; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW y_prime_element AS
 SELECT feature.feature_id AS y_prime_element_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Y_prime_element'::text);


--
-- Name: y_rna; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW y_rna AS
 SELECT feature.feature_id AS y_rna_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'Y_RNA'::text);


--
-- Name: yac; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW yac AS
 SELECT feature.feature_id AS yac_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'YAC'::text);


--
-- Name: yac_end; Type: VIEW; Schema: so; Owner: -
--

CREATE VIEW yac_end AS
 SELECT feature.feature_id AS yac_end_id,
    feature.feature_id,
    feature.dbxref_id,
    feature.organism_id,
    feature.name,
    feature.uniquename,
    feature.residues,
    feature.seqlen,
    feature.md5checksum,
    feature.type_id,
    feature.is_analysis,
    feature.is_obsolete,
    feature.timeaccessioned,
    feature.timelastmodified
   FROM (feature
     JOIN cvterm ON ((feature.type_id = cvterm.cvterm_id)))
  WHERE ((cvterm.name)::text = 'YAC_end'::text);


SET search_path = public, pg_catalog;


--
-- Name: cv_root; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW cv_root AS
 SELECT cvterm.cv_id,
    cvterm.cvterm_id AS root_cvterm_id
   FROM cvterm
  WHERE ((NOT (cvterm.cvterm_id IN ( SELECT cvterm_relationship.subject_id
           FROM cvterm_relationship))) AND (cvterm.is_obsolete = 0));


--
-- Name: VIEW cv_root; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW cv_root IS 'the roots of a cv are the set of terms
which have no parents (terms that are not the subject of a
relation). Most cvs will have a single root, some may have >1. All
will have at least 1';

--
-- Name: stats_paths_to_root; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW stats_paths_to_root AS
 SELECT cvtermpath.subject_id AS cvterm_id,
    count(DISTINCT cvtermpath.cvtermpath_id) AS total_paths,
    avg(cvtermpath.pathdistance) AS avg_distance,
    min(cvtermpath.pathdistance) AS min_distance,
    max(cvtermpath.pathdistance) AS max_distance
   FROM (cvtermpath
     JOIN cv_root ON ((cvtermpath.object_id = cv_root.root_cvterm_id)))
  GROUP BY cvtermpath.subject_id;

--
-- Name: VIEW stats_paths_to_root; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW stats_paths_to_root IS 'per-cvterm statistics on its
placement in the DAG relative to the root. There may be multiple paths
from any term to the root. This gives the total number of paths, and
the average minimum and maximum distances. Here distance is defined by
cvtermpath.pathdistance';

--
-- Name: INDEX cvterm_c1; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX cvterm_c1 IS 'A name can mean different things in
different contexts; for example "chromosome" in SO and GO. A name
should be unique within an ontology or cv. A name may exist twice in a
cv, in both obsolete and non-obsolete forms - these will be for
different cvterms with different OBO identifiers; so GO documentation
for more details on obsoletion. Note that occasionally multiple
obsolete terms with the same name will exist in the same cv. If this
is a possibility for the ontology under consideration (e.g. GO) then the
ID should be appended to the name to ensure uniqueness.';

--
-- Name: INDEX cvterm_c2; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON INDEX cvterm_c2 IS 'The OBO identifier is globally unique.';

COMMENT ON INDEX featureprop_c1 IS 'For any one feature, multivalued
property-value pairs must be differentiated by rank.';


--
-- gmod_materialized_view_tool.pl --create_view --view_name all_feature_names --table_name public.all_feature_names --refresh_time daily --column_def "feature_id bigint,name varchar(255),organism_id bigint,searchable_name tsvector" --sql_query "SELECT feature_id, CAST(substring(uniquename FROM 0 FOR 255) AS varchar(255)) AS name, organism_id, to_tsvector('english', CAST(substring(uniquename FROM 0 FOR 255) AS varchar(255))) AS searchable_name FROM feature UNION SELECT feature_id, name, organism_id, to_tsvector('english', name) AS searchable_name FROM feature WHERE name IS NOT NULL UNION SELECT fs.feature_id, s.name, f.organism_id, to_tsvector('english', s.name) AS searchable_name FROM feature_synonym fs, synonym s, feature f WHERE fs.synonym_id = s.synonym_id AND fs.feature_id = f.feature_id UNION SELECT fp.feature_id, CAST(substring(fp.value FROM 0 FOR 255) AS varchar(255)) AS name, f.organism_id, to_tsvector('english',CAST(substring(fp.value FROM 0 FOR 255) AS varchar(255))) AS searchable_name FROM featureprop fp, feature f WHERE f.feature_id = fp.feature_id UNION SELECT fd.feature_id, d.accession, f.organism_id,to_tsvector('english',d.accession) AS searchable_name FROM feature_dbxref fd, dbxref d,feature f WHERE fd.dbxref_id = d.dbxref_id AND fd.feature_id = f.feature_id" --index_fields "feature_id,name" --special_index "CREATE INDEX searchable_all_feature_names_idx ON all_feature_names USING gin(searchable_name)" --yes 
--
CREATE OR REPLACE VIEW all_feature_names (
  feature_id,
  name,
  organism_id
) AS
SELECT feature_id,CAST(substring(uniquename from 0 for 255) as varchar(255)) as name,organism_id FROM feature  
UNION
SELECT feature_id, name, organism_id FROM feature where name is not null 
UNION
SELECT fs.feature_id,s.name,f.organism_id FROM feature_synonym fs, synonym s, feature f
  WHERE fs.synonym_id = s.synonym_id AND fs.feature_id = f.feature_id
UNION
SELECT fp.feature_id, CAST(substring(fp.value from 0 for 255) as varchar(255)) as name,f.organism_id FROM featureprop fp, feature f 
  WHERE f.feature_id = fp.feature_id
UNION
SELECT fd.feature_id, d.accession, f.organism_id FROM feature_dbxref fd, dbxref d,feature f
  WHERE fd.dbxref_id = d.dbxref_id AND fd.feature_id = f.feature_id;


--
-- Name: common_ancestor_cvterm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW common_ancestor_cvterm AS
 SELECT p1.subject_id AS cvterm1_id,
    p2.subject_id AS cvterm2_id,
    p1.object_id AS ancestor_cvterm_id,
    p1.pathdistance AS pathdistance1,
    p2.pathdistance AS pathdistance2,
    (p1.pathdistance + p2.pathdistance) AS total_pathdistance
   FROM cvtermpath p1,
    cvtermpath p2
  WHERE (p1.object_id = p2.object_id);


--
-- Name: VIEW common_ancestor_cvterm; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW common_ancestor_cvterm IS 'The common ancestor of any
two terms is the intersection of both terms ancestors. Two terms can
have multiple common ancestors. Use total_pathdistance to get the
least common ancestor';


--
-- Name: common_descendant_cvterm; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW common_descendant_cvterm AS
 SELECT p1.object_id AS cvterm1_id,
    p2.object_id AS cvterm2_id,
    p1.subject_id AS ancestor_cvterm_id,
    p1.pathdistance AS pathdistance1,
    p2.pathdistance AS pathdistance2,
    (p1.pathdistance + p2.pathdistance) AS total_pathdistance
   FROM cvtermpath p1,
    cvtermpath p2
  WHERE (p1.subject_id = p2.subject_id);


--
-- Name: VIEW common_descendant_cvterm; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW common_descendant_cvterm IS 'The common descendant of
any two terms is the intersection of both terms descendants. Two terms
can have multiple common descendants. Use total_pathdistance to get
the least common ancestor';

--
-- Name: cv_cvterm_count; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW cv_cvterm_count AS
 SELECT cv.name,
    count(*) AS num_terms_excl_obs
   FROM (cv
     JOIN cvterm USING (cv_id))
  WHERE (cvterm.is_obsolete = 0)
  GROUP BY cv.name;


--
-- Name: VIEW cv_cvterm_count; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW cv_cvterm_count IS 'per-cv terms counts (excludes obsoletes)';


--
-- Name: cv_cvterm_count_with_obs; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW cv_cvterm_count_with_obs AS
 SELECT cv.name,
    count(*) AS num_terms_incl_obs
   FROM (cv
     JOIN cvterm USING (cv_id))
  GROUP BY cv.name;


--
-- Name: VIEW cv_cvterm_count_with_obs; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW cv_cvterm_count_with_obs IS 'per-cv terms counts (includes obsoletes)';

--
-- Name: cv_leaf; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW cv_leaf AS
 SELECT cvterm.cv_id,
    cvterm.cvterm_id
   FROM cvterm
  WHERE (NOT (cvterm.cvterm_id IN ( SELECT cvterm_relationship.object_id
           FROM cvterm_relationship)));


--
-- Name: VIEW cv_leaf; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW cv_leaf IS 'the leaves of a cv are the set of terms
which have no children (terms that are not the object of a
relation). All cvs will have at least 1 leaf';

--
-- Name: cv_link_count; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW cv_link_count AS
 SELECT cv.name AS cv_name,
    relation.name AS relation_name,
    relation_cv.name AS relation_cv_name,
    count(*) AS num_links
   FROM ((((cv
     JOIN cvterm ON ((cvterm.cv_id = cv.cv_id)))
     JOIN cvterm_relationship ON ((cvterm.cvterm_id = cvterm_relationship.subject_id)))
     JOIN cvterm relation ON ((cvterm_relationship.type_id = relation.cvterm_id)))
     JOIN cv relation_cv ON ((relation.cv_id = relation_cv.cv_id)))
  GROUP BY cv.name, relation.name, relation_cv.name;


--
-- Name: VIEW cv_link_count; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW cv_link_count IS 'per-cv summary of number of
links (cvterm_relationships) broken down by
relationship_type. num_links is the total # of links of the specified
type in which the subject_id of the link is in the named cv';

--
-- Name: cv_path_count; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW cv_path_count AS
 SELECT cv.name AS cv_name,
    relation.name AS relation_name,
    relation_cv.name AS relation_cv_name,
    count(*) AS num_paths
   FROM ((((cv
     JOIN cvterm ON ((cvterm.cv_id = cv.cv_id)))
     JOIN cvtermpath ON ((cvterm.cvterm_id = cvtermpath.subject_id)))
     JOIN cvterm relation ON ((cvtermpath.type_id = relation.cvterm_id)))
     JOIN cv relation_cv ON ((relation.cv_id = relation_cv.cv_id)))
  GROUP BY cv.name, relation.name, relation_cv.name;


--
-- Name: VIEW cv_path_count; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW cv_path_count IS 'per-cv summary of number of
paths (cvtermpaths) broken down by relationship_type. num_paths is the
total # of paths of the specified type in which the subject_id of the
path is in the named cv. See also: cv_distinct_relations';



--
-- Name: db_dbxref_count; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW db_dbxref_count AS
 SELECT db.name,
    count(*) AS num_dbxrefs
   FROM (db
     JOIN dbxref USING (db_id))
  GROUP BY db.name;


--
-- Name: VIEW db_dbxref_count; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW db_dbxref_count IS 'per-db dbxref counts';


--
-- Name: dfeatureloc; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW dfeatureloc AS
 SELECT featureloc.featureloc_id,
    featureloc.feature_id,
    featureloc.srcfeature_id,
    featureloc.fmin AS nbeg,
    featureloc.is_fmin_partial AS is_nbeg_partial,
    featureloc.fmax AS nend,
    featureloc.is_fmax_partial AS is_nend_partial,
    featureloc.strand,
    featureloc.phase,
    featureloc.residue_info,
    featureloc.locgroup,
    featureloc.rank
   FROM featureloc
  WHERE ((featureloc.strand < 0) OR (featureloc.phase < 0))
UNION
 SELECT featureloc.featureloc_id,
    featureloc.feature_id,
    featureloc.srcfeature_id,
    featureloc.fmax AS nbeg,
    featureloc.is_fmax_partial AS is_nbeg_partial,
    featureloc.fmin AS nend,
    featureloc.is_fmin_partial AS is_nend_partial,
    featureloc.strand,
    featureloc.phase,
    featureloc.residue_info,
    featureloc.locgroup,
    featureloc.rank
   FROM featureloc
  WHERE (((featureloc.strand IS NULL) OR (featureloc.strand >= 0)) OR (featureloc.phase >= 0));

--
-- Name: feature_contains; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_contains AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((y.fmin >= x.fmin) AND (y.fmin <= x.fmax)));


--
-- Name: VIEW feature_contains; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_contains IS 'subject intervals contains (or is
same as) object interval. transitive,reflexive';

--
-- Name: feature_difference; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_difference AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.strand AS srcfeature_id,
    x.srcfeature_id AS fmin,
    x.fmin AS fmax,
    y.fmin AS strand
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmin < y.fmin) AND (x.fmax >= y.fmax)))
UNION
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.strand AS srcfeature_id,
    x.srcfeature_id AS fmin,
    y.fmax,
    x.fmax AS strand
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax > y.fmax) AND (x.fmin <= y.fmin)));


--
-- Name: VIEW feature_difference; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_difference IS 'size of gap between two features. must be abutting or disjoint';


--
-- Name: feature_disjoint; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_disjoint AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax < y.fmin) AND (x.fmin > y.fmax)));


--
-- Name: VIEW feature_disjoint; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_disjoint IS 'featurelocs do not meet. symmetric';


--
-- Name: feature_distance; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_distance AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmax <= y.fmin) THEN (x.fmax - y.fmin)
            ELSE (y.fmax - x.fmin)
        END AS distance
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax <= y.fmin) OR (x.fmin >= y.fmax)));

--
-- Name: feature_intersection; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_intersection AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmin < y.fmin) THEN y.fmin
            ELSE x.fmin
        END AS fmin,
        CASE
            WHEN (x.fmax > y.fmax) THEN y.fmax
            ELSE x.fmax
        END AS fmax
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


--
-- Name: VIEW feature_intersection; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_intersection IS 'set-intersection on interval defined by featureloc. featurelocs must meet';


--
-- Name: feature_meets; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_meets AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


--
-- Name: VIEW feature_meets; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_meets IS 'intervals have at least one
interbase point in common (ie overlap OR abut). symmetric,reflexive';


--
-- Name: feature_meets_on_same_strand; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_meets_on_same_strand AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id
   FROM featureloc x,
    featureloc y
  WHERE (((x.srcfeature_id = y.srcfeature_id) AND (x.strand = y.strand)) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


--
-- Name: VIEW feature_meets_on_same_strand; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_meets_on_same_strand IS 'as feature_meets, but
featurelocs must be on the same strand. symmetric,reflexive';

--
-- Name: featureset_meets; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW featureset_meets AS
 SELECT x.object_id AS subject_id,
    y.object_id
   FROM ((feature_meets r
     JOIN feature_relationship x ON ((r.subject_id = x.subject_id)))
     JOIN feature_relationship y ON ((r.object_id = y.subject_id)));

--
-- Name: feature_union; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW feature_union AS
 SELECT x.feature_id AS subject_id,
    y.feature_id AS object_id,
    x.srcfeature_id,
    x.strand AS subject_strand,
    y.strand AS object_strand,
        CASE
            WHEN (x.fmin < y.fmin) THEN x.fmin
            ELSE y.fmin
        END AS fmin,
        CASE
            WHEN (x.fmax > y.fmax) THEN x.fmax
            ELSE y.fmax
        END AS fmax
   FROM featureloc x,
    featureloc y
  WHERE ((x.srcfeature_id = y.srcfeature_id) AND ((x.fmax >= y.fmin) AND (x.fmin <= y.fmax)));


--
-- Name: VIEW feature_union; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW feature_union IS 'set-union on interval defined by featureloc. featurelocs must meet';

--
-- Name: f_type; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW f_type AS
 SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    c.name AS type,
    f.residues,
    f.seqlen,
    f.md5checksum,
    f.type_id,
    f.timeaccessioned,
    f.timelastmodified
   FROM feature f,
    cvterm c
  WHERE (f.type_id = c.cvterm_id);


--
-- Name: f_loc; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW f_loc AS
 SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    fl.nbeg,
    fl.nend,
    fl.strand
   FROM dfeatureloc fl,
    f_type f
  WHERE (f.feature_id = fl.feature_id);

--
-- Name: fnr_type; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW fnr_type AS
 SELECT f.feature_id,
    f.name,
    f.dbxref_id,
    c.name AS type,
    f.residues,
    f.seqlen,
    f.md5checksum,
    f.type_id,
    f.timeaccessioned,
    f.timelastmodified
   FROM (feature f
     LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id))),
    cvterm c
  WHERE ((f.type_id = c.cvterm_id) AND (af.feature_id IS NULL));

--
-- Name: fp_key; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW fp_key AS
 SELECT fp.feature_id,
    c.name AS pkey,
    fp.value
   FROM featureprop fp,
    cvterm c
  WHERE (fp.featureprop_id = c.cvterm_id);



--
-- Name: gff3view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW gff3view AS
 SELECT f.feature_id,
    sf.name AS ref,
    COALESCE(gffdbx.accession, '.'::character varying(255)) AS source,
    cv.name AS type,
    (fl.fmin + 1) AS fstart,
    fl.fmax AS fend,
    COALESCE((af.significance)::text, '.'::text) AS score,
        CASE
            WHEN (fl.strand = (-1)) THEN '-'::text
            WHEN (fl.strand = 1) THEN '+'::text
            ELSE '.'::text
        END AS strand,
    COALESCE((fl.phase)::text, '.'::text) AS phase,
    f.seqlen,
    f.name,
    f.organism_id
   FROM (((((feature f
     LEFT JOIN featureloc fl ON ((f.feature_id = fl.feature_id)))
     LEFT JOIN feature sf ON ((fl.srcfeature_id = sf.feature_id)))
     LEFT JOIN ( SELECT fd.feature_id,
            d.accession
           FROM ((feature_dbxref fd
             JOIN dbxref d USING (dbxref_id))
             JOIN db USING (db_id))
          WHERE ((db.name)::text = 'GFF_source'::text)) gffdbx ON ((f.feature_id = gffdbx.feature_id)))
     LEFT JOIN cvterm cv ON ((f.type_id = cv.cvterm_id)))
     LEFT JOIN analysisfeature af ON ((f.feature_id = af.feature_id)));

--
-- Name: intron_combined_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW intron_combined_view AS
 SELECT x1.feature_id AS exon1_id,
    x2.feature_id AS exon2_id,
        CASE
            WHEN (l1.strand = (-1)) THEN l2.fmax
            ELSE l1.fmax
        END AS fmin,
        CASE
            WHEN (l1.strand = (-1)) THEN l1.fmin
            ELSE l2.fmin
        END AS fmax,
    l1.strand,
    l1.srcfeature_id,
    r1.rank AS intron_rank,
    r1.object_id AS transcript_id
   FROM ((((((cvterm
     JOIN feature x1 ON ((x1.type_id = cvterm.cvterm_id)))
     JOIN feature_relationship r1 ON ((x1.feature_id = r1.subject_id)))
     JOIN featureloc l1 ON ((x1.feature_id = l1.feature_id)))
     JOIN feature x2 ON ((x2.type_id = cvterm.cvterm_id)))
     JOIN feature_relationship r2 ON ((x2.feature_id = r2.subject_id)))
     JOIN featureloc l2 ON ((x2.feature_id = l2.feature_id)))
  WHERE ((((((((cvterm.name)::text = 'exon'::text) AND ((r2.rank - r1.rank) = 1)) AND (r1.object_id = r2.object_id)) AND (l1.strand = l2.strand)) AND (l1.srcfeature_id = l2.srcfeature_id)) AND (l1.locgroup = 0)) AND (l2.locgroup = 0));


--
-- Name: intronloc_view; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW intronloc_view AS
 SELECT DISTINCT intron_combined_view.exon1_id,
    intron_combined_view.exon2_id,
    intron_combined_view.fmin,
    intron_combined_view.fmax,
    intron_combined_view.strand,
    intron_combined_view.srcfeature_id
   FROM intron_combined_view;

--
-- Name: type_feature_count; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW type_feature_count AS
 SELECT t.name AS type,
    count(*) AS num_features
   FROM (cvterm t
     JOIN feature ON ((feature.type_id = t.cvterm_id)))
  GROUP BY t.name;


--
-- Name: VIEW type_feature_count; Type: COMMENT; Schema: public; Owner: -
--

COMMENT ON VIEW type_feature_count IS 'per-feature-type feature counts';

--
-- Name: gffatts; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW gffatts AS
 SELECT fs.feature_id,
    'Ontology_term'::text AS type,
    s.name AS attribute
   FROM cvterm s,
    feature_cvterm fs
  WHERE (fs.cvterm_id = s.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM dbxref s,
    feature_dbxref fs,
    db d
  WHERE ((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM synonym s,
    feature_synonym fs
  WHERE (fs.synonym_id = s.synonym_id)
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM featureprop fp,
    cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM pub s,
    feature_pub fs
  WHERE (fs.pub_id = s.pub_id);

--
-- Name: gff3atts; Type: VIEW; Schema: public; Owner: -
--

CREATE VIEW gff3atts AS
 SELECT fs.feature_id,
    'Ontology_term'::text AS type,
        CASE
            WHEN ((db.name)::text ~~ '%Gene Ontology%'::text) THEN (('GO:'::text || (dbx.accession)::text))::character varying
            WHEN ((db.name)::text ~~ 'Sequence Ontology%'::text) THEN (('SO:'::text || (dbx.accession)::text))::character varying
            ELSE ((((db.name)::text || ':'::text) || (dbx.accession)::text))::character varying
        END AS attribute
   FROM cvterm s,
    dbxref dbx,
    feature_cvterm fs,
    db
  WHERE (((fs.cvterm_id = s.cvterm_id) AND (s.dbxref_id = dbx.dbxref_id)) AND (db.db_id = dbx.db_id))
UNION ALL
 SELECT fs.feature_id,
    'Dbxref'::text AS type,
    (((d.name)::text || ':'::text) || (s.accession)::text) AS attribute
   FROM dbxref s,
    feature_dbxref fs,
    db d
  WHERE (((fs.dbxref_id = s.dbxref_id) AND (s.db_id = d.db_id)) AND ((d.name)::text <> 'GFF_source'::text))
UNION ALL
 SELECT f.feature_id,
    'Alias'::text AS type,
    s.name AS attribute
   FROM synonym s,
    feature_synonym fs,
    feature f
  WHERE ((((fs.synonym_id = s.synonym_id) AND (f.feature_id = fs.feature_id)) AND ((f.name)::text <> (s.name)::text)) AND (f.uniquename <> (s.name)::text))
UNION ALL
 SELECT fp.feature_id,
    cv.name AS type,
    fp.value AS attribute
   FROM featureprop fp,
    cvterm cv
  WHERE (fp.type_id = cv.cvterm_id)
UNION ALL
 SELECT fs.feature_id,
    'pub'::text AS type,
    (((s.series_name)::text || ':'::text) || s.title) AS attribute
   FROM pub s,
    feature_pub fs
  WHERE (fs.pub_id = s.pub_id)
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Parent'::text AS type,
    parent.uniquename AS attribute
   FROM feature_relationship fr,
    feature parent
  WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE (((cvterm.name)::text = 'part_of'::text) AND (cvterm.cv_id IN ( SELECT cv.cv_id
                   FROM cv
                  WHERE ((cv.name)::text = 'relationship'::text)))))))
UNION ALL
 SELECT fr.subject_id AS feature_id,
    'Derives_from'::text AS type,
    parent.uniquename AS attribute
   FROM feature_relationship fr,
    feature parent
  WHERE ((fr.object_id = parent.feature_id) AND (fr.type_id = ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE (((cvterm.name)::text = 'derives_from'::text) AND (cvterm.cv_id IN ( SELECT cv.cv_id
                   FROM cv
                  WHERE ((cv.name)::text = 'relationship'::text)))))))
UNION ALL
 SELECT fl.feature_id,
    'Target'::text AS type,
    (((((((target.name)::text || ' '::text) || (fl.fmin + 1)) || ' '::text) || fl.fmax) || ' '::text) || fl.strand) AS attribute
   FROM featureloc fl,
    feature target
  WHERE ((fl.srcfeature_id = target.feature_id) AND (fl.rank <> 0))
UNION ALL
 SELECT feature.feature_id,
    'ID'::text AS type,
    feature.uniquename AS attribute
   FROM feature
  WHERE (NOT (feature.type_id IN ( SELECT cvterm.cvterm_id
           FROM cvterm
          WHERE ((cvterm.name)::text = 'CDS'::text))))
UNION ALL
 SELECT feature.feature_id,
    'chado_feature_id'::text AS type,
    (feature.feature_id)::character varying AS attribute
   FROM feature
UNION ALL
 SELECT feature.feature_id,
    'Name'::text AS type,
    feature.name AS attribute
   FROM feature;
CREATE OR REPLACE VIEW common_descendant_cvterm AS
 SELECT
  p1.object_id           AS cvterm1_id,
  p2.object_id           AS cvterm2_id,
  p1.subject_id          AS ancestor_cvterm_id,
  p1.pathdistance        AS pathdistance1,
  p2.pathdistance        AS pathdistance2,
  p1.pathdistance + p2.pathdistance
                         AS total_pathdistance
 FROM
  cvtermpath AS p1,
  cvtermpath AS p2
 WHERE 
  p1.subject_id = p2.subject_id;
--
-- Name: gfffeatureatts(integer); Type: FUNCTION; Schema: public; Owner: chado
--

CREATE FUNCTION gfffeatureatts(integer) RETURNS SETOF gffatts
    LANGUAGE sql
    AS $_$
SELECT feature_id, 'Ontology_term' AS type,  s.name AS attribute
FROM cvterm s, feature_cvterm fs
WHERE fs.feature_id= $1 AND fs.cvterm_id = s.cvterm_id
UNION
SELECT feature_id, 'Dbxref' AS type, d.name || ':' || s.accession AS attribute
FROM dbxref s, feature_dbxref fs, db d
WHERE fs.feature_id= $1 AND fs.dbxref_id = s.dbxref_id AND s.db_id = d.db_id
UNION
SELECT feature_id, 'Alias' AS type, s.name AS attribute
FROM synonym s, feature_synonym fs
WHERE fs.feature_id= $1 AND fs.synonym_id = s.synonym_id
UNION
SELECT fp.feature_id,cv.name,fp.value
FROM featureprop fp, cvterm cv
WHERE fp.feature_id= $1 AND fp.type_id = cv.cvterm_id 
UNION
SELECT feature_id, 'pub' AS type, s.series_name || ':' || s.title AS attribute
FROM pub s, feature_pub fs
WHERE fs.feature_id= $1 AND fs.pub_id = s.pub_id
$_$;

DROP INDEX IF EXISTS feature_relationship_idx1b;
create index feature_relationship_idx1b on feature_relationship (object_id, subject_id, type_id);
DROP INDEX IF EXISTS featureloc_idx1b;
create index featureloc_idx1b on featureloc (feature_id, fmin, fmax);
DROP INDEX IF EXISTS feature_idx1b;
create index feature_idx1b on feature (feature_id, dbxref_id) where dbxref_id is not null;

--
-- Name: _fill_cvtermpath4node(BIGINT, BIGINT, BIGINT, BIGINT, INTEGER)
--

DROP FUNCTION IF EXISTS _fill_cvtermpath4node(integer, integer, integer, integer, integer);
CREATE OR REPLACE FUNCTION _fill_cvtermpath4node(BIGINT, BIGINT, BIGINT, BIGINT, INTEGER) RETURNS INTEGER AS
'
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;

BEGIN

    --- RAISE NOTICE ''depth=% root=%'', depth,child_id;
    --- not check type_id as it may be null and not very meaningful in cvtermpath when pathdistance > 1
    SELECT INTO exist_c count(*) FROM cvtermpath WHERE cv_id = cvid AND object_id = origin AND subject_id = child_id AND pathdistance = depth;

    IF (exist_c = 0) THEN
        INSERT INTO cvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES(origin, child_id, cvid, typeid, depth);
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        PERFORM _fill_cvtermpath4node(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
    END LOOP;
    RETURN 1;
END;
'
LANGUAGE 'plpgsql';
--
-- Name: _fill_cvtermpath4root(BIGINT, BIGINT)
--

DROP FUNCTION IF EXISTS _fill_cvtermpath4root(integer, integer);
CREATE OR REPLACE FUNCTION _fill_cvtermpath4root(BIGINT, BIGINT) RETURNS INTEGER AS
'
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype bigint;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;

BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = ''isa'' OR name = ''is_a'');
    PERFORM _fill_cvtermpath4node(rootid, rootid, cvid, ttype, 0);
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        PERFORM _fill_cvtermpath4root(cterm.subject_id, cvid);
        -- RAISE NOTICE ''DONE for term, %'', cterm.subject_id;
    END LOOP;
    RETURN 1;
END;
'
LANGUAGE 'plpgsql';
--
-- Name: fill_cvtermpath(BIGINT) 
--

DROP FUNCTION IF EXISTS fill_cvtermpath(integer);
CREATE OR REPLACE FUNCTION fill_cvtermpath(BIGINT) RETURNS INTEGER AS
'
DECLARE
    cvid alias for $1;
    root cvterm%ROWTYPE;

BEGIN

    DELETE FROM cvtermpath WHERE cv_id = cvid;

    FOR root IN SELECT DISTINCT t.* from cvterm t LEFT JOIN cvterm_relationship r ON (t.cvterm_id = r.subject_id) INNER JOIN cvterm_relationship r2 ON (t.cvterm_id = r2.object_id) WHERE t.cv_id = cvid AND r.subject_id is null LOOP
        PERFORM _fill_cvtermpath4root(root.cvterm_id, root.cv_id);
    END LOOP;
    RETURN 1;
END;   
'
LANGUAGE 'plpgsql';
--
-- Name: _fill_cvtermpath4node2detect_cycle(BIGINT, BIGINT, BIGINT, BIGINT, INTEGER)
--

DROP FUNCTION IF EXISTS _fill_cvtermpath4node2detect_cycle(integer, integer, integer, integer, integer);
CREATE OR REPLACE FUNCTION _fill_cvtermpath4node2detect_cycle(BIGINT, BIGINT, BIGINT, BIGINT, INTEGER) RETURNS BIGINT AS
'
DECLARE
    origin alias for $1;
    child_id alias for $2;
    cvid alias for $3;
    typeid alias for $4;
    depth alias for $5;
    cterm cvterm_relationship%ROWTYPE;
    exist_c int;
    ccount  int;
    ecount  int;
    rtn     bigint;
BEGIN

    EXECUTE ''SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id = ''|| origin || '' AND p2.subject_id = '' || child_id || ''AND '' || depth || ''> 0'';
    GET DIAGNOSTICS ccount = ROW_COUNT;
    IF (ccount > 0) THEN
        --RAISE EXCEPTION ''FOUND CYCLE: node % on cycle path'',origin;
        RETURN origin;
    END IF;

    EXECUTE ''SELECT * FROM tmpcvtermpath WHERE cv_id = '' || cvid || '' AND object_id = '' || origin || '' AND subject_id = '' || child_id || '' AND '' || origin || ''<>'' || child_id;
    GET DIAGNOSTICS ecount = ROW_COUNT;
    IF (ecount > 0) THEN
        --RAISE NOTICE ''FOUND TWICE (node), will check root obj % subj %'',origin, child_id;
        SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(child_id, cvid);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END IF;

    EXECUTE ''SELECT * FROM tmpcvtermpath WHERE cv_id = '' || cvid || '' AND object_id = '' || origin || '' AND subject_id = '' || child_id || '' AND pathdistance = '' || depth;
    GET DIAGNOSTICS exist_c = ROW_COUNT;
    IF (exist_c = 0) THEN
        EXECUTE ''INSERT INTO tmpcvtermpath (object_id, subject_id, cv_id, type_id, pathdistance) VALUES('' || origin || '', '' || child_id || '', '' || cvid || '', '' || typeid || '', '' || depth || '')'';
    END IF;

    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = child_id LOOP
        --RAISE NOTICE ''DOING for node, % %'', origin, cterm.subject_id;
        SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(origin, cterm.subject_id, cvid, cterm.type_id, depth+1);
        IF (rtn > 0) THEN
            RETURN rtn;
        END IF;
    END LOOP;
    RETURN 0;
END;
'
LANGUAGE 'plpgsql';
--
-- Name: _fill_cvtermpath4root2detect_cycle(BIGINT, BIGINT)
--

DROP FUNCTION IF EXISTS _fill_cvtermpath4root2detect_cycle(integer, integer);
CREATE OR REPLACE FUNCTION _fill_cvtermpath4root2detect_cycle(BIGINT, BIGINT) RETURNS BIGINT AS
'
DECLARE
    rootid alias for $1;
    cvid alias for $2;
    ttype bigint;
    ccount int;
    cterm cvterm_relationship%ROWTYPE;
    child cvterm_relationship%ROWTYPE;
    rtn     bigint;
BEGIN

    SELECT INTO ttype cvterm_id FROM cvterm WHERE (name = ''isa'' OR name = ''is_a'');
    SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, rootid, cvid, ttype, 0);
    IF (rtn > 0) THEN
        RETURN rtn;
    END IF;
    FOR cterm IN SELECT * FROM cvterm_relationship WHERE object_id = rootid LOOP
        EXECUTE ''SELECT * FROM tmpcvtermpath p1, tmpcvtermpath p2 WHERE p1.subject_id=p2.object_id AND p1.object_id=p2.subject_id AND p1.object_id='' || rootid || '' AND p1.subject_id='' || cterm.subject_id;
        GET DIAGNOSTICS ccount = ROW_COUNT;
        IF (ccount > 0) THEN
            --RAISE NOTICE ''FOUND TWICE (root), will check root obj % subj %'',rootid,cterm.subject_id;
            SELECT INTO rtn _fill_cvtermpath4node2detect_cycle(rootid, cterm.subject_id, cvid, ttype, 0);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        ELSE
            SELECT INTO rtn _fill_cvtermpath4root2detect_cycle(cterm.subject_id, cvid);
            IF (rtn > 0) THEN
                RETURN rtn;
            END IF;
        END IF;
    END LOOP;
    RETURN 0;
END;
'
LANGUAGE 'plpgsql';
