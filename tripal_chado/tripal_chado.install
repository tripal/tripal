<?php
/**
 * @file
 * Contains functions used to install/uninstall tripal_chado.
 */

use \Drupal\Core\Database\Database;
use \Drupal\Core\Utility\UpdateException;
use \Drupal\tripal_chado\Entity\ChadoTermMapping;

/**
 * Implements hook_install().
 */
function tripal_chado_install($is_syncing) {
  // Reserves Chado common schemas in 'reserved_schema_patterns' settings.
  $config = \Drupal::service('config.factory')
    ->getEditable('tripaldbx.settings')
  ;
  $reserved_schema_patterns = $config->get('reserved_schema_patterns') ?? [];
  $reserved_schema_patterns['frange'] = 'feature range (chado)';
  $reserved_schema_patterns['genetic_code'] = 'genetic code (chado)';
  $reserved_schema_patterns['so'] = 'sequence ontology (chado)';
  $config->set('reserved_schema_patterns', $reserved_schema_patterns)->save();

  $test_schema_base_names = $config->get('test_schema_base_names') ?? [];
  $test_schema_base_names['chado'] = '_test_chado';
  $config->set('test_schema_base_names', $test_schema_base_names)->save();

}

/**
 * Implements hook_uninstall().
 */
function tripal_chado_uninstall() {
  // Unreserves Chado common schemas in 'reserved_schema_patterns' settings.
  $config = \Drupal::service('config.factory')
    ->getEditable('tripaldbx.settings')
  ;
  $reserved_schema_patterns = $config->get('reserved_schema_patterns') ?? [];
  unset($reserved_schema_patterns['frange']);
  unset($reserved_schema_patterns['genetic_code']);
  unset($reserved_schema_patterns['so']);
  $config->set('reserved_schema_patterns', $reserved_schema_patterns)->save();
}

/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal_chado
 */
function tripal_chado_schema() {
  $schema = [];

  $schema['chado_installations'] = tripal_chado_chado_installations_schema();
  $schema['chado_migrations'] = tripal_chado_chado_migrations_schema();
  $schema['tripal_custom_tables'] = tripal_chado_tripal_custom_tables_schema();
  $schema['tripal_mviews'] = tripal_chado_tripal_mviews_schema();

  // Add tables to integrate the independant Tripal Vocabularies to Chado terms.
  $schema['chado_tripalvocab'] = tripal_chado_chado_vocab();
  $schema['chado_tripalvocabspace'] = tripal_chado_chado_vocabidspace();
  $schema['chado_tripalterm'] = tripal_chado_chado_term();

  // Add tables supporting the Tripal Storage.
  $schema['tripal_cv_obo'] = tripal_chado_tripal_cv_obo_schema();

  return $schema;
}

/**
 * Table definition for the tripal_cv_obo table used by the OBO loader.
 */
function tripal_chado_tripal_cv_obo_schema() {
  return [
    'fields' => [
      'obo_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 255
      ],
      'path'  => [
        'type' => 'varchar',
        'length' => 1024
      ],
    ],
    'indexes' => [
      'tripal_cv_obo_idx1' => ['obo_id'],
    ],
    'primary key' => ['obo_id'],
  ];
}

/**
 * Returns the Drupal Schema API array for the chado_installations table.
 */
function tripal_chado_chado_installations_schema() {
  return [
    'fields' => [
      'install_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'version' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'created' => [
        'type' => 'varchar',
        'length' => 255,
      ],
      'updated' => [
        'type' => 'varchar',
        'length' => 255,
      ],
    ],
    'indexes' => [
      'schema_name' => ['schema_name'],
    ],
    'primary key' => ['install_id'],
  ];
}

/**
 * Returns the Drupal Schema API array for the chado_installations table.
 */
function tripal_chado_chado_migrations_schema() {
  return [
    'fields' => [
      'migration_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'install_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'version' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'filename' => [
        'type' => 'text',
        'not null' => FALSE,
      ],
      'applied_on' => [
        'type' => 'varchar',
        'length' => 255,
      ],
      'success' => [
        'type' => 'int',
        'size' => 'tiny',
      ],
    ],
    'unique keys' => [
      'migration' => ['install_id', 'version'],
    ],
    'indexes' => [
      'status' => ['applied_on', 'success'],
    ],
    'foreign keys' => [
      'chado_installations' => [
        'table' => 'chado_installations',
        'columns' => [
          'install_id' => 'install_id'
        ],
      ],
    ],
    'primary key' => ['migration_id'],
  ];
}

/**
 * Links Tripal Vocabularies to Chado cvs.
 */
function tripal_chado_chado_vocab() {
  return [
    'fields' => [
      'mapping_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'cv_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'tripalvocab_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'chado' => ['schema_name', 'cv_id'],
      'tripal' => ['tripalvocab_id'],
    ],
    'primary key' => ['mapping_id'],
  ];
}

/**
 * Links Tripal Vocabulary IDSpaces to Chado dbs.
 */
function tripal_chado_chado_vocabidspace() {
  return [
    'fields' => [
      'mapping_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'db_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'tripalvocabspace_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'chado' => ['schema_name', 'db_id'],
      'tripal' => ['tripalvocabspace_id'],
    ],
    'primary key' => ['mapping_id'],
  ];
}

/**
 * Links Tripal Vocabularies to Chado cvs.
 */
function tripal_chado_chado_term() {
  return [
    'fields' => [
      'mapping_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'cvterm_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'tripalterm_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'chado' => ['schema_name', 'cvterm_id'],
      'tripal' => ['tripalterm_id'],
    ],
    'primary key' => ['mapping_id'],
  ];
}

/**
 * Describes the tripal_mviews table.
 */
function tripal_chado_tripal_mviews_schema() {
  return array(
    'fields' => array(
      'mview_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'table_id' => array(
        'type' => 'int',
        'not null' => True,
        'description' => 'The custom table ID'
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'query' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE
      ),
      'last_update' => array(
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'UNIX integer time'
      ),
      'status' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE
      ),
      'comment' => array(
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE
      ),
    ),
    'indexes' => array(
      'mview_id' => array('mview_id')
    ),
    'unique keys' => array(
      'table_id' => array('table_id'),
    ),
    'primary key' => array('mview_id'),
  );
}

/**
 * Describes the Tripal Custom Tables (tripal_custom_tables) table.
 * This keeps track of tables created by Tripal and stored in chado.
 */
function tripal_chado_tripal_custom_tables_schema() {
  return [
    'fields' => array(
      'table_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'table_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'schema' => array(
        'type' => 'text',
        'not null' => TRUE
      ),
      'locked' => array(
        'type' => 'int',
        'size' => 'tiny',
        'default' => 0,
        'description' => 'Set to true if this custom table is not for end-users to manage, but for the Tripal module.'
      ),
      'chado' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The name of the Chado schema where this table exists.'
      ),
    ),
    'indexes' => array(
      'table_id' => array('table_id'),
    ),
    'primary key' => array('table_id'),
    'foreign keys' => array(
      'tripal_mviews' => array(
        'table' => 'tripal_mviews',
        'columns' => array(
          'mview_id' => 'mview_id'
        ),
      ),
    ),
  ];
}

/**
 * Adds third party settings for Tripal content types to Chado base tables.
 */
function tripal_chado_update_10401() {
  $settings = [
    // Generic content types.
    'organism' => 'organism',
    'analysis' => 'analysis',
    'project' => 'project',
    'study' => 'study',
    'contact' => 'contact',
    'pub' => 'pub',
    'protocol' => 'protocol',
    // Expression content types.
    'biosample' => 'biomaterial',
    'assay' => 'assay',
    'array_design' => 'arraydesign',
    // Genetic expression types.
    'genetic_map' => 'featuremap',
    'QTL' => 'feature',
    'sequence_variant' => 'feature',
    'genetic_marker' => 'feature',
    'phenotypic_marker' => 'feature',
    // Germplams types.
    'germplasm' => 'stock',
    'breeding_cross' => 'stock',
    'germplasm_variety' => 'stock',
    'ril' => 'stock',
    // Genomic types.
    'gene' => 'feature',
    'mrna' => 'feature',
    'phylotree' => 'phylotree',
    'physical_map' => 'featuremap',
    'dna_library' => 'library',
    'genome_assembly' => 'analysis',
    'genome_annotation' => 'analysis',
    'genome_project' => 'project'
  ];

  /** @var \Drupal\tripal\Entity\TripalEntityType $entity_type **/
  /** @var \Drupal\Core\Entity\EntityTypeManager $entity_type_manager **/
  $entity_type_manager = \Drupal::entityTypeManager();
  foreach ($settings as $bundle => $chado_base_table) {
    $entity_type = $entity_type_manager->getStorage('tripal_entity_type')->load($bundle);
    if ($entity_type) {
      $entity_type->setThirdPartySetting('tripal', 'chado_base_table', $chado_base_table);
      $entity_type->save();
    }
  }
}

/**
 * Updates missing mapping of CV terms to some chado table columns
 */
function tripal_chado_update_10402() {
  try {
    $messenger = \Drupal::messenger();

    $id = 'config/install/tripal.tripal_content_terms.chado_content_terms';
    ChadoTermMapping::refreshMapping($id);
    $messenger->addMessage('Reloaded Chado content terms');

    $id = 'config/install/tripal_chado.chado_term_mapping.core_mapping';
    ChadoTermMapping::refreshMapping($id);
    $messenger->addMessage('Reloaded Chado term mapping');
  }
  catch (\Exception $e) {
    throw new UpdateException('Could not reload Chado terms and mappings: ' . $e->getMessage());
  }
}

/**
 * Updates entity_id properties added to linking fields in PR 1782
 * Note: tripal_chado_update_10403 has been renumbered to
 * tripal_chado_update_10405 by PR 1865
 */

/**
 * Adds or updates several properties added to the
 * chado_sequence_coordinates_default field in PR 1861
 */
function tripal_chado_update_10404() {
  try {
    $messenger = \Drupal::messenger();

    // This update only modifies a single field type.
    $upgradable_types = ['chado_sequence_coordinates_default'];
    $upgradable_properties = ['uniquename', 'fkey', 'srcfeature_id',
        'fmin', 'is_fmin_partial', 'fmax', 'is_fmax_partial',
        'strand', 'phase', 'residue_info', 'locgroup', 'rank'];
    $entity_type = 'tripal_entity';

    $manager = \Drupal::entityDefinitionUpdateManager();
    $schema = \Drupal::database()->schema();
    $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
    $field_map = \Drupal::service('entity_field.manager')->getFieldMap();
    $fields = $field_map[$entity_type];
    $n_added = 0;
    $n_updated = 0;

    foreach ($fields as $field_name => $field_def) {
      $id = $field_def['type'];
      if (in_array($id, $upgradable_types, TRUE)) {
        $field_storage_definition = $manager->getFieldStorageDefinition($field_name, 'tripal_entity');
        if ($field_storage_definition) {
          $field_schema = $field_storage_definition->getSchema();
          $table_mapping = $storage->getTableMapping([$field_name => $field_storage_definition]);
          $table_names = $table_mapping->getDedicatedTableNames();
          $columns = $table_mapping->getColumnNames($field_name);

          foreach ($table_names as $table_name) {
            $table_exists = $schema->tableExists($table_name);
            if ($table_exists) {
              $messenger->addMessage(t("Adding and updating properties for Drupal table \"@table_name\", field \"@field_name\"",
                  ['@table_name' => $table_name, '@field_name' => $field_name]));
              foreach ($upgradable_properties as $property) {
                $field_exists = $schema->fieldExists($table_name, $columns[$property]);
                if ($field_exists) {
                  $schema->changeField($table_name, $columns[$property], $columns[$property], $field_schema['columns'][$property]);
                  $n_updated++;
                }
                else {
                  $schema->addField($table_name, $columns[$property], $field_schema['columns'][$property]);
                  $n_added++;
                }
              }
              $manager->updateFieldStorageDefinition($field_storage_definition);
            }
          }
        }
      }
    }
    $messenger->addMessage(t("Added @n_added properties, updated @n_updated properties",
        ['@n_added' => $n_added, '@n_updated' => $n_updated]));
  }
  catch (\Exception $e) {
    throw new UpdateException('Could not update property: ' . $e->getMessage());
  }
}

/**
 * Updates entity_id properties added to linking fields in PR 1782 and PR 1865
 * This is the same as former tripal_chado_update_10403 but we need to run it again
 */
function tripal_chado_update_10405() {
  try {
    $messenger = \Drupal::messenger();

    $new_property = 'entity_id';
    // This is the list of Chado fields needing an entity_id
    $upgradable_types = [
      'chado_analysis_type_default',
      'chado_array_design_type_default',
      'chado_assay_type_default',
      'chado_biomaterial_type_default',
      'chado_contact_type_default',
      'chado_feature_type_default',
      'chado_featuremap_type_default',
      'chado_organism_type_default',
      'chado_project_type_default',
      'chado_protocol_type_default',
      'chado_pub_type_default',
      'chado_stock_type_default',
      'chado_study_type_default',
    ];
    $entity_type = 'tripal_entity';

    $manager = \Drupal::entityDefinitionUpdateManager();
    $schema = \Drupal::database()->schema();
    $storage = \Drupal::entityTypeManager()->getStorage($entity_type);
    $field_map = \Drupal::service('entity_field.manager')->getFieldMap();
    $fields = $field_map[$entity_type];
    $n_added = 0;
    $n_updated = 0;

    foreach ($fields as $field_name => $field_def) {
      $id = $field_def['type'];
      if (in_array($id, $upgradable_types, TRUE)) {
        $field_storage_definition = $manager->getFieldStorageDefinition($field_name, 'tripal_entity');
        if ($field_storage_definition) {
          $field_schema = $field_storage_definition->getSchema();
          $table_mapping = $storage->getTableMapping([$field_name => $field_storage_definition]);
          $table_names = $table_mapping->getDedicatedTableNames();
          $columns = $table_mapping->getColumnNames($field_name);

          foreach ($table_names as $table_name) {
            $table_exists = $schema->tableExists($table_name);
            if ($table_exists) {
              $field_exists = $schema->fieldExists($table_name, $columns[$new_property]);
              if ($field_exists) {
                $messenger->addMessage(t("Updating entity id in Drupal table \"@table_name\", field \"@field_name\"",
                    ['@table_name' => $table_name, '@field_name' => $field_name]));
                $schema->changeField($table_name, $columns[$new_property], $columns[$new_property], $field_schema['columns'][$new_property]);
                $n_updated++;
              }
              else {
                $messenger->addMessage(t("Adding entity id to Drupal table \"@table_name\", field \"@field_name\"",
                    ['@table_name' => $table_name, '@field_name' => $field_name]));
                $schema->addField($table_name, $columns[$new_property], $field_schema['columns'][$new_property]);
                $n_added++;
              }
            }
          }
        }
        $manager->updateFieldStorageDefinition($field_storage_definition);
      }
    }
    $messenger->addMessage(t("Added @n_added entity id properties, updated @n_updated entity id properties",
        ['@n_added' => $n_added, '@n_updated' => $n_updated]));
  }
  catch (\Exception $e) {
    throw new UpdateException('Could not add entity id to fields: ' . $e->getMessage());
  }
}

/**
 * Adds chado_migrations to keep track of migrations applied to chado schema.
 */
function tripal_chado_update_10406() {
  $database = \Drupal::database();
  $schema = $database->schema();

  $table_name = 'chado_migrations';
  $table_schema = [
    'fields' => [
      'migration_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'install_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'version' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'filename' => [
        'type' => 'text',
        'not null' => FALSE,
      ],
      'applied_on' => [
        'type' => 'varchar',
        'length' => 255,
      ],
      'success' => [
        'type' => 'int',
        'size' => 'tiny',
      ],
    ],
    'unique keys' => [
      'migration' => ['install_id', 'version'],
    ],
    'indexes' => [
      'status' => ['applied_on', 'success'],
    ],
    'foreign keys' => [
      'chado_installations' => [
        'table' => 'chado_installations',
        'columns' => [
          'install_id' => 'install_id'
        ],
      ],
    ],
    'primary key' => ['migration_id'],
  ];
  $schema->createTable($table_name, $table_schema);
}
