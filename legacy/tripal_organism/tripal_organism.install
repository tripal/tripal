<?php
/**
 * @file
 * Functions pertaining to the install/uninstall of this module
 */

/**
 * Implements hook_disable().
 * Disable default views when module is disabled
 *
 * @ingroup tripal_legacy_organism
 */
function tripal_organism_disable() {

  // Disable all default views provided by this module
  require_once("tripal_organism.views_default.inc");
  $views = tripal_organism_views_default_views();
  foreach (array_keys($views) as $view_name) {
    tripal_disable_view($view_name, FALSE, ['suppress_error' => TRUE]);
  }

}

/**
 * Implementation of hook_install().
 *
 * @ingroup tripal_legacy_organism
 */
function tripal_organism_install() {

  // set the default vocabularies
  tripal_set_default_cv('organismprop', 'type_id', 'organism_property');

}

/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal_legacy_organism
 */
function tripal_organism_schema() {
  $schema['chado_organism'] = [
    'fields' => [
      'vid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'organism_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'organism_id' => ['organism_id'],
    ],
    'unique keys' => [
      'nid_vid' => ['nid', 'vid'],
      'vid' => ['vid'],
    ],
    'primary key' => ['nid'],
  ];
  return $schema;
}

/**
 * Implementation of hook_uninstall().
 *
 * @ingroup tripal_legacy_organism
 */
function tripal_organism_uninstall() {

}

/**
 * Implementation of hook_requirements().
 *
 * @ingroup tripal_legacy_organism
 */
function tripal_organism_requirements($phase) {
  $requirements = [];
  if ($phase == 'install') {
    // make sure chado is installed
    if (!$GLOBALS["chado_is_installed"]) {
      $requirements ['tripal_organism'] = [
        'title' => "tripal_organism",
        'value' => "ERROR: Chado must be installed before this module can be enabled",
        'severity' => REQUIREMENT_ERROR,
      ];
    }
  }
  return $requirements;
}
