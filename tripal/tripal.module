<?php

/**
 * @file
 * Contains tripal.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityBase;
use Symfony\Component\HttpFoundation\JsonResponse;
// use Drupal\shortcut\Entity\ShortcutSet;
use Drupal\Core\Render\Element;
use Drupal\Core\Config\FileStorage;
use Drupal\Core\Url;

require_once 'src/api/tripal.api.php';
require_once 'src/api/tripal.entities.api.php';
require_once 'src/api/tripal.terms.api.php';
require_once 'src/api/tripal.quotas.api.php';
require_once 'src/api/tripal.files.api.php';
require_once 'src/api/tripal.notice.api.php';
require_once 'src/api/tripal.upload.api.php';
require_once 'src/api/tripal.jobs.api.php';
require_once 'src/api/tripal.deprecated.api.php';
require_once 'src/api/tripal.importer.api.php';
require_once 'src/api/tripal.publish.api.php';

/**
 * Implements hook_help().
 */
function tripal_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the tripal module.
    case 'help.page.tripal':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Tripal is a toolkit to facilitate construction of online genomic, genetic (and other biological) websites.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function tripal_theme() {
  $theme = [];

  $theme['tripal_entity'] = array(
    'render element' => 'elements',
    'file' => 'templates/tripal_entity.page.php',
    'template' => 'tripal_entity',
  );

  $theme['tripal_entity_content_add_list'] = [
    'render element' => 'types',
    'variables' => ['types' => NULL],
    'file' => 'templates/tripal_entity.page.php',
  ];

  return $theme;
}

/**
 * Implements hook_toolbar().
 */
function tripal_toolbar () {
  $items = [];

  $items['tripal'] = [
    '#cache' => [
      'contexts' => [
        'user.permissions',
      ],
    ],
  ];

  if (!\Drupal::currentUser()->hasPermission('administer tripal')) {
    return $items;
  }

  $items['tripal'] += [
    '#type' => 'toolbar_item',
    'tab' => [
      '#type' => 'link',
      '#title' => t('Tripal'),
      '#url' => Url::fromRoute('tripal.admin'),
      '#attributes' => [
        'title' => t('Tripal administration'),
        'class' => ['toolbar-icon', 'toolbar-icon-tripal'],
        'aria-pressed' => 'false',
      ],
    ],
    'tray' => [
      '#heading' => t('Tripal Administration'),
      'tripal-toolbar-tray' => [
        '#prefix' => '<ul class="toolbar-menu">',
        '#suffix' => '</ul>',
        'content' => [
          '#type' => 'link',
          '#title' => t('Content'),
          '#url' => Url::fromRoute('entity.tripal_entity.collection'),
          '#attributes' => [
            'title' => 'Find biological content pages.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-content'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        'jobs' => [
          '#type' => 'link',
          '#title' => t('Jobs'),
          '#url' => Url::fromRoute('tripal.jobs'),
          '#attributes' => [
            'title' => 'Configure the form/page display for biological content.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-jobs'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        'importers' => [
          '#type' => 'link',
          '#title' => t('Data Loaders'),
          '#url' => Url::fromRoute('tripal.data_loaders'),
          '#attributes' => [
            'title' => 'Importers for biological content.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-importers'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        'page_structure' => [
          '#type' => 'link',
          '#title' => t('Page Structure'),
          '#url' => Url::fromRoute('entity.tripal_entity_type.collection'),
          '#attributes' => [
            'title' => 'Configure the form/page display for biological content.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-structure'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        /*
        'vocabs' => [
          '#type' => 'link',
          '#title' => t('Vocabularies'),
          '#url' => Url::fromRoute('entity.tripal_vocab.collection'),
          '#attributes' => [
            'title' => 'The ontological structure behind your Tripal site.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-vocab'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        */
        'storage' => [
          '#type' => 'link',
          '#title' => t('Data Storage'),
          '#url' => Url::fromRoute('tripal.storage'),
          '#attributes' => [
            'title' => 'Flexible data storage for your biological content.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-storage'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        'extensions' => [
          '#type' => 'link',
          '#title' => t('Extensions'),
          '#url' => Url::fromRoute('tripal.extension'),
          '#attributes' => [
            'title' => 'Provides administration of Tripal Extension modules.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-extend'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
        'more' => [
          '#type' => 'link',
          '#title' => t('more'),
          '#url' => Url::fromRoute('tripal.admin'),
          '#attributes' => [
            'title' => 'For additional Tripal administration.',
            'class' => ['toolbar-icon','toolbar-icon-tripal-more'],
          ],
          '#prefix' => '<li class="menu-item">',
          '#suffix' => '</li>',
        ],
      ],
    ],
    '#attached' => [
      'library' => 'tripal/tripal-toolbar',
    ],
  ];

  // Determine which tray item should be active
  // based on the current page.
  Url::fromRoute('<current>', [], ['absolute'=>'true'])->toString();
  $curr_route_name = \Drupal::routeMatch()->getRouteName();

  // Tray items routeNames (#url key in the toolbar tray definition above).
  $tray_items = [
    'entity.tripal_entity.collection' => 'content',
    'tripal.jobs' => 'jobs',
    'tripal.data_loaders' => 'importers',
    'entity.tripal_entity_type.collection' => 'page_structure',
    //'entity.tripal_vocab.collection' => 'vocab',
    'tripal.storage' => 'storage',
    'tripal.extension' => 'extensions',
    'tripal.admin' => 'more'
  ];

  foreach($tray_items as $route_name => $page_name) {
    if ($route_name == $curr_route_name) {
      array_push($items['tripal']['tray']['tripal-toolbar-tray'][ $page_name ]['#attributes']['class'], 'is-active');
      break;
    }
  }

  return $items;
}

/**
 * Implements hook_page_attachments().
 */
function tripal_page_attachments(array &$attachments) {
  $attachments['#attached']['drupalSettings']['tripal']['vars'] = [
    'baseurl' => \Drupal::request()->getSchemeAndHttpHost(),
    'tripal_path' => \Drupal::service('extension.list.module')->getPath('tripal'),
  ];
  $attachments['#attached']['library'][] = 'tripal/vars';
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function tripal_theme_suggestions_tripal_entity(array $variables) {
  $suggestions = array();
  $entity = $variables['elements']['#tripal_entity'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'tripal_entity__' . $sanitized_view_mode;
  $suggestions[] = 'tripal_entity__' . $entity->bundle();
  $suggestions[] = 'tripal_entity__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'tripal_entity__' . $entity->id();
  $suggestions[] = 'tripal_entity__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Replacement for tripal_init.
 * Implements hook_preprocess_html()
 * @param $$variables
 *   An associative array containing:
 *    page: A render element representing the page.
 */
function tripal_preprocess_html(&$variables) {
  global $base_url;
  //@todo Need to look into service injection in the module file.
  $config = \Drupal::config('tripal_admin.settings');
  // add some variables for all javasript to use for building URLs
  $clean_urls = $config->get('clean_url', 0);
  $tripal_path = \Drupal::service('extension.list.module')->getPath('tripal');
  //Add a JS library
  $variables['#attached']['library'][] = 'tripal/tripal-js';
  $variables['#attached']['drupalSettings']['tripal']['tripalJS']['baseurl'] = $base_url;
  $variables['#attached']['drupalSettings']['tripal']['tripalJS']['isClean'] = $clean_urls;
  $variables['#attached']['drupalSettings']['tripal']['tripalJS']['tripal_path'] = $tripal_path;
  // make sure the date time settings are the way Tripal will insert them
  // otherwise PostgreSQL version that may have a different datestyle setting
  // will fail when inserting or updating a date column in a table.
  Drupal::database()->query("SET DATESTYLE TO :style", array(':style' => 'MDY'));

  //Ask users to do the registration form
  // @upgrade when Issue #45 is closed.
  //if (\Drupal::currentUser()->hasPermission('administer tripal')) {
    //if (empty($config->get('tripal_site_registration') ?: FALSE) || !($config->get('disable_tripal_reporting') ?: FALSE)) {
      //\Drupal::messenger()->addWarning(t('Please register your Tripal Site.
      //Registering provides important information that will help secure funding
      //for continued improvements to Tripal. <a href="admin/tripal/register">Click to register
      //now or opt out</a>.'));
    //}
  //}
}

/**
 * Checks if the current user has permissions to perform an action on a file.
 *
 * @param $op
 *   The operation to perform.  These include 'view', 'download', 'renew' and
 *   'delete'
 * @param $uid
 *   The user ID of the user's account that owns the file.
 * @param $fid
 *   The file ID.
 */
function tripal_access_user_files($op, $uid, $fid = NULL) {
  // global $user is deprecated in D8 use the currentUser service.
  // this only returns an AccountProxyInterface object and not a full
  // UserInterface object.  To get access to the full UserInterface object, load
  // the user using the uid of the currentUser
  // https://api.drupal.org/api/drupal/core!lib!Drupal.php/function/Drupal%3A%3AcurrentUser/8.2.x
  $user = User::load(\Drupal::currentUser()->id());

  // The site admin can do anything.
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }

  // Only the user that owns the files can see them.
  if ($uid != $user->uid) {
    return FALSE;
  }

  // If no file ID is provided and the user wants to view then
  // this is the case where the user wants to see all the files.
  if (!$fid and $op == 'view') {
    return TRUE;
  }

  // file_load will be deprecated in D9 $file = file_load($fid);
  // https://api.drupal.org/api/drupal/core%21modules%21file%21file.module/function/file_load/8.2.x
  $file = EntityBase::load($fid);
  switch ($op) {
    case 'view':
    case 'download':
    case 'renew':
    case 'delete':
      if ($user->uid == $file->uid) {
        return TRUE;
      }
      break;
  }
  return FALSE;
}

/**
 * An access function for data collections.
 *
 * @return boolean
 */
function tripal_accesss_user_collections($uid) {
  $config = \Drupal::config('tripal_admin.settings');
  if (!tripal_access_user_data($uid)) {
    return FALSE;
  }
  $collections_enabled = $config->get('tripal_data_collections_enabled', 1);
  if (!$collections_enabled) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Access callback for accessing a user's Tripal-added private data.
 *
 * The User account being accessed must match the ID of the current user. This
 * function can be used to check access for any type of user-specfic data
 * added by any Tripal module.
 *
 * @param  $uid
 *   The UID of the user's account to access.
 * @return boolean
 */
function tripal_access_user_data($uid) {
  if ($uid == \Drupal::currentUser()->id()) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu_local_tasks_alter().
 * https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Menu%21menu.api.php/function/hook_menu_local_tasks_alter/8.8.x
 * Used to add action links to pages.
 */
function tripal_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add an "Add Tripal Content" action link to the Admin >> Content >>
  // Biological Content page.
  if ($root_path == 'admin/content/bio_data') {
    $item = menu_get_item('bio_data/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_shortcut_default_set().
 * Modify the shortcut menu to include Biological content links.
 * @upgrade when Issue #21 decides what to do here.
 *
 * @param object $account
 *   The user account whose default shortcut set will be returned. If not provided, the
 *   function will return the currently logged-in user's default shortcut set.
 *
 * @return
 *   An object representing the default shortcut set.
 */
function tripal_shortcut_default_set($account) {
  //@todo This will set another dependency as this is a contrib module.
  // $sets = ShortcutSet::getShortcuts();
  // $found = FALSE;
  // foreach ($sets as $set) {
  //   if ($set->title == 'TripalDefault') {
  //     $found = TRUE;
  //   }
  // }
  // if (!$found) {
  //   $t = get_t();
  //   // Create an initial default shortcut set.
  //   $shortcut_set = new stdClass();
  //   $shortcut_set->title = $t('TripalDefault');
  //   $shortcut_set->links = array(
  //     array(
  //       'link_path' => 'node/add',
  //       'link_title' => $t('Add content'),
  //       'weight' => -35,
  //     ),
  //     array(
  //       'link_path' => 'bio_data/add',
  //       'link_title' => 'Add Tripal Content',
  //       'weight' => -30,
  //     ),
  //     array(
  //       'link_path' => 'admin/content',
  //       'link_title' => $t('Find content'),
  //       'weight' => -25,
  //     ),
  //     array(
  //       'link_path' => 'admin/content/tripal',
  //       'link_title' => 'Find Tripal Content',
  //       'weight' => -20,
  //     ),
  //   );
  //   shortcut_set_save($shortcut_set);
  // }

  // $sets = shortcut_sets();
  // foreach ($sets as $set) {
  //   if ($set->title == 'TripalDefault') {
  //     return $set->set_name;
  //   }
  // }
}

/**
 * Menu argument loader; Load a tripal data type by string.
 *
 * This function is not meant to be used as an API function. It is only meant
 * for use in the menu to resolve the %tripal_bundle wildcard.
 *
 * @param $type
 *   The machine-readable name of a tripal data type to load.
 * @return
 *   A tripal data type array or FALSE if $type does not exist.
 */
function TripalBundle_load($bundle_type, $reset = FALSE) {
  // Get the type of entity by the ID.
  $bundle = Drupal::database()->select('tripal_bundle', 'tdt')
    ->fields('tdt')
    ->condition('name', $bundle_type)
    ->execute()
    ->fetchObject();
  if ($bundle) {
    $entity = \Drupal::entityTypeManager()->getStorage('TripalBundle')->load($bundle->id);
    return reset($entity);
  }
  return FALSE;
}

/**
 * Allows the menu system to use a wildcard to fetch the entity.
 *
 * Make sure that the wildcard you choose in the tripal_entity entity
 * definition fits the function name here.
 *
 * This function is not meant to be used as an API function. It is only meant
 * for use in the menu to resolve the %tripal_entity wildcard.
 *
 * @param $id
 *   Integer specifying the tripal_entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $tripal_entity object or FALSE if it cannot be loaded.
 *
 * @see tripal_entity_load_multiple()
 */
function TripalEntity_load($id, $reset = FALSE) {
  // $entity = entity_load('TripalEntity', array($id), array(), $reset);
  $entity = tripal_load_entity('TripalEntity', array($id), $reset);
  return reset($entity);
}

/**
 * Imports all of the Tripal API into scope.
 *
 * Typically this function call is not necessary as all of the API is
 * automaticaly included by the tripal module.  However this function can
 * be useful in the .install files during a site upgrade when the tripal
 * module is not enabld.
 *
 * Example usage:
 * @code
 *   module_load_include('module', 'tripal', 'tripal');
 *   tripal_import_api();
 * @endcode
 *
 */
function tripal_import_api() {
  module_load_include('inc', 'tripal', 'api/tripal.d3js.api');
  module_load_include('inc', 'tripal', 'api/tripal.fields.api');
  module_load_include('inc', 'tripal', 'api/tripal.importer.api');
  module_load_include('inc', 'tripal', 'api/tripal.terms.api');
  module_load_include('inc', 'tripal', 'api/tripal.entities.api');
  module_load_include('inc', 'tripal', 'api/tripal.files.api');
  module_load_include('inc', 'tripal', 'api/tripal.jobs.api');
  module_load_include('inc', 'tripal', 'api/tripal.notice.api');
  module_load_include('inc', 'tripal', 'api/tripal.variables.api');
  module_load_include('inc', 'tripal', 'api/tripal.upload.api');
  module_load_include('inc', 'tripal', 'api/tripal.collections.api');
  module_load_include('inc', 'tripal', 'api/tripal.quotas.api');
  module_load_include('inc', 'tripal', 'api/tripal.DEPRECATED.api');
}

function tripal_check_new_fields($bundle_name) {
  $bundle = tripal_load_bundle_entity(array('name' => $bundle_name));
  $term = tripal_load_term_entity(array('term_id' => $bundle->term_id));

  $added = tripal_create_bundle_fields($bundle, $term);
  if (count($added) == 0) {
    \Drupal::messenger()->addStatus(t('No new fields were added'));
  }
  foreach ($added as $field_name) {
    \Drupal::messenger()->addStatus(t('Added field: ' . $field_name));
  }

  $response = new RedirectResponse("admin/structure/tripal/manage/$bundle_name/fields");
  $response->send();
}


/**
 * Implements hook_rebuild().
 */
function tripal_rebuild() {

  tripal_load_configuration('tripal', 'tripalentitytype_collection');
  tripal_load_configuration('tripal', 'tripal_content_terms');
  tripal_load_configuration('tripal', 'tripalfield_collection');

  //
  // Make sure the CustomTables view is present. If not then add it.
  //

  // First get the config file.
  $dir = \Drupal::service('extension.list.module')->getPath('tripal');
  $fileStorage = new FileStorage($dir);
  $config = $fileStorage->read('config/install/views.view.tripal_jobs');

  // Next load the storage system for views entieis and check if the view
  // already exists. If it does then don't reload it.
  $storage = \Drupal::entityTypeManager()->getStorage('view');
  $view = $storage->load('tripal_jobs');
  if (!$view) {
    $view = $storage->create($config);
    $view->save();
  }
}

/**
 * Callback: Allows Tripal Jobs to create a set of TripalEntityType Collections.
 *
 * @param array $options
 *   - collection_ids:
 *       An array where each found collection has a key entry and only the chosen
 *       ones have a value the same as the key. All collections not chosen to be
 *       installed will have a value of 0.
 */
function import_tripalentitytype_collection(array $options, \Drupal\tripal\Services\TripalJob $job = NULL) {

  // We need to ensure that we only submit the chosen collections.
  $collection_ids = $options['collection_ids'];
  $chosen_collection_ids = array_filter($collection_ids, function($e) {
      return ($e !== 0);
  });

  $content_type_setup = \Drupal::service('tripal.tripalentitytype_collection');
  $content_type_setup->install($chosen_collection_ids);

  $fields = \Drupal::service('tripal.tripalfield_collection');
  $fields->install($chosen_collection_ids);

}
