<?php
/**
 * @file
 * Contains functions used to install/uninstall tripal.
 */

/**
 * Implementation of hook_install().
 *
 * @ingroup tripal
 */
function tripal_install() {
  // On upgrade from Tv2 to Tv3 we need to add a new field to the tripal_jobs
  // table it's missing.
  if (!db_field_exists('tripal_jobs', 'includes')) {
    db_add_field('tripal_jobs', 'includes', [
      'type' => 'text',
      'description' => 'A serialized array of file paths that should be included prior to executing the job.',
      'not null' => FALSE,
    ]);
  }

  $menu = [
    'menu_name' => 'data_search',
    'title' => t('Data Search'),
    'description' => 'The Data Search menu contains links to search tools for finding biological data.',
  ];
  menu_save($menu);
}

/**
 * Adds variables for bundles.
 */
function tripal_add_variables() {
  // Add tripal bundle variables needed for storing additional settings for
  // Tripal Bundles.
  tripal_insert_variable(
    'title_format',
    'A pattern including tokens that can be used to generate tripal entity titles.'
  );
  tripal_insert_variable(
    'url_format',
    'A pattern including tokens that can be used to generate tripal entity url aliases.'
  );
  tripal_insert_variable(
    'description',
    'The description of a Tripal Entity type/bundle.'
  );
  tripal_insert_variable(
    'hide_empty_field',
    'Structure->Tripal Content Type->edit checkbox to hide empty fields for that bundle.'
  );
}

/**
 *
 */
function tripal_uninstall() {
  /*
   // So somehow I was able to uninstall this module without deleting the bundles. This
   // caused aweful errors because fields weren't deleted so when I re-installed, the code
   // tried to create fields that were inactive (despite checking if the field exists
   // before creating). The following code was meant to ensure that all content was deleted
   // before uninstall so these errors would not occur. Unfortunatly I am now unable to
   // test this because the Field API module is disabling uninstall of Tripal Chado until
   // all the content is deleted. Thus ensuring the errors described above don't occur.
   // But I'm Sure I was able to uninstall with content before...
   // **I am slowly going crazy; Crazy going slowly am I**
   // Anyway, I'll leaving the solution code here in case I am able to repeat it in
   // the future.
   // @see https://www.drupal.org/node/1262092
   // @see https://www.drupal.org/node/1861710

   // First delete all TripalEntities.
   $entity_ids = (new EntityFieldQuery)->entityCondition("entity_type", "TripalEntity")->execute();
   $entity_ids = reset($entity_ids);
   entity_delete_multiple("TripalEntity", array_keys($entity_ids));

   // Then delete all TripalBundles.
   $bundle_ids = (new EntityFieldQuery)->entityCondition("entity_type", "TripalBundle")->execute();
   $bundle_ids = reset($bundle_ids);
   entity_delete_multiple("TripalBundle", array_keys($bundle_ids));

   // @TODO: Should we delete all TripalVocabularies and TripalTerms?

   // Finally purge all fields that are no longer used.
   field_purge_batch(100);
   */
}

/**
 *
 */
function tripal_enable() {
  // If Tripal v2 is already installed, the installation of this module
  // will try and recreate some of the tables created with tripal_core and the
  // installation will fail.  Therefore, in the install we renamed it. Now
  // we want to move it back.
  if (db_table_exists('tripal_jobs2')) {
    $sql = "DROP TABLE tripal_jobs";
    db_query($sql);
    db_rename_table('tripal_jobs2', 'tripal_jobs');
  }

  if (db_table_exists('tripal_token_formats2')) {
    $sql = "DROP TABLE tripal_token_formats";
    db_query($sql);
    db_rename_table('tripal_token_formats2', 'tripal_token_formats');
  }

  if (db_table_exists('tripal_variables2')) {
    $sql = "DROP TABLE tripal_variables";
    db_query($sql);
    db_rename_table('tripal_variables2', 'tripal_variables');
  }

  // schema change
  if (!db_field_exists('tripal_jobs', 'includes')) {
    $sql = "ALTER TABLE tripal_jobs ADD COLUMN includes text";
    db_query($sql);
  }

  tripal_add_variables();
}

/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal
 */
function tripal_schema() {

  // If Tripal v2 is already installed, the installation of this module
  // will try and recreate some of the tables created with tripal_core and the
  // installation will fail.  Therefore, we need to temporarily move those
  // tables out of the way, let the module install and then move them back.
  $migrated = variable_get('tripal_v2_upgrade_v3_check', FALSE);
  if (!$migrated) {
    if (db_table_exists('tripal_jobs')) {
      db_rename_table('tripal_jobs', 'tripal_jobs2');
    }

    if (db_table_exists('tripal_token_formats')) {
      db_rename_table('tripal_token_formats', 'tripal_token_formats2');
    }

    if (db_table_exists('tripal_variables')) {
      db_rename_table('tripal_variables', 'tripal_variables2');
    }
    variable_set('tripal_v2_upgrade_v3_check', TRUE);
  }
  $schema = [];

  $schema['tripal_jobs'] = tripal_tripal_jobs_schema();
  $schema['tripal_token_formats'] = tripal_tripal_token_formats_schema();
  $schema['tripal_variables'] = tripal_tripal_variables_schema();


  // Adds a table for managing TripalEntity entities.
  $schema['tripal_vocab'] = tripal_tripal_vocab_schema();
  $schema['tripal_term'] = tripal_tripal_term_schema();
  $schema['tripal_entity'] = tripal_tripal_entity_schema();
  $schema['tripal_bundle'] = tripal_tripal_bundle_schema();
  $schema['tripal_import'] = tripal_tripal_import_schema();
  $schema['tripal_collection'] = tripal_tripal_collection_schema();
  $schema['tripal_collection_bundle'] = tripal_tripal_collection_bundle_schema();

  // Adds a table for additional information related to bundles.
  $schema['tripal_bundle_variables'] = tripal_tripal_bundle_variables_schema();
  // Adds a table for administrative notifications on the dashboard.
  $schema['tripal_admin_notfications'] = tripal_tripal_admin_notifications_schema();
  return $schema;
}

/**
 * Returns the Drupal Schema API array for the tripal_jobs table.
 */
function tripal_tripal_jobs_schema() {
  return [
    'fields' => [
      'job_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The Drupal userid of the submitee',
      ],
      'job_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'modulename' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
        'description' => 'The module name that provides the callback for this job',
      ],
      'callback' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'arguments' => [
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ],
      'progress' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'default' => 0,
        'not null' => FALSE,
        'description' => 'a value from 0 to 100 indicating percent complete',
      ],
      'status' => [
        'type' => 'varchar',
        'length' => 50,
        'not null' => TRUE,
      ],
      'submit_date' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX integer submit time',
      ],
      'start_time' => [
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'UNIX integer start time',
      ],
      'end_time' => [
        'type' => 'int',
        'not null' => FALSE,
        'description' => 'UNIX integer end time',
      ],
      'error_msg' => [
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
      ],
      'pid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'The process id for the job',
      ],
      'priority' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => '0',
        'description' => 'The job priority',
      ],
      'mlock' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'If set to 1 then all jobs for the module are held until this one finishes',
      ],
      'lock' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'If set to 1 then all jobs are held until this one finishes',
      ],
      'includes' => [
        'type' => 'text',
        'description' => 'A serialized array of file paths that should be included prior to executing the job.',
        'not null' => FALSE,
      ],
    ],
    'indexes' => [
      'job_id' => ['job_id'],
      'job_name' => ['job_name'],
    ],
    'primary key' => ['job_id'],
  ];
}

/**
 * Returns the Drupal Schema API array for the tripal_jobs table.
 */
function tripal_tripal_collection_schema() {
  return [
    'fields' => [
      'collection_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'collection_name' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
      ],
      'description' => [
        'type' => 'text',
        'not null' => FALSE,
      ],
      'uid' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'The user Id of the person who created the collection.',
      ],
      'create_date' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX integer start time',
      ],
    ],
    'indexes' => [
      'uid' => ['uid'],
    ],
    'unique keys' => [
      'user_collection' => ['uid', 'collection_name'],
    ],
    'primary key' => ['collection_id'],
  ];
}

/**
 * Returns the Drupal Schema API array for the tripal_jobs table.
 */
function tripal_tripal_collection_bundle_schema() {
  return [
    'fields' => [
      'collection_bundle_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'collection_id' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'bundle_name' => [
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
      ],
      'ids' => [
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'An array of entity IDs.',
      ],
      'fields' => [
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'An array of numeric field IDs.',
      ],
      'site_id' => [
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
        'description' => 'The ID of the site from the Tripal Sites table.',
      ],
    ],
    'indexes' => [
      'collection_id' => ['collection_id'],
    ],
    'primary key' => ['collection_bundle_id'],
  ];
}

/**
 * Returns the Drupal Schema API array for the tripal_jobs table.
 */
function tripal_tripal_import_schema() {
  return [
    'fields' => [
      'import_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'uid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The Drupal userid of the submitee.',
      ],
      'class' => [
        'type' => 'varchar',
        'length' => 256,
        'not null' => TRUE,
      ],
      'fid' => [
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'The file IDs of the to import. This only applies if the file was uploaded (i.e. not already on the server) and is mangaged by Drupal. Multiple fids are separated using a | character.',
      ],
      'arguments' => [
        'type' => 'text',
        'size' => 'normal',
        'not null' => FALSE,
        'description' => 'Holds a serialized PHP array containing the key/value paris that are used for arguments of the job.',
      ],
      'submit_date' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX integer submit time',
      ],
    ],
    'indexes' => [
      'class' => ['class'],
    ],
    'foreign keys' => [
      'tripal_jobs' => [
        'table' => 'tripal_jobs',
        'columns' => [
          'job_id' => 'job_id',
        ],
      ],
      'users' => [
        'table' => 'users',
        'columns' => [
          'uid' => 'uid',
        ],
      ],
      'file_managed' => [
        'table' => 'file_managed',
        'columns' => [
          'fid' => 'fid',
        ],
      ],
    ],
    'primary key' => ['import_id'],
  ];
}

/**
 *
 * @return
 */
function tripal_tripal_token_formats_schema() {
  return [
    'fields' => [
      'tripal_format_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'content_type' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'application' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'format' => [
        'type' => 'text',
        'not null' => TRUE,
      ],
      'tokens' => [
        'type' => 'text',
        'not null' => TRUE,
      ],
    ],
    'unique keys' => [
      'type_application' => ['content_type', 'application'],
    ],
    'primary key' => ['tripal_format_id'],
  ];
}

function tripal_tripal_variables_schema() {

  return [
    'description' => 'This table houses a list of unique variable names that ' .
      'can be used in the tripal_node_variables table.',
    'fields' => [
      'variable_id' => [
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'description' => [
        'type' => 'text',
        'not null' => TRUE,
      ],
    ],
    'primary key' => [
      0 => 'variable_id',
    ],
    'unique keys' => [
      'tripal_variables_c1' => [
        0 => 'name',
      ],
    ],
    'indexes' => [
      'tripal_variable_names_idx1' => [
        0 => 'variable_id',
      ],
    ],
  ];

  return $schema;
}

/**
 * @section
 * Schema Definitions.
 */


/**
 * The base table for Biological Data Entities.
 *
 * This contains the actual data. For example, if you have a 5 genes and 10
 * mRNA then this table will have 15 records and include both genes and mRNA's.
 */
function tripal_tripal_entity_schema() {

  $schema = [
    'description' => 'The base table for Tripal Vocabulary-based entities.',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for a vocabulary entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'type' => [
        'description' => 'The type of entity. This should be an official vocabulary ID (e.g. SO, RO, GO).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ],
      'bundle' => [
        'description' => 'The type of bundle. This should be an official vocabulary ID (e.g. SO, RO, GO) followed by an underscore and the term accession.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'term_id' => [
        'description' => 'The term_id for the type of entity. This term_id corresponds to a TripalTerm record.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'title' => [
        'description' => 'The title of this node, always treated as non-markup plain text.',
        'type' => 'text',
        'not null' => TRUE,
        'default' => '',
      ],
      'uid' => [
        'description' => 'The {users}.uid that owns this node; initially, this is the user that created it.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'status' => [
        'description' => 'Boolean indicating whether the node is published (visible to non-administrators).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ],
      'created' => [
        'description' => 'The Unix timestamp when the node was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'changed' => [
        'description' => 'The Unix timestamp when the node was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'term_id' => ['term_id'],
      'entity_changed' => ['changed'],
      'entity_created' => ['created'],
      'type' => ['type'],
      'uid' => ['uid'],
      'bundle' => ['bundle'],
    ],
    'unique keys' => [],
    'primary key' => ['id'],
  ];
  return $schema;
}

/**
 * The base table for TripalVocab schema.
 *
 * This contains the actual data. For example, if you have a 5 genes and 10
 * mRNA then this table will have 15 records and include both genes and mRNA's.
 */
function tripal_tripal_vocab_schema() {

  // This schema only provides enough information to assign a unique ID
  // to the vocabulary. Any additonal information is added to the Entity object
  // by the selected database back-end.
  $schema = [
    'description' => 'The base table for TripalVocab entities.',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for a vocab entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'vocabulary' => [
        'description' => 'The short name for the vocabulary (e.g. SO, PATO, etc.).',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      'created' => [
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'changed' => [
        'description' => 'The Unix timestamp when the entity was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'vocabulary' => ['vocabulary'],
      'entity_changed' => ['changed'],
      'entity_created' => ['created'],
    ],
    'unique keys' => ['vocabulary' => ['vocabulary']],
    'primary key' => ['id'],
  ];
  return $schema;
}

/**
 * The base table for TripalTerm entities.
 *
 * This contains the actual data. For example, if you have a 5 genes and 10
 * mRNA then this table will have 15 records and include both genes and mRNA's.
 */
function tripal_tripal_term_schema() {

  // This schema only provides enough information to assign a unique ID
  // to the term and associate it to it's vocabulary. Any additonal information
  // is added to the Entity object by the selected database back-end.
  $schema = [
    'description' => 'The base table for TripalTerm entities.',
    'fields' => [
      'id' => [
        'description' => 'The primary identifier for a term entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'vocab_id' => [
        'description' => 'The vocabulary_id of the TripalVocab entity to which this term belongs.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'accession' => [
        'description' => 'The id (or accession) of this term in the vocabulary.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'name' => [
        'description' => 'The human readable name for this term.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'created' => [
        'description' => 'The Unix timestamp when the entity was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'changed' => [
        'description' => 'The Unix timestamp when the entity was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'indexes' => [
      'vocab_id' => ['vocab_id'],
      'accession' => ['accession'],
      'entity_changed' => ['changed'],
      'entity_created' => ['created'],
    ],
    'foreign keys' => [
      'tripal_vocab' => [
        'table' => 'tripal_vocab',
        'columns' => [
          'vocab_id' => 'vocab_id',
        ],
      ],
    ],
    'unique keys' => ['vocab_term' => ['vocab_id', 'accession']],
    'primary key' => ['id'],
  ];
  return $schema;
}

/**
 * The base table for TripalEntity entities.
 *
 * This table contains a list of Biological Data Types.
 * For the example above (5 genes and 10 mRNAs), there would only be two
 * records in this table one for "gene" and another for "mRNA".
 */
function tripal_tripal_bundle_schema() {

  $schema = [
    'description' => 'Stores information about defined tripal data types.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique numeric ID.',
      ],
      'type' => [
        'description' => 'The type of entity (e.g. TripalEntity).',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ],
      'term_id' => [
        'description' => 'The term_id for the type of entity. This term_id corresponds to a TripalTerm record.',
        'type' => 'int',
        'not null' => TRUE,
      ],
      'name' => [
        'description' => 'The name of the bundle. This should be an official vocabulary ID (e.g. SO, RO, GO) followed by an underscore and the term accession.',
        'type' => 'varchar',
        'length' => 1024,
        'not null' => TRUE,
        'default' => '',
      ],
      'label' => [
        'description' => 'The human-readable name of this bundle.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
    ],
    'indexes' => [
      'name' => ['name'],
      'term_id' => ['term_id'],
      'label' => ['label'],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'name' => ['name'],
    ],
  ];
  return $schema;
}


/**
 * Additional Tripal Bundle Information.
 *
 * This table is used for storing any additonal information describing
 * a tripal bundle. For example, this is a good place to store title/url
 * formats.
 */
function tripal_tripal_bundle_variables_schema() {

  $schema = [
    'description' => 'This table is used for storing any additonal information describing
      a tripal bundle. For example, this is a good place to store title/url formats.',
    'fields' => [
      'bundle_variable_id' => [
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'bundle_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'variable_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'value' => [
        'type' => 'text',
        'not null' => FALSE,
      ],
      'rank' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
    ],
    'primary key' => [
      0 => 'bundle_variable_id',
    ],
    'unique keys' => [
      'tripal_bundle_variables_c1' => [
        0 => 'bundle_id',
        1 => 'variable_id',
        2 => 'rank',
      ],
    ],
    'indexes' => [
      'tripal_bundle_variables_idx1' => [
        0 => 'variable_id',
      ],
    ],
    'foreign keys' => [
      'tripal_variables' => [
        'table' => 'tripal_variables',
        'columns' => [
          'variable_id' => 'variable_id',
        ],
      ],
    ],
  ];

  return $schema;
}

/**
 * Additional Tripal Admin Notification Information.
 *
 * This table is used for information describing administrative
 * notifications. For example, when new fields are available.
 */
function tripal_tripal_admin_notifications_schema() {

  $schema = [
    'description' => 'This table is used for information describing administrative
     notifications. For example, when new fields are available.',
    'fields' => [
      'note_id' => [
        'type' => 'serial',
        'not null' => TRUE,
      ],
      'details' => [
        'description' => 'Description and additional information relating to the notification.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'title' => [
        'description' => 'Title of the notification.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'actions' => [
        'description' => 'Actions that can be performed on the notification, like disimissal or import.',
        'type' => 'text',
        'not null' => FALSE,
      ],
      'submitter_id' => [
        'description' => 'A unique id that should be specific to the notification to ensure notifications are not duplicated.',
        'type' => 'text',
        'not null' => TRUE,
      ],
      'enabled' => [
        'description' => 'Boolean indicating whether the notification is enabled or disabled (disabled will not be shown on the dashboard).',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ],
      'type' => [
        'description' => 'Type of the notification, relating to what tripal function the notification belongs to, IE Fields, Jobs, Vocabulary.',
        'type' => 'text',
        'not null' => FALSE,
      ],
    ],
    'primary key' => [
      0 => 'note_id',
    ],
  ];

  return $schema;
}

/**
 * Change tripal_vocab.vocabulary to varchar(128)
 */
function tripal_update_7300() {
  try {
    $spec = [
      'description' => 'The short name for the vocabulary (e.g. SO, PATO, etc.).',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
    ];
    db_change_field('tripal_vocab', 'vocabulary', 'vocabulary', $spec);
  } catch (\PDOException $e) {
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Create new admin notifications table.
 */
function tripal_update_7301() {
  $transaction = db_transaction();
  try {
    $schema['tripal_admin_notfications'] = tripal_tripal_admin_notifications_schema();
    db_create_table('tripal_admin_notfications', $schema['tripal_admin_notfications']);
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Create new tripal import table.
 */
function tripal_update_7302() {
  $transaction = db_transaction();
  try {
    $schema['tripal_import'] = tripal_tripal_import_schema();
    db_create_table('tripal_import', $schema['tripal_import']);
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Remove the job_id from the tripal import table.
 */
function tripal_update_7303() {
  $transaction = db_transaction();
  try {
    if (db_field_exists('tripal_import', 'job_id')) {
      db_drop_field('tripal_import', 'job_id');
    }
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Adds a variable for the bundles to manage hiding of empty fields.
 */
function tripal_update_7304() {
  $transaction = db_transaction();
  try {
    tripal_insert_variable(
      'hide_empty_field',
      'Structure->Tripal Content Type->edit checkbox to hide empty fields for that bundle.'
    );
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Adjusts the tripal_import table to support multiple file uploads.
 */
function tripal_update_7305() {
  $transaction = db_transaction();
  try {
    db_change_field('tripal_import', 'fid', 'fid', [
      'type' => 'text',
      'not null' => FALSE,
      'description' => 'The file IDs of the to import. This only applies if the file was uploaded (i.e. not already on the server) and is mangaged by Drupal. Multiple fids are separated using a | character.',
    ]);
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not perform update: ' . $error);
  }
}

/**
 * Adds the tripal_collection table.
 */
function tripal_update_7306() {
  $transaction = db_transaction();
  try {
    $schema = [];
    $schema['tripal_collection'] = tripal_tripal_collection_schema();
    db_create_table('tripal_collection', $schema['tripal_collection']);
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add the tripal_collection table:' . $error);
  }
}

/**
 * Adds a new Data search menu for the Tripal created search tools.  If you
 * have customized any of the Tripal content search forms then those forms will
 * remain unchanged. All other default search pages will be moved to the
 * new Data Search menu item available at Admin > Stucture > Menu > Data Search.
 */
function tripal_update_7307() {
  $menu = [
    'menu_name' => 'data_search',
    'title' => t('Data Search'),
    'description' => 'The Data Search menu contains links to search tools for finding biological data.',
  ];
  menu_save($menu);
}

/**
 * Remove the bundle_name, ids, fields from the tripal collections table.
 * And add the new tripal_tripal_collection_bundle_schema
 */
function tripal_update_7308() {
  $transaction = db_transaction();
  try {
    if (db_field_exists('tripal_collection', 'bundle_name')) {
      db_drop_field('tripal_collection', 'bundle_name');
    }
    if (db_field_exists('tripal_collection', 'ids')) {
      db_drop_field('tripal_collection', 'ids');
    }
    if (db_field_exists('tripal_collection', 'fields')) {
      db_drop_field('tripal_collection', 'fields');
    }
    $schema = [];
    $schema['tripal_collection_bundle'] = tripal_tripal_collection_bundle_schema();
    db_create_table('tripal_collection_bundle', $schema['tripal_collection_bundle']);
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add the tripal_collection table:' . $error);
  }
}

/**
 * Add the site_id field to the tripal_collection_bundle table.
 */
function tripal_update_7309() {
  $transaction = db_transaction();
  try {
    if (!db_field_exists('tripal_collection_bundle', 'site_id')) {
      $field = [
        'type' => 'int',
        'size' => 'normal',
        'not null' => FALSE,
        'description' => 'The ID of the site from the Tripal Sites table.',
      ];
      db_add_field('tripal_collection_bundle', 'site_id', $field);
    }
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add the tripal_collection table:' . $error);
  }
}

/**
 * Adds the missing tripal_collection_bundle table
 *
 * @throws DrupalUpdateException
 */
function tripal_update_7310() {
  $transaction = db_transaction();
  try {
    if (!db_table_exists('tripal_collection_bundle')) {
      $schema = [];
      $schema['tripal_collection_bundle'] = tripal_tripal_collection_bundle_schema();
      db_create_table('tripal_collection_bundle', $schema['tripal_collection_bundle']);
    }
  } catch (\PDOException $e) {
    $transaction->rollback();
    $error = $e->getMessage();
    throw new DrupalUpdateException('Could not add the tripal_collection_bundle table:' . $error);
  }
}
